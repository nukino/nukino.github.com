<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Nukino's memorandum]]></title>
  <link href="http://nukino.github.com/atom.xml" rel="self"/>
  <link href="http://nukino.github.com/"/>
  <updated>2012-02-04T05:31:11+09:00</updated>
  <id>http://nukino.github.com/</id>
  <author>
    <name><![CDATA[nukino]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Cygwinで日本語manのレイアウト崩れを直す]]></title>
    <link href="http://nukino.github.com/blog/2012/02/04/Cygwinman/"/>
    <updated>2012-02-04T01:55:00+09:00</updated>
    <id>http://nukino.github.com/blog/2012/02/04/Cygwinman</id>
    <content type="html"><![CDATA[<p>Cygwin1.7.9において</p>

<p><code>/etc/man.conf</code>に</p>

<pre><code>JNROFF		/usr/bin/groff -DeucJP -Tutf8 -mandoc
</code></pre>

<p>と記述すれば、日本語manが表示されるが、レイアウトが崩れるので、これを修正しようと試みた</p>

<p>個人的にバージョンダウンとかは嫌いなので、新しいバージョン、新しいツールを導入する方向。</p>

<!-- more -->

<h2 id="groff-121">groff 1.21のインストール</h2>

<p>別マシンにインストールしてあるUbuntu 11.10では日本語manのレイアウト崩れは起こっていない。
そこでgroffのバージョンを確認すると1.21となっていたので、バージョンアップすればいけんじゃね？</p>

<p>ということでインストールしてみた。</p>

<p>手法としては</p>

<ol>
  <li>旧バージョンと共存させる</li>
  <li>新バージョンに完全に置き換える</li>
</ol>

<p>の2つがあると思う。</p>

<p>「倒れるときは前のめり」というモットーの元？、私は「2.」で行くことにする(とか何とか言いつつしっかり
<code>C:\Cygwin</code>はバックアップ取っといたけど)</p>

<h3 id="section">インストールの前に</h3>

<p>gcc4、make辺りは必要だと思うので、インストールしてないなら、インストールしておく。</p>

<p>また、新バージョンに置き換える場合はgroffをアンインストールしておく(groff-coreもいらんかも)。</p>

<pre class="cmdline"><code>apt-cyg install gcc4 make
apt-cyg remove groff
</code></pre>

<p>apt-cygを導入してない場合はsetup.exeを使用する。apt-cygの導入方法については<a href="http://nukino.github.com/blog/2012/02/02/Cygwin/#apt-cyg">ここ</a>参照。</p>

<h3 id="section-1">インストール</h3>

<p>Cygwinのパッケージはないので、ソースコードからビルドする。</p>

<pre class="cmdline"><code>wget ftp://ftp.ring.gr.jp/pub/GNU/groff/groff-1.21.tar.gz
tar -zxvf groff-1.21.tar.gz
cd groff-1.21
./configure --prefix=/usr
make
make install
</code></pre>

<p>旧バージョンと共存させる場合は<code>./configure</code>の際のprefixを変える(指定しなければ<code>/usr/local</code>みたい)。
また、<code>/etc/man.conf</code>を編集しておくこと(置き換えの場合は不要)</p>

<p>一応</p>

<pre class="cmdline"><code>which groff
groff --version
</code></pre>

<p>として、きちんとインストールされてるのを確認しておく。</p>

<h3 id="section-2">スクリーンショット</h3>

<p><code>man man</code>としたときの比較</p>

<h4 id="groff-1201">変更前(groff 1.20.1)</h4>

<p><img src="http://nukino.github.com/images/2012/02/03/img00.png" alt="img00" title="変更前 man manスクリーンショット" /></p>

<h4 id="groff-121-1">変更後(groff 1.21)</h4>

<p><img src="http://nukino.github.com/images/2012/02/03/img01.png" alt="img01" title="groff変更後 man manスクリーンショット" /></p>

<p>だいぶましになったが、特に英語と日本語が混じっている行がおかしいのと、インデントの効いていない行があ
る(スクリーンショット内にはないけど、ウィンドウサイズを79x24にして、下の方にスクロールしたら確認でき
ると思う)。</p>

<h2 id="man-db">man-dbのインストール</h2>

<p>再びUbuntu 11.10にて、<code>man</code>のバージョンを確認すると2.6.0.2だった。Cygwinのバージョン(1.6g)とだいぶ違う。</p>

<p>どうやらUbuntu 11.10に入ってるmanのパッケージ名は正確にはman-dbというらしい</p>

<p>man-dbは何か設定方法が違うっぽい(<code>/etc/manpath.conf</code>しかない？？)が、設定項目がないと言うことはデ
フォルトで使えるようになってるんだろう。ということで、とりあえずインストールしてみる。</p>

<h3 id="section-3">準備</h3>

<p>まずはmanをアンインストール。あとDBのライブラリが必要なのでインストールする。<a href="http://packages.ubuntu.com/oneiric/man-db">
Ubuntu man-dbの依存関係</a>を見ると、gdbmがいいのかな？
(db4.5でもconfigureまで通るのは確認した)</p>

<pre class="cmdline"><code>apt-cyg remove man
apt-cyg install libgdbm-devel
</code></pre>

<p>また、libpipelineというライブラリがいるみたいだが、Cygwinのパッケージにはない。ググると
<a href="http://fd0.x0.to/cygwin/">http://fd0.x0.to/cygwin/</a>というところにあったので、これを使用する
(いいのかな？)</p>

<pre class="cmdline"><code>apt-cyg -m http://fd0.x0.to/cygwin/ install libpipeline-devel
</code></pre>

<h3 id="section-4">インストール</h3>

<p>man-db 2.6.0.2のソースコードをダウンロード。</p>

<p><a href="http://download.savannah.gnu.org/releases/man-db/man-db-2.6.0.2.tar.gz">http://download.savannah.gnu.org/releases/man-db/man-db-2.6.0.2.tar.gz</a><br />
が公式っぽいので、そこからダウンロードしようとしたけど、出来なかったので、<br />
<a href="http://sourceforge.jp/projects/sfnet_buluoos/downloads/0.3/src/man-db-2.6.0.2.tar.gz/">http://sourceforge.jp/projects/sfnet_buluoos/downloads/0.3/src/man-db-2.6.0.2.tar.gz/</a><br />
からダウンロード。</p>

<pre class="cmdline_noimg"><code>$ cd &lt;man-db-2.6.0.2.tar.gzのあるディレクトリ&gt;
$ tar -zxvf man-db-2.6.0.2.tar.gz
$ PKG_CONFIG=/usr/bin/true \
    libpipeline_CFLAGS='' \
    libpipeline_LIBS='-lpipeline' \
    ./configure --prefix=/usr --libexecdir=/usr/lib \
    --docdir=/usr/share/doc/man-db-2.6.0.2 --sysconfdir=/etc \
    --disable-setuid --with-browser=/usr/bin/lynx \
    --with-vgrind=/usr/bin/vgrind --with-grap=/usr/bin/grap
$ make
$ make install
</code></pre>

<p>DBのライブラリ(ヘッダーなど含む)が複数ある場合はgdbm→db5→db4→･･･の順でヘッダファイルを検索するみたい。
特定したい場合はconfigureで<code>--with-db=db4</code>とか指定すればいいみたい(未確認)。</p>

<p>参考ページによると<code>make check</code>としたらきちんとmakeされてるかどうかを確認できるらしいので、不安なら
<code>make install</code>の前に確認する。</p>

<p>一応</p>

<pre class="cmdline"><code>which man
man --version
</code></pre>

<p>としてインストールを確認。</p>

<dl>
  <dt>参考ページ</dt>
  <dd><a href="http://lfsbookja.sourceforge.jp/7.0.ja/chapter06/man-db.html">http://lfsbookja.sourceforge.jp/7.0.ja/chapter06/man-db.html</a></dd>
</dl>

<h3 id="section-5">スクリーンショット</h3>

<p><code>man man</code>したときのスクリーンショット</p>

<p><img src="http://nukino.github.com/images/2012/02/03/img02.png" alt="img02" title="man-db変更後 man manスクリーンショット" /></p>

<p><strong class="emphasis-soft">びゅーてほー</strong></p>

<p>あと、manのマニュアルがman-dbのものに自動的に切り替わってる。素晴らしい。</p>

<p>設定ファイルは<code>/etc/man_db.conf</code>。全く設定せずに上記の画面が出た。やっぱりこうでなくっちゃ。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[cygwin(mintty)のシェル設定ファイル読み込み順]]></title>
    <link href="http://nukino.github.com/blog/2012/02/02/cygwinmintty/"/>
    <updated>2012-02-02T18:53:00+09:00</updated>
    <id>http://nukino.github.com/blog/2012/02/02/cygwinmintty</id>
    <content type="html"><![CDATA[<p>cygwin+minttyで</p>

<pre><code>C:\cygwin\bin\mintty.exe -i /Cygwin-Terminal.ico -
</code></pre>

<p>とした場合と</p>

<pre><code>C:\cygwin\bin\mintty.exe -i /Cygwin-Terminal.ico
</code></pre>

<p>とした場合(“-“(ハイフン)の有無)で挙動が違う(読み込まれる設定ファイルが違う＆起動速度が違う)ので調べてみた。</p>

<!-- more -->

<h2 id="section">設定ファイルの読み込み順</h2>

<p>挙動の違いは<code>man mintty</code>とすれば記述がある。</p>

<blockquote>
  <p>SYNOPSIS<br />
      mintty [OPTION]… [ - | PROGRAM [ARG]… ]<br />
～～～中略～～～<br />
INVOCATION<br />
      If a program name is supplied on the command line, this is executed
      with any additional arguments given.  Otherwise, mintty looks for a
      shell to execute in the SHELL environment variable.  If that is not
      set, it reads the user’s default shell setting from /etc/passwd.  As a
      last resort, it falls back to /bin/sh.  If a single dash is specified
      instead of a program name, the shell is invoked as a login shell.</p>
</blockquote>

<h3 id="section-1">引数に”-“(ハイフン)を指定した場合→ログインシェルを起動する。</h3>

<p>つまり、</p>

<pre><code>/etc/profile
~/.bash_profile
</code></pre>

<p>の順で読み込まれる(ログインシェルをbashにしてる場合？？)</p>

<p>但しデフォルトで生成される設定ファイルは<br />
<code>/etc/profile</code>内で<code>/etc/bash.bashrc</code><br />
<code>~/.bash_profile</code>内で<code>~/.bash_profile</code><br />
が読み込まれる(source)ので、実際には</p>

<pre><code>/etc/profile
/etc/bash.bashrc
~/.bash_profile
~/.bashrc
</code></pre>

<p>の順で読み込まれるということになる。</p>

<p>細かいことを言うと、ホームディレクトリ内の設定ファイルの検索順は
<a href="http://www.atmarkit.co.jp/flinux/rensai/theory09/theory09b.html">http://www.atmarkit.co.jp/flinux/rensai/theory09/theory09b.html</a>によると</p>

<p><code>~/.bash_profile</code>→<code>~/.bash_login</code>→<code>~/.profile</code><br />
(ファイルが見つかった時点でそのファイルが読み込まれる)</p>

<p>となっているらしい。cygwinでは最初に<code>~/.bash_profile</code>が生成されるので(<code>~/.profile</code>も生成されるけ
ど)、上記のような読み込み順となる。</p>

<h3 id="shell">引数に何も指定しない場合→SHELL環境変数が参照される</h3>

<p>Windows側のSHELL環境変数(システム優先)に<code>/bin/bash</code>と指定してある場合、bashが起動するので</p>

<pre><code>/etc/bash.bashrc
~/.bashrc
</code></pre>

<p>の順で読み込まれる。</p>

<p>Windows側のSHELL環境変数を指定しなかった場合は<code>/etc/passwd</code>を参照し、それでもシェルが不明なら
<code>/bin/sh</code>が起動する(Cygwinのログインシェル決定ルーチンもこんな感じぽい)</p>

<h2 id="section-2">ログインシェル起動したときに遅い</h2>

<p>私の環境では引数に”-“を指定した場合、起動が若干遅い。</p>

<p>各読込ファイルの先頭と<code>~/.bashrc</code>のみ末尾にも<code>date %T.%N</code>を追加して、調べてみると</p>

<table class="simpletbl">
  <tbody>
    <tr>
      <td>引数に”-“を指定した場合</td>
      <td>3214ms</td>
    </tr>
    <tr>
      <td>引数に何も指定しない場合</td>
      <td>390ms</td>
    </tr>
  </tbody>
</table>

<p>となってる(コマンド出力のオーバーヘッドがあるため、実際はもう少し速いと思う)<br />
なお環境はWindows7 SP1+Thinkpad T61p[Core 2 duo T9500]。</p>

<h3 id="section-3">何故遅いか</h3>

<p>何故遅いのか調べてみると<code>/etc/profile</code>のシェルスクリプト読込(source)処理が以下のようになってるみたい</p>

<pre><code>/etc/profile
    /etc/profile.d/*.sh読込･･･
        /etc/profile.d/bash_completion.sh
            /etc/bash_completion
                /etc/bash_completion.d/*読込(*.bak、*.swpなどは除外される)
        /etc/profile.d/lang.sh
        /etc/profile.d/openssl.sh
</code></pre>

<p>このうち<code>/etc/profile.d/bash_completion.sh</code>が遅そう<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>なので、cygwin上で</p>

<pre><code>cd /etc/profile.d
mv bash_completion.sh bash_completion.sh.del
</code></pre>

<p>としてみたらかなり速くなった(1062ms)。</p>

<p>ただしこの場合<code>bash_completion</code>は使えない。</p>

<h3 id="bashcompletion"><code>bash_completion</code>を高速化(必要コマンドのみ使用)</h3>

<p><code>bash_completion</code>はあると結構便利な場合もある(<code>man</code>コマンドの時など)ので、高速化できないかを考えてみ
る。</p>

<p><code>/etc/bash_completion.d</code>の中を見てみると、インストールされてないコマンド(<code>dpkg</code>など)の補完ファイル
がある(<code>/etc/bash_completion</code>ではコマンドが実行可能かどうかは調べてないっぽい。まあ実行可能かどうか
調べるのと、読み込むのとどちらが速いかは微妙なところではあるけど。)ので、</p>

<pre><code>mv /etc/bash_completion.d /etc/bash_completion.d.bak
mkdir /etc/bash_completion.d
</code></pre>

<p>として、必要な補完ファイルのみを<code>/etc/bash_completion.d</code>にコピーする(この場合、
<code>/etc/profile.d/bash_completion.sh</code>の名前は変えない)。</p>

<p>/etcディレクトリをいじくりまわしたくない場合は、<code>~/cygwin/bash_completion.d</code>というディレクトリ
を作って、以下を<code>~/.bashrc</code>に書く(この場合、<code>/etc/profile.d/bash_completion.sh</code>の拡張子を適当に変え
ておく。<code>/etc/bash_completion.d</code>の名前は変えなくていい)</p>

<div><script src="https://gist.github.com/1708241.js?file="></script>
<noscript><pre><code>if [[ -z &quot;$BASH_COMPLETION_DIR&quot; &amp;&amp; -f /etc/bash_completion ]]; then
    USER_COMP_DIR=~/cygwin/bash_completion.d
    BASH_COMPLETION_DIR=$USER_COMP_DIR
    BASH_COMPLETION_COMPAT_DIR=$USER_COMP_DIR
    unset USER_COMP_DIR
    . /etc/bash_completion
fi
</code></pre></noscript></div>

<p><code>bash-biiltins</code>,<code>gcc</code>,<code>gdb</code>,<code>make</code>,<code>man</code>,<code>sh</code>コマンド補完ファイルのみをコピーしたところ最初に比べ
ると、かなり速くなった(1810ms)。</p>

<p>ただ、<code>~/.bashrc</code>を書き換える方法だと引数に何も指定しない場合でも<code>bash_completion</code>が有効になってしま
うので、それが嫌な場合は<code>~/.bash_profile</code>に移動しとく。</p>

<h3 id="bashcompletion-1"><code>bash_completion</code>を更に高速化(コマンド以外の補完機能オフ)</h3>

<p><code>/etc/bash_completion</code>の読込自体が結構遅い。そこで、<code>bash_completion</code>のコ
マンド補完のみ使用するため、<code>/etc/bash_completion</code>の192行目～1201行目(<code>bash_completion</code> ver 1.3の場
合。<code># start of section containing completion functions called by other functions</code>～
<code># start of section containing completion functions for external programs</code>の直前まで)をコピーし、
<code>~/cygwin/bash_completion</code>というファイルを作って貼り付けておく</p>

<p>んで、<code>~/.bashrc</code>に以下を追加する。</p>

<div><script src="https://gist.github.com/1708232.js?file="></script>
<noscript><pre><code>[ -n &quot;$USER_COMP_DIR&quot; ] || USER_COMP_DIR=~/cygwin/bash_completion.d
[ -n &quot;$USER_COMP_FILE&quot; ] || USER_COMP_FILE=~/cygwin/bash_completion
if [[ -d $USER_COMP_DIR &amp;&amp; -r $USER_COMP_DIR &amp;&amp; -x $USER_COMP_DIR &amp;&amp; \
    -f $USER_COMP_FILE &amp;&amp; -r $USER_COMP_FILE ]]; then

    # /etc/bash_completionより
    UNAME=$( uname -s )
    # strip OS type and version under Cygwin (e.g. CYGWIN_NT-5.1 =&gt; Cygwin)
    UNAME=${UNAME/CYGWIN_*/Cygwin}

    case ${UNAME} in
        Linux|GNU|GNU/*) USERLAND=GNU ;;
        *) USERLAND=${UNAME} ;;
    esac

    # Turn on extended globbing and programmable completion
    shopt -s extglob progcomp
    #----

    # 関数群を読み込む
    . &quot;$USER_COMP_FILE&quot;
    # USER_COMP_DIRの中身を読み込む
    for i in $(LC_ALL=C command ls &quot;$USER_COMP_DIR&quot;); do
        i=$USER_COMP_DIR/$i
        [[ -f $i &amp;&amp; -r $i ]] &amp;&amp; . &quot;$i&quot;
    done
    unset i

    unset -f have
    unset UNAME USERLAND have
fi
unset USER_COMP_DIR USER_COMP_FILE
</code></pre></noscript></div>

<p>先ほどと同様に<code>bash-biiltins</code>,<code>gcc</code>,<code>gdb</code>,<code>make</code>,<code>man</code>,<code>sh</code>コマンド補完ファイルのみを
<code>~/cygwin/bash_completion.d</code>にコピーしたところ、更に速くなった(1320ms)。</p>

<p>manコマンドの補完が効くのは確認したが、他は確認してない。他の記述も引っ張ってこないときちんと動かな
かったりするかも。</p>

<p>この方法だと、<code>bash_completion</code>のフル機能が使いたい場合は<code>source /etc/bash_completion</code>とコマンド
を打てばいいと思う(またはエイリアスを設定して、それを打つとか)</p>

<h3 id="section-4">まとめ</h3>

<p>引数に”-“を指定した場合、実行時間は以下のようになる。機能を限定していくほど高速化する(当たり前だけ
ど)</p>

<table class="normaltbl">
  <thead>
    <tr>
      <th style="text-align: left">項目</th>
      <th style="text-align: left">時間</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left"><code>bash_completion</code>フル使用(初期状態)</td>
      <td style="text-align: left">3214ms</td>
    </tr>
    <tr>
      <td style="text-align: left">必要コマンドのみ使用</td>
      <td style="text-align: left">1810ms</td>
    </tr>
    <tr>
      <td style="text-align: left">コマンド以外の補完機能オフ</td>
      <td style="text-align: left">1320ms</td>
    </tr>
  </tbody>
  <tbody>
    <tr>
      <td style="text-align: left"><code>bash_completoin</code>オフ</td>
      <td style="text-align: left">1062ms</td>
    </tr>
  </tbody>
</table>

<p><code>bash_completion</code>が遅いのは、補完機能をスクリプトで実現しようとしているためだと思う。
他のシェルに切り替えるとこんな涙ぐましいコトしなくてもスマートで高速なのかも知れない。</p>

<hr />

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p><code>bash_completion</code>はデフォルトでは入っていない。そういえば<code>git-completion</code>を入れてから遅くなったような気がするので、この時に<code>bash_completion</code>がインストールされたのだと思う。<a href="#fnref:1" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cygwinを導入してみた]]></title>
    <link href="http://nukino.github.com/blog/2012/02/02/Cygwin/"/>
    <updated>2012-02-02T14:33:00+09:00</updated>
    <id>http://nukino.github.com/blog/2012/02/02/Cygwin</id>
    <content type="html"><![CDATA[<p>OSを再インストールしたので、以前使っていたlinux系のツール群(rubyやcurl、gitなど)をどうしようかな？
と考えた結果、Cygwinで統合するのはどうかと考えた。</p>

<p>Cygwin自体は以前何度かインストールしたことがあるが、設定が煩雑で結局思い通りにならなかった(己のス
キルが足りてなかっただけとも言う･･･)ので毛嫌いしていたが、最近のはUTF-8にも対応していて結構簡単
そうという記述を<a href="http://d.hatena.ne.jp/takuya_1st/20111121/1321865738">ここ</a>で見かけたので、
丁度いい機会なので挑戦してみた。</p>

<p>導入したOSはWindows 7 64bit(SP1)。Cygwinのバージョン(<code>cygwin1.dll</code>のバージョン)は1.7.9</p>

<!-- more -->

<h2 id="section">準備</h2>

<p>この手のツール使う際には常識かもしれないが、ホスト名やユーザ名に日本語は含んでいない方がいい。<br />
もし含んでいるなら、変更することを推奨する。</p>

<h3 id="section-1">環境変数の設定</h3>

<p>必要ならば、以下の環境変数を設定しておく。</p>

<div><script src="https://gist.github.com/1710407.js?file="></script>
<noscript><pre><code>rem CygwinシンボリックリンクをWindowsショートカットにする場合コメントアウト
rem setx CYGWIN winsymlinks
rem makeの動作モード
setx MAKE_MODE unix</code></pre></noscript></div>

<p>なお、Windows Vista以降では<code>setx</code>コマンドでシステムのプロパティにある環境変数を追加、編集、削除でき
るので、このファイルをダウンロードして実行するだけでおｋ(コマンドプロンプトで打ってもいいけど)。</p>

<p>Windows XPは標準で入ってないが、Windows XP CD/DVDの<code>\Support\SUPTOOLS.MSI</code>をインストールすれば導入で
きる。コマンドの詳細は<a href="http://www.atmarkit.co.jp/fwin2k/win2ktips/1003setx/setx.html">http://www.atmarkit.co.jp/fwin2k/win2ktips/1003setx/setx.html</a>参照。</p>

<p>このコマンドかなり便利だと思うけど、他のページではあまり触れられてないね。</p>

<p><code>MAKE_MODE</code>環境変数はmakeするときに<code>cmd.exe</code>を使用するか<code>/bin/sh</code>を参照するかを指定する。</p>

<p><code>SH_OPTS</code>環境変数に<code>igncr</code>を指定すると、シェルスクリプトの改行コードがCR+LFでも動く。<code>~/.bashrc</code>など
に指定した場合、関連付けなどでCygwin外から実行した際には<code>~/.bashrc</code>は読み込まれないので、
エラーになる。環境変数に指定しておくと、必ず有効になる。<br />
テキストファイルの改行コードをLFに統一してるような人には勿論不要。</p>

<p><code>CYGWIN</code>環境変数に<code>winsymlinks</code>を指定すると、Cygwinで作成するシンボリックリンクをショートカットとし
て利用することが可能(Cygwin 1.5系と同様らしい)。</p>

<p>ただし<a href="http://cygwin.com/cygwin-ug-net/using-cygwinenv.html">The CYGWIN environment variable</a>にある
ようにこれを指定すると速度が遅くなるらしい。個人的にはショートカットではなくWindowsのジャンクション/
シンボリックリンクを使って欲しいので、設定していない</p>

<p>なお他のページで<code>ntsec</code>や<code>smbntsec</code>などを設定するような記述があるが、Cygwin 1.7系では既に廃止されて
いるので、旧版(Cygwin 1.5系??)と共存させるなどの目的がないなら設定する必要はない
(設定しても不都合はなさそうだが。)</p>

<p>また、SHELLやHOME環境変数の設定も特にこだわりがないなら不要。セットアップ時に<code>/etc/passwd</code>が作られ、
その中でデフォルトのSHELL(/bin/bash)、HOME(/home/ユーザー名)が設定されている為。</p>

<dl>
  <dt>その他参考ページ</dt>
  <dd><a href="http://www.oki-osk.jp/esc/cyg/cygwin-23.html">Cygwin 1.7.5</a></dd>
  <dd><a href="http://news.mynavi.jp/special/2002/cygwin/004.html">Windowsユーザーへ贈るUnixへの架け橋</a></dd>
</dl>

<h2 id="cygwin">Cygwinのインストール</h2>

<p><a href="http://www.cygwin.com/">Cygwin本家</a>から<code>setup.exe</code>をダウンロードして実行。試したsetup.exeのバージョ
ンは2.763、cygwin1.dllのバージョンは1.7.9(2011-03-29)。</p>

<p>セットアップ自体は簡単。</p>

<ol>
  <li>“Install from Internet”を選択</li>
  <li>Cygwinのインストールディレクトリは<code>C:\Cygwin</code>など</li>
  <li>Local Package Directoryは<code>C:\Cygwin\package</code>など</li>
  <li>Download siteは”ftp://ftp.jaist.ac.jp”を選択(近くのサーバーを選択すればいい)</li>
  <li>インストールするパッケージは必要なら後でインストールすればいいので、適当でいいが、wgetはインストール
しておくこと(後で<code>apt-cyg</code>を使うときに必要。)。bzip2とgawkも必要だが、恐らくデフォルトでインストール
する設定になっているはず。</li>
</ol>

<p>あとは放っておけばいい。昔インストールしたときはISDNだったなー。2～3時間くらいセットアップに時間かかっ
たような気がするけど、今は光だから10分程度で終わる。</p>

<h2 id="section-2">初期設定</h2>

<h3 id="home">シェル環境設定ファイルとHOME環境変数について</h3>

<p>セットアップが出来たら、Cygwinを起動する。</p>

<p>ホームディレクトリはデフォルトでは<code>/home/Windowsユーザ名</code>(<code>C:\Cygwin\home\Windowsユーザ名</code>)で、ディ
レクトリがない場合は自動的に作成され、シェル環境設定ファイルが作成される(Cygwin 1.7.9の場合、
<code>.bash_profile</code>,<code>.bashrc</code>,<code>.inputrc</code>,<code>.profile</code>の4つのファイル)</p>

<p>しかし、既にHOME環境変数を設定していて、既にそのディレクトリが存在する場合、シェル環境設定ファイル
が作られないという問題がある。</p>

<p>デフォルトのシェル環境設定ファイルは<code>/etc/skell</code>にあるので、これをホームディレクトリにコピーする。
(Cygwinで以下のコマンドを実行。上書きされると困るかもしれないので’-i’オプション付けてある)</p>

<pre class="cmdline"><code>cp -i /etc/skel/.* ~/
</code></pre>

<p>また発生条件がイマイチ定かではないが、独自のHOME環境変数(<code>e:\user</code>など)を設定しているとCygwin上の
<code>cd ~</code>が、<code>cd /home/$USER</code>と解釈される場合がある。</p>

<p>そのため<code>~/.bashrc</code>に以下を追加しておく。</p>

<pre><code>export HOME=/cygdrive/e/user
</code></pre>

<p>これを設定してからはそういう不思議な症状にならなくなったような気がする。</p>

<h3 id="mintty">minttyの設定(言語設定)</h3>

<p>現在(Cygwin 1.7.9)のデフォルトのターミナルエミュレータはminttyといわれるPuttyベースのターミナルであ
る。特にこだわりがないなら、これを使うことを推奨する。</p>

<p>何はともあれ言語(ロケール)設定を行う。</p>

<p><img src="http://nukino.github.com/images/2012/02/01/img00.png" alt="img00" title="LANG設定" /></p>

<p>上記のように設定して、Cygwin(mintty)を再起動し、<code>echo $LANG</code>とコマンドを打って以下のようになればOK</p>

<p><img src="http://nukino.github.com/images/2012/02/01/img01.png" alt="img01" title="LANG設定確認" /></p>

<p>詳しくは<code>man mintty</code>とすれば記述があるが、ロケールを設定することで、Cygwin上のLANG環境変数を上書きし
てくれる。恐らくCygwin上のシェルが起動する前に設定してくれると思うので、シェルの挙動なども変更される
筈(~/.bashrcで設定するのとは違う)。</p>

<p>但しLANG環境変数を設定することによって<code>date</code>コマンドなどの出力形式が変わる。これにより動作しない
スクリプトなどがあるかもしれない。</p>

<p>より安全に行くなら、mintty上のロケール設定をデフォルトに戻し、コマンドプロンプトで</p>

<pre class="cmdline"><code>setx LC_CTYPE ja_JP.UTF-8
</code></pre>

<p>として、文字列処理のみを日本語対応にするという手もあるが、私はグローバルな環境変数は極力いじりたくな
いし、メッセージも日本語化されないし、ということでロケールを考慮してないスクリプトなど無視する（ぉぃ。</p>

<p>あと、minttyのフォントや透過設定(Transparency)などを設定すれば、見た目がかっちょよくなる。</p>

<p><img src="http://nukino.github.com/images/2012/02/01/img02.png" alt="img02" title="スクリーンショット" /></p>

<h2 id="bin">ユーザbinディレクトリの作成とパス設定</h2>

<p>ユーザーbinディレクトリを作成してパスを設定しておく。</p>

<p>Cygwinのコマンドラインで</p>

<pre class="cmdline"><code>mkdir ~/cygwin/bin
</code></pre>

<p>として、<code>~/.bashrc</code>に以下を追加</p>

<div><script src="https://gist.github.com/1714785.js?file="></script>
<noscript><pre><code>if [ -d &quot;${HOME}/cygwin/bin&quot; ] ; then
  PATH=&quot;${HOME}/cygwin/bin:${PATH}&quot;
fi
</code></pre></noscript></div>

<p>普通は<code>~/bin</code>でいいんだが、ウチはHOME環境変数設定して、データファイルは全てそこにぶち込んでいるた
め、Cygwinとそれ以外で区別したいので<code>~/cygwin</code>にCygwin系のファイルを置いてる。まあHOMEのルートが
結構カオスになってきたけど。</p>

<p>んで、設定を有効化(Cygwin再起動でもいいけど)</p>

<pre class="cmdline"><code>source ~/.bashrc
</code></pre>

<h2 id="apt-cyg">apt-cyg導入</h2>

<p>Cygwinでは追加のパッケージをインストールするときにはsetup.exeを使用しなくてはいけないが、apt-cygをイ
ンストールすることで、コマンドライン上でパッケージをインストールできる。まあlinuxのaptみたいなもの。</p>

<p>かなり便利。</p>

<pre class="cmdline"><code>wget http://apt-cyg.googlecode.com/svn/trunk/apt-cyg
mv apt-cyg ~/cygwin/bin
chmod +x ~/cygwin/bin/apt-cyg
</code></pre>

<h3 id="section-3">使い方</h3>

<dl>
  <dt>検索</dt>
  <dd>apt-cyg find パッケージ名</dd>
  <dt>インストール</dt>
  <dd>apt-cyg install パッケージ名</dd>
  <dt>アンインストール</dt>
  <dd>apt-cyg remove パッケージ名</dd>
  <dt>指定したパッケージの記述を取得(バージョン確認したい時など)</dt>
  <dd>apt-cyg describe パッケージ名</dd>
</dl>

<p>デフォルトのミラーサイトは<code>ftp://mirror.mcs.anl.gov/pub/cygwin</code>でちと遠くて遅いので、
<code>~/.bashrc</code>に以下を追加。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>~/.bashrc  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nb">alias </span>apt-cyg<span class="o">=</span><span class="s1">&#39;apt-cyg -m ftp://ftp.jaist.ac.jp/pub/cygwin/ -c /package&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><code>/etc/setup/last-cache</code>や<code>/etc/setup/last-mirror</code>があればそれを読み込むみたいだから、エイリアスにし
なくてもいいような気もするけど。</p>

<h3 id="section-4">ちょっと修正</h3>

<p>このスクリプトは大文字・小文字を区別するみたい。検索するときは大文字・小文字を区別しない方が嬉しいの
で、apt-cygを以下のように修正する</p>

<div><script src="https://gist.github.com/1718936.js?file="></script>
<noscript><pre><code>--- apt-cyg	2010-04-28 03:55:43.000000000 +0900
+++ ~/cygwin/bin/apt-cyg	2012-01-24 07:24:17.433141300 +0900
@@ -242,11 +242,11 @@ case &quot;$command&quot; in
     do
       echo &quot;&quot;
       echo Searching for installed packages matching $pkg:
-      awk '/[^ ]+ [^ ]+ 0/ {if ($1 ~ query) print $1}' query=&quot;$pkg&quot; /etc/setup/installed.db
+      awk -v IGNORECASE=1 '/[^ ]+ [^ ]+ 0/ {if ($1 ~ query) print $1}' query=&quot;$pkg&quot; /etc/setup/installed.db
       echo &quot;&quot;
       echo Searching for installable packages matching $pkg:
-      cat setup.ini | awk -v query=&quot;$pkg&quot; \
+      cat setup.ini | awk -v query=&quot;$pkg&quot; -v IGNORECASE=1 \
         'BEGIN{RS=&quot;\n\n@ &quot;; FS=&quot;\n&quot;; ORS=&quot;\n&quot;} {if ($1 ~ query) {print $1}}'
     done
 
   ;;</code></pre></noscript></div>

<p>patch,curlコマンドがあるなら(インストールは<code>apt-cyg install patch curl</code>)、
以下のようにすればパッチを当てられる</p>

<pre class="cmdline"><code>cd ~/cygwin/bin
curl https://raw.github.com/gist/1718936 &gt; apt-cyg.diff
patch &lt; apt-cyg.diff
</code></pre>

<p>動くのを確認したら<code>apt-cyg.diff</code>と<code>apt-cyg.orig</code>は削除していい。</p>

<h2 id="windowsgvim">WindowsのgVimで編集するシェルスクリプト</h2>

<p>Cygwin上でファイル編集するときにWindows上のgVimを利用するようにしてみた。</p>

<p>新規ファイル指定時にパーミッションが000になるみたいなので、umask設定に従って設定し直している(要bcコマンド)</p>

<div><script src="https://gist.github.com/1720551.js?file="></script>
<noscript><pre><code>#!/bin/bash
if [[ $# = 1 &amp;&amp; ! -f $1 ]]; then
    #改行コードunix 同期実行
    gvim -c &quot;setl ff=unix&quot; `cygpath -w $1`
    #ファイルが存在するならパーミッション設定
    if [ -f $1 ]; then
        #umaskの結果を参照する場合(要bcコマンド)
        um=`umask`
        perm=`echo &quot;ibase=8; obase=8; 666 - $um&quot; | bc`
        chmod $perm &quot;$1&quot;
        #bcコマンドを使わない場合(固定)
        #chmod 644 &quot;$1&quot;
    fi
else
    #既存ファイルまたは複数ファイル指定の場合、非同期とする
    gvim `cygpath -w $*  | awk '{printf $0&quot; &quot;}'` &amp;
fi
#gvim -c &quot;setl ff=unix fenc=utf-8&quot; `cygpath -w $*` &amp;</code></pre></noscript></div>

<p>導入はこんな感じ</p>

<pre class="cmdline"><code>apt-cyg install bc
cd ~/cygwin/bin
curl https://raw.github.com/gist/1720551 &gt; wvi
chmod +x wvi
</code></pre>

<p>gVimにパス通ってること前提なので、パスを通したくない場合はgVimの場所を書いておく</p>

<p>使い方は</p>

<pre class="cmdline"><code>wvi ~/.bashrc
</code></pre>

<p>とかって編集するファイルを指定する(複数指定可なんだけど、複数指定してgVim終了時にCygwinターミナルに
ゴミが混入する)</p>

<h2 id="man">日本語man導入</h2>

<p>日本語manがあるとコマンドの雰囲気が分かりやすいので、導入してみる。<br />
以下のコマンドを実行。</p>

<p>但し、ダウンロードするファイル(以下の例だと20120115)は最新のものを
<a href="http://linuxjm.sourceforge.jp/download.html">http://linuxjm.sourceforge.jp/download.html</a>で確認し、ダウンロードする。</p>

<pre class="cmdline"><code>apt-cyg install perl lv make
wget http://linuxjm.sourceforge.jp/man-pages-ja-20120115.tar.gz
tar -zxvf man-pages-ja*
cd man-pages-ja*
</code></pre>

<p>続いて以下のコマンド</p>

<pre class="cmdline"><code>groups `whoami`
make config
</code></pre>

<p>多分こんな感じで設定していけばいいと思う。</p>

<p><img src="http://nukino.github.com/images/2012/02/01/img04.png" alt="img04" title="make config 1" /></p>

<p><img src="http://nukino.github.com/images/2012/02/01/img05.png" alt="img05" title="make config 2" /></p>

<p>続いてインストール</p>

<pre class="cmdline"><code>make install
</code></pre>

<p><code>man.conf</code>の<code>JNROFF</code>の行(99行目？)を以下のように変更</p>

<pre><code>JNROFF		/usr/bin/groff -DeucJP -Tutf8 -mandoc
</code></pre>

<p>一応これで導入完了。試しに<code>man man</code>してみると、以下のようになる。</p>

<p><img src="http://nukino.github.com/images/2012/02/01/img06.png" alt="img06" title="man manスクリーンショット" /></p>

<p>インデントがガタガタだが、とりあえず表示は出来た。これを直すのはまた後で考える。<br />
(02/04追記。修正してみた。詳しくは<a href="http://nukino.github.com/blog/2012/02/04/Cygwinman/">こちらの記事</a>を参照)</p>

<p>あと日本語manは情報が古い場合がある為、オリジナルmanを参照する必要があるかもしれないので、
<code>~/.bashrc</code>に以下を追加</p>

<div><script src="https://gist.github.com/1722000.js?file="></script>
<noscript><pre><code>#英語のmanページを表示
alias eman='LANG=en_US LC_ALL=en_US /usr/bin/man' 
</code></pre></noscript></div>

<p>これでman→存在すれば日本語man、eman→オリジナルmanとなる。</p>

<p>jman→日本語man、man→オリジナルmanというエイリアス設定よりこちらの方が私は好き。</p>

<h2 id="tips">ちょっとしたTips</h2>

<h3 id="ls">ls時の色を変える</h3>

<p>デフォルトの<code>ls --color=auto</code>の設定が気に入らない場合、それを変更できる。</p>

<pre class="cmdline"><code>cp /etc/DIR_COLORS ~/cygwin/.dircolors
</code></pre>

<p>として、<code>~/cygwin/.dircolors</code>を編集。あと<code>~/.bashrc</code>に以下を追加</p>

<div><script src="https://gist.github.com/1722119.js?file="></script>
<noscript><pre><code>if [ -x /usr/bin/dircolors ]; then
    test -r ~/cygwin/.dircolors &amp;&amp; eval &quot;$(dircolors -b ~/cygwin/.dircolors)&quot; || eval &quot;$(dircolors -b)&quot;
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'
    alias ls='ls -hF --color=auto'                 # classify files in colour
    alias dir='ls --color=auto --format=vertical'
    alias vdir='ls --color=auto --format=long'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi
</code></pre></noscript></div>

<p>基本的にUbuntuの<code>~/.bashrc</code>から引っ張ってきたので、grepとかの色分け設定も入ってる。</p>

<p>ディレクトリ→緑、実行可能ファイル→マゼンダ、アーカイブファイル→黄色の設定がWindowsファイラーの設
定で見慣れてるので、そのように設定。他の項目の色と重なる場合は適当に重複しないように修正した。</p>

<p><img src="http://nukino.github.com/images/2012/02/01/img07.png" alt="img07" title="ls スクリーンショット" /></p>

<h3 id="bashvi">bashをviモードに</h3>

<p><code>~/.bashrc</code>に</p>

<pre><code>set -o vi
</code></pre>

<p>を追加することで、bashの編集モードをviモードにすることが出来る。</p>

<p>ddやDで行削除出来るのが便利。wやbで単語間移動できるのも便利。</p>

<p>だが挿入モードかノーマルモードかが分からん。カーソル変えるとかプロンプト変えるとか何とかならないか調
べてみたが、よく分からない。</p>

<h3 id="mintty-1">mintty起動時の初期ディレクトリを指定するには</h3>

<p>ファイラーとかの連携で、ホームディレクトリ以外のフォルダを指定してminttyが起動できると嬉しい。</p>

<p>コマンドラインパラメータに</p>

<pre><code>C:\cygwin\bin\mintty.exe -i /Cygwin-Terminal.ico
</code></pre>

<p>とかって指定し(デスクトップとかに置かれるショートカットのリンク先から末尾の”-“を取る)、作業フォル
ダー(ファイラーやランチャーによってはカレントディレクトリとか初期フォルダとか名称が違うと思う)に
mintty起動時の初期ディレクトリを指定すればOK。</p>

<p>ショートカット作成で例を取ると</p>

<p><img src="http://nukino.github.com/images/2012/02/01/img03.png" alt="img03" title="ショートカット作成" width="350" /></p>

<p>ただし、引数に”-“を指定するのと、指定しないのは微妙に挙動が異なる。詳しくは<a href="http://nukino.github.com/blog/2012/02/02/cygwinmintty/">別稿</a>に譲る</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ThinkpadT61pをWindowsXPとWindows7デュアルブートにする]]></title>
    <link href="http://nukino.github.com/blog/2012/01/24/ThinkpadT61pWindowsXP/"/>
    <updated>2012-01-24T17:14:00+09:00</updated>
    <id>http://nukino.github.com/blog/2012/01/24/ThinkpadT61pWindowsXP</id>
    <content type="html"><![CDATA[<p>以前から作業用に使用しているThinkpad T61p+Windows XPの調子が悪い＆容量が足りなくなってきたため、新し
いHDD(HN-M101MBB Samsung 1TB)を購入し、また「もうそろそろWindows 7にしないとなー」と思ってたので、
OSもついでに新しくしようと計画してみた。</p>

<p>でもWindows XPが必要な場面もまだある筈！ということで、Windows XPとのデュアルブートに挑戦した。
(以前にもやったことあるんですが)</p>

<p>パーティションの切り方に拘ったせいもあって、インストールはかなり手間取った。</p>

<p>自分への備忘録＆同じようなことを考える誰かのために手順などを残しておく。</p>

<p>PCの製品IDは「6459-EAJ」、BIOSバージョンは1.08。</p>

<!-- more -->

<h2 id="section">構想</h2>

<p>1.ブートマネージャはMBM(Multi Boot Manager)を使用し、Windows 7使用時はWindows XP領域をマスクして見えなくし、
Windows XP使用時はWindows 7領域をマスクして見えなくする。</p>

<p>2.Windows 7をメインに使用する予定なので、Windows 7を最初の領域にしたい(HDDのアクセススピードが速いた
め)</p>

<p>3.Windows XPはプリインストールされてるライセンスを使用し、パーティションを後で調整する</p>

<p>4.データ領域はXP/7両方で使用する。またドライブレターはE:\でなければならない
(ツールなどの設定がそれを前提としてあるため)</p>

<p>5.MBMのグラフィカルメニューを使用したい。</p>

<p>まとめると以下のようなパーティション構成。</p>

<p><img src="http://nukino.github.com/images/2012/01/24/img00.png" alt="img00" width="800" /></p>

<h2 id="section-1">準備</h2>

<h3 id="section1-1">1-1 リカバリーディスクの作成(既に作ってあるなら不要)</h3>

<p>ウチのThinkpad T61pはWindows XPプリインストール版なので、リカバリーディスクを作成する。</p>

<p>スタートメニュー→ThinkVantage→Create Recovery Media</p>

<p>から。そんなメニュー項目ねーよ。という人は多分作成済みなんでしょう。頑張って探して下さい。</p>

<p>手順はそれほど難しくはないが、不安な人は<a href="http://www-06.ibm.com/jp/domino04/pc/support/Sylphd06.nsf/jtechinfo/SYJ0-00FD13E">Lenovo リカバリーメディアを作成する方法</a>
を参照。</p>

<p>私はDVD-Rメディアのみを使用した(3枚必要)が、最初の始動ディスクはCD-Rにしたほうが容量的に無駄がないよ
うな気がする。</p>

<h3 id="section1-2">1-2 GParted Live CDを作成する</h3>

<p>パーティション操作ソフトは一番有名(だと私が思ってる)GPartedを使用する。</p>

<p>ダウンロードは
<a href="http://gparted.sourceforge.net/download.php">http://gparted.sourceforge.net/download.php</a>
から。</p>

<p>イメージファイルの書き込みは別PCからDeepBurnerを使用した。T61pでやる場合は「Multimedia Center for
Think Offerings」を使用して、コピー→ディスクをイメージに書き込む で出来ると思う(やったことないけど)</p>

<p>不安な人は作成したCD-Rを入れて再起動した際にGPartedが起動するかどうかを確認する。</p>

<p>起動しない場合はまずBIOSを起動(起動画面でF1)しStartup→Bootで、内蔵CD/DVDが内蔵HDDより起動の優先順位
が高いかどうかを確認する。</p>

<h3 id="section1-3">1-3 Paragon Backup &amp; RecoveryのインストールとリカバリCD作成</h3>

<p>後でパーティションを操作したり、Windows 7をインストールしたりすると、Windows XPが起動しなくなる場合
があるため、それを復旧できるバックアップ＆リカバリソフトをインストールする。</p>

<p>色々調べたが、パーティション構成が異なってると上手く動かないソフトが多いが、「Paragon Backup
&amp; Recovery」はパーティション構成が異なっていても思ったように復旧してくれる。しかも個人の非商用利用の
場合は無料(ユーザー登録でメアド入力しないといけないけど)</p>

<p>ダウンロードは<a href="http://www.forest.impress.co.jp/lib/sys/file/syncbackup/paragonbakup.html">こちら</a>
から</p>

<p>インストールできたら起動して「Tools→Burn Recovery Media」でリカバリー用CD-Rを作成しておく</p>

<h3 id="section1-4">1-4 MBM起動ディスクを作成</h3>

<p>USBメモリを1個使って、MBM起動ディスクを作成。後で気付いたが
<a href="http://elm-chan.org/fsw/mbm/mbm.html">http://elm-chan.org/fsw/mbm/mbm.html</a>に
<a href="http://elm-chan.org/fsw/mbm/mbm039.iso.gz">ブータブルCDイメージ</a>があるので、これをCDに焼いた方が簡
単かもしれない。</p>

<ol>
  <li>
    <p><a href="http://memorva.jp/internet/pc/dos_usb.php">USB起動ディスクの作り方</a><br />
の「Free DOS」を使う方法で、USBメモリを作成。</p>
  </li>
  <li>
    <p><a href="http://www.vector.co.jp/soft/dos/util/se035596.html">MBM 0.39</a>をダウンロード＆解凍し、
<code>BIN</code>フォルダの中身を作成したUSBメモリにコピー(<code>MBM.144</code>は不要だと思うけど)</p>
  </li>
</ol>

<p>FDを使う場合はMBM039.zipの<code>BIN\MBM.144</code>を<a href="http://sourceforge.jp/projects/freshmeat_rawwriteforwindows/">rawwrite</a>を使って書き込めば良いと思う</p>

<h3 id="section-2">1-5 環境移行用</h3>

<p>環境移行用のデータをUSBメモリにぶち込む。私の場合は</p>

<ol>
  <li>FireFox(FEBE使用)</li>
  <li>Visual Stdio(設定のエクスポート)</li>
  <li>Puttyのレジストリ設定(<a href="http://blog.cles.jp/item/2300">Puttyの設定のエクスポートする</a>参照)</li>
  <li>Access Connectionプロファイル(プロファイルタブの「エクスポート」ボタン)</li>
</ol>

<p>ぐらい。他のデータは<a href="http://groovy.ne.jp/products/hddset/ud_500sa.html">Groovy UD-500SA</a>を使って直接
旧HDD→新HDDにコピーする。</p>

<p>後で気付いたが、「ThinkVantage→System Update」すると「System Migration Assistant」というツールが入
るので、これを使うとOSの設定と有名どころのアプリの設定を移行してくれるみたい(対応アプリはヘルプを参
照)。私はこの手のソフトはあまり好きではない(自分でやった方が安心)が、楽したい人には便利かも。</p>

<p>最後にWindows7用の</p>

<ul>
  <li>
    <p><a href="http://www-06.ibm.com/jp/domino05/pc/download/download.nsf/jtechinfo/MIGR-73695">System Update</a></p>
  </li>
  <li>
    <p><a href="http://www-06.ibm.com/jp/domino05/pc/download/download.nsf/jtechinfo/MIGR-73682">Access Connections</a></p>
  </li>
</ul>

<p>をダウンロードしてUSBメモリに入れておく</p>

<h2 id="section-3">実作業</h2>

<h3 id="hdd">2-1 HDDの交換</h3>

<p>HDDの交換はACアダプタとバッテリ外した上で、CD/DVD横のネジ一本外して、フィルムを引き出せばOK。</p>

<p>とこれだけでは何なので参照URLを</p>

<ul>
  <li><a href="http://diaryonweekend.seesaa.net/article/205316233.html">ThinkPad T61(7658-A14)：ハードディスク交換: 週末日記ぶろぐ</a></li>
</ul>

<p>公式じゃなきゃやだ！と言う人は下記。</p>

<ul>
  <li><a href="http://www.google.co.jp/url?sa=t&amp;rct=j&amp;q=thinkpad%20t61p%20hdd%20%E5%8F%96%E3%82%8A%E5%A4%96%E3%81%97&amp;source=web&amp;cd=6&amp;sqi=2&amp;ved=0CEsQFjAF&amp;url=http%3A%2F%2Fwww-06.ibm.com%2Fjp%2Fdomino04%2Fpc%2Fsupport%2FSylphd01.nsf%2Fjtechinfo%2FFILE-PUB200802%2F%24FILE%2F42X3545_03J.pdf&amp;ei=-EIfT7TAAe_3mAXnytCqDg&amp;usg=AFQjCNF1I0R9Dijp-e2e-ATGTMD5ZNyQLA&amp;cad=rja">ThinkPad T61 および T61p (14.1 インチ) 保守マニュアル</a>
←pdfです<br />
の81ページ参照</li>
</ul>

<h3 id="section-4">2-2 リカバリーディスクで工場出荷状態に戻す</h3>

<ol>
  <li>
    <p><a href="#section1-1">1-1 リカバリーディスクの作成</a>で作成した起動ディスクをCD/DVDドライブに入れて起動。</p>
  </li>
  <li>
    <p>めっちゃ遅いがしばらく待ってると画面が表示されるので「システムの復元」をクリック</p>
  </li>
  <li>
    <p>ハードディスクを工場出荷状態に戻す チェックボックスにチェック</p>
  </li>
</ol>

<p>4.「ステップ： 以下のオプションから実行したいことを選択してください：」では「どのファイルも保存しな
い」を選択。</p>

<ol>
  <li>
    <p>後は適当に「OK」とか押しておけばいい。一旦再起動して、リカバリー作業が始まるので、
画面の指示に従ってディスクを入れ替える。</p>
  </li>
  <li>
    <p>リカバリーが終わったら「作業を完了させるには再起動が必要です」みたいなメッセージが表示されるの
で、「OK」だったか「はい」だったかを押せば再起動する(自動で再起動してくれよ。と思わないではない)</p>
  </li>
  <li>
    <p>Windows XPが起動して、アプリ・ドライバのインストールが自動で始まる。結構時間がかかるので放置。</p>
  </li>
  <li>
    <p>「ようこそ」画面？が表示されてたら画面の指示に従ってユーザー名とかパスワードとか入れる。</p>
  </li>
  <li>
    <p>Windowsが起動したら、あとは画面の指示に従って指紋登録とかする。</p>
  </li>
</ol>

<h3 id="section-5">2-3 システムを最新の状態にする</h3>

<p>この手順をとばして<a href="#section2-4">2-4 システムのバックアップを取る</a>に進んでも良い。</p>

<p>リカバリーディスクと同じ内容のバックアップディスク作るのが何か勿体ないような気がしたので、初期設定を
先にしてみた。</p>

<ol>
  <li>
    <p>Access Connectionsのプロファイルを復元</p>
  </li>
  <li>
    <p>ウイルス(セキュリティ)対策ソフトをインストール</p>
  </li>
  <li>
    <p>「System Update」を使ってアプリやドライバなどを最新の状態にする</p>
  </li>
  <li>
    <p>Windows Updateを使ってService Pack 3をあて、Windowsの重要な更新もあてる</p>
  </li>
</ol>

<h3 id="section2-4">2-4 システムのバックアップを取る</h3>

<p>たぶん「5.」～だけやればOKだと思うが、試行錯誤してうまくいった手順を書いておく</p>

<ol>
  <li>
    <p>「Rescue and Recovery」を起動し、「拡張Rescue and Recovery」をクリック。「ハードディスクのバック
アップ」で「バックアップをCD/DVDに作成」を選択する。(この作業は厳密に言えば不要。「Paragon Backup
&amp; Recovery」でバックアップ＆リカバリー失敗すると、リカバリーディスクからやり直しになるのがダメー
ジでかい) 私は起動ディスクも作ってしまったが、リカバリーディスクの起動ディスクと同じっぽいので不
要だとおもう。</p>
  </li>
  <li>
    <p>念のためデフラグ。プリインストールされてる「Diskeeper Lite」は容量がでかすぎて動かないと言われる
のでアンインストールする。</p>
  </li>
  <li>
    <p><a href="#section1-2">1-2 GParted Live CDを作成する</a>で作成した「GParted Live CD」をCD/DVD
ドライブに入れて再起動。Windows XP領域のサイズを小さくする(私は120GB位にしてみた)。Align toは
「Cylinder」にしておいた。</p>
  </li>
  <li>
    <p>Windows XPが起動するかどうか確認。起動しない場合「1.」で作ったバックアップディスクを使ってレスト
ア</p>
  </li>
  <li>
    <p><a href="#section1-3">1-3 Paragon Backup &amp; RecoveryのインストールとリカバリCD作成</a>で作ったリカバリーメ
ディアをCD/DVDに入れて再起動。この時BIOSに入って「Config→Serial ATA」の設定を”Compatible”に変
更(こうしておかないとバックアップ作業の最初の方で応答がなくなるような気がする)</p>
  </li>
  <li>
    <p>「Paragon Backup &amp; Recovery」が起動したら、Windows XP領域をバックアップする(Backuo Wizard使うと便
利)。この時MBRをバックアップ対象に入れないようにする</p>
  </li>
  <li>
    <p>再起動してBIOSのSerial ATAの設定を元に戻しておく</p>
  </li>
</ol>

<hr />

<p>「Paragon Backup &amp; Recovery」をWindows上でバックアップしない方がいいと思う。</p>

<p>Windows上でバックアップしたディスクを「Paragon Backup &amp; Recovery」リカバリーメディアを使ってレストア
しようとしたら動かなかったので(圧縮方式とか変えてバックアップしたからそれが原因かもしれんケド)</p>

<p>なんとなくWindows上でバックアップしたものはWindows上でレストアしないと駄目なような気がするので、後で
インストールするWindows 7に当該ソフトをインストールして、レストアしたら動くような気がするけど</p>

<h3 id="section-6">2-5 パーティションの編集</h3>

<p>チャレンジャーな人はWindows XP領域を一旦更に小さく(40GBとか)してから移動した後、サイズを増やすと
処理時間が少なくなる</p>

<ol>
  <li>
    <p><a href="#section1-2">1-2 GParted Live CDを作成する</a>で作成した「GParted Live CD」をCD/DVDドライブに入れて
起動。Keymapは別に”Don’t toutch key map”(だったかな？)でいい。後は「15(Japanese)→0」と入力</p>
  </li>
  <li>
    <p>Windows XP領域を後ろの方(500GB程)に移動する。まだサイズを小さくしていないならサイズも小さくする。
関係あるかどうか知らないけど「Cylinder」境界に合わせておいた。警告が出るけど無視  </p>
  </li>
  <li>
    <p>Windows 7領域を作成。フォーマットは”ntfs”、Cylinder境界に合わせる。先頭シリンダはMBMメニューで使
用する予定なので、8MBほど開始位置をずらす。後ろのオフセットも4MB程取っておいた<br />
<img src="http://nukino.github.com/images/2012/01/24/img01.jpeg" alt="img01" width="400" /></p>
  </li>
  <li>
    <p>データ領域を作成。フォーマットは”ntfs”、Cylinder境界に合わせる。前方、後方の空き領域を適当に入れ
とく<br />
<img src="http://nukino.github.com/images/2012/01/24/img03.jpeg" alt="img03" width="400" /></p>
  </li>
  <li>
    <p>結果としてはこんな感じ。別に隙間あけなくても良いのかも知れないが、シリンダが重複してMBMが動かない
という事態になったら嫌なので(画像は現在の状態。フラグの状態などが違っていても気にしちゃ駄目)。<br />
<img src="http://nukino.github.com/images/2012/01/24/img04.jpeg" alt="img04" width="500" /></p>
  </li>
  <li>
    <p>「Apply」ボタンを押す。1時間以上かかる。</p>
  </li>
</ol>

<h3 id="section2-6">2-6 MBMインストール</h3>

<p><a href="#section1-4">1-4 MBM起動ディスクを作成</a>で作成したMBM起動メディア(USB/CD/FD)を挿入して再起動。</p>

<p>USBメモリの場合はUSBメモリ自体がハードディスクデバイス0として認識されてるので、コマンドラインで</p>

<pre class="cmdline"><code>mbm install 1
</code></pre>

<p>と入力しないといけないと思う(FD/CDの場合は<code>mbm install</code>で良い筈)。不安なら</p>

<pre class="cmdline"><code>mbm edit
</code></pre>

<p>として、デバイスを確認してからインストールすれば良い</p>

<h3 id="windows-7">2-7 Windows 7インストール</h3>

<ol>
  <li>
    <p>MBM起動メディアを抜いて、再起動。MBMが起動するかどうかを確認する</p>
  </li>
  <li>
    <p>WindowsXP領域以外をマスク(M/F7)した上で、Windows XPが起動するかどうかを確認してみる。
起動しなかったとしても、とりあえず放置(Windows 7インストールで起動しなくなる可能性大のため)</p>
  </li>
  <li>
    <p>再起動して、MBMでWindows 7領域以外をマスク。</p>
  </li>
  <li>
    <p>Windows 7のインストールディスクをCD/DVDドライブに入れて再起動</p>
  </li>
  <li>
    <p>普通にインストール。</p>
  </li>
</ol>

<h3 id="mbm">2-8 MBM再インストールと設定</h3>

<p>Windows 7を入れるとMBRが上書きされるので、<a href="#section2-6">2-6 MBMインストール</a>の手順でもう一度インス
トールする。</p>

<p>もうMBRは書き換わらないはずなので、ちゃんと設定する。</p>

<ul>
  <li>R / F2    Rename Menu Item</li>
  <li>K / F8    Auto Mask Group</li>
</ul>

<p>を使ってVerbose表示の際に以下のようになるようにする</p>

<pre><code>    1. [a--1] 500G 07 Windows 7
    2. [--m2] 120G 17 Windows XP
    3. [--m-] 694M 1C Rescue &amp; Recovery
    4. [----] 311G 07 *DATA
</code></pre>

<p>順序は多少違っていても気にしない。重要なのは[—1]や[—2]のマスクグループ設定。
こうすることでWindowsXP選択時はWindows7領域がマスクされ、Windows7選択時はWindowsXP領域がマスクされ
る。</p>

<p>Rescue&amp;Recovery領域は常にマスクしておく。まあ消してもリカバリーディスクの起動ディスクがあれば代用出
来るので不要とも言う・・・。</p>

<p>データ領域のメニュー項目名を”*“から始めることで、Verbose表示でない時、メニュー一覧に表示しないよう
にできる</p>

<p>あとはSet Timer(T/F3)を使ってタイムアウト時間を設定しておくと便利。
(初期設定だと前選択したものが選択される。デフォルトのメニュー項目設定したい場合は[Space])</p>

<h3 id="windows-xp">2-9 Windows XPのリカバリ</h3>

<p>私が試した中ではWindows 7をインストールするとWindows XPが起動しなくなった。</p>

<p>ブートレコードとかを編集すれば直るのかも知れないが、やり方をよく知らないので、
<a href="#section2-4">2-4 システムのバックアップを取る</a>で作成した「Paragon Backup &amp; Recovery」のWindows
XP領域バックアップディスクを使用してレストアする。</p>

<ol>
  <li>
    <p><a href="#section1-3">1-3 Paragon Backup &amp; RecoveryのインストールとリカバリCD作成</a>で作ったリカバリーメ
ディアをCD/DVDに入れて再起動。BIOSの「Serial ATA」の設定は不要だと思う</p>
  </li>
  <li>
    <p>「Restore Wizard」を使って<a href="#section2-4">2-4 システムのバックアップを取る</a>で作成したWindows領域
バックアップディスクを入れてレストアする。30分くらいでレストアできた(ような気がする)</p>
  </li>
  <li>
    <p>BCD（Boot Configuration Data: ブート構成データ）まで変更してくれるので、MBMでWindows 7を選択した
らもう一回OS選択画面が出て鬱陶しい。BCD上のXP領域を消すのはちょっと怖かったので、Windows 7のコマ
ンドライン(管理者として実行)で<code>bcdedit /timeout 1</code>とタイムアウト時間を短くしてみた</p>
  </li>
</ol>

<p>あと全然関係ないけど、UAC(ユーザーアクセス制御)がうざいので、「通知なし」にしておいた。
最初「管理者として実行」とか知らなくて、<code>bcdedit</code>が動かなくて少し悩んだ。</p>

<p>なんかWindowsて版を重ねるごとにうざくなるな。まあ一般ユーザに合わせてるんだろうけど。</p>

<h3 id="windows-7-1">2-10 Windows 7の不明なデバイス</h3>

<p>これでWindows XPとWindows 7デュアルブート環境構築完了したので、後は適宜必要なアプリをインストールす
ればいい。</p>

<p>但しWindows 7で「System Update」や「Windows Update」をやっても不明なデバイスが3個ほど出来るので、そ
れの消し方を書いておく。</p>

<p>1つは「Ricoh マルチ・カード・リーダー ドライバー」。デバイスマネージャでプロパティ→詳細タブを表示
し、プロパティを「ハードウェアID」とした際に<code>VEN_1180</code>と表示されるものが2つ。</p>

<p>これは<a href="http://www.sevenforums.com/drivers/64309-base-system-device.html">http://www.sevenforums.com/drivers/64309-base-system-device.html</a>に貼ってある<a href="http://www.sevenforums.com/attachments/drivers/54724d1266402003-base-system-device-sp35588.zip">sp35588.zip</a>をダ
ウンロードし、解凍する。</p>

<p>デバイスマネージャのドライバの更新で解凍したファイルの<code>x86</code>(32bit版の場合)または<code>x64</code>(64bit版の場合)
を指定すれば、ドライバがインストールされた。</p>

<p><a href="http://www.thinkpad-club.net/modules/d3forum/index.php?topic_id=3276">Ricoh マルチ・カード・リーダー ドライバー(Windows 7 64bit) </a>に
「Ricoh Multi Card Reader Driver for Windows 7 - ThinkPad R400, R500, T400, T500, W500, W700,
W700ds 」をインストールしたら導入できたという表記があったが、ウチ(Windows 7 Professional 64bit)では
インストールした上で、デバイスの削除＆ハードウェア変更のスキャンとかしてみたが、入らなかった。</p>

<p>あと１つ残ってるのは上のページによると、ワイヤレスUSBドライバらしい。そもそも使ったこともないので、
BIOS上で無効化した。(<a href="http://www-06.ibm.com/jp/domino04/pc/support/Sylphd03.nsf/jtechinfo/SYJ0-0026A8D">ソフトウェアとデバイスドライバーのダウンロード</a>のワイヤレスUSBドラ
イバを入れたら直るのかも)</p>

<p>あと スリープから復帰した際にSmart Mediaが検出される。フォーマットとかしようとしても失敗する(そりゃ
そうだわな)。またSystem Updateで「Smart Card Reader for Windows 7 64bit」が検出されるが、インストール失
敗するのも怪しい。</p>

<p>色々いじくってみたが、うまくいかなかったので放置する(^^ゞ</p>

<h3 id="section-7">もっと簡単にデュアルブートするには</h3>

<ul>
  <li>
    <p>Windows XPを新規インストールする(別途ライセンスがある場合)</p>
  </li>
  <li>
    <p>Windows XP領域を移動させない(サイズ変更のみ行う)</p>
  </li>
</ul>

<p>のどちらかをすれば、こんなに面倒ではないと思う。</p>

<p>但し、Thinkpad T61pでWindows XPを新規インストールのはそれはそれで嵌まる可能性大。<a href="http://www-06.ibm.com/jp/domino04/pc/support/Sylphd03.nsf/jtechinfo/SYJ0-004AC52">Lenovo
サポートページ</a>
参照して、頑張って下さい。</p>

<h2 id="mbm-1">MBMグラフィカルメニュー(拡張メニュー)作成</h2>

<p><a href="http://elm-chan.org/fsw/mbm/mbm.html">MBM本家</a>のメニュー作成支援ツールをダウンロードしてもいいが、
DOSなので、<a href="http://www.vector.co.jp/soft/win95/util/se323199.html">MBM Maker</a>を使用した方が簡単。</p>

<p>指定できるビットマップサイズはVGA(640x480)、SVGA(800x600)、XGA(1024x768)の3種類。色深度は8ビット(256
色)または24ビット(フルカラー)ビットマップ。</p>

<p>フルカラービットマップとかを指定しても、メニュー作成時にサイズ制限に引っかかる場合がある(圧縮後のサイ
ズが614400バイトを超えるとNG)。万全を期すならSVGAの256色ビットマップにリサイズ＆減色すればいい。
ベタ絵(アニメ絵)ならXGA&amp;256色ならサイズ制限に引っかかることはないと思う。</p>

<p>リサイズ＆減色は私は以前ダウンロードしてあったyukariを使用した(フリーの減色ツールとして評価の高
いPadieの後継。リサイズのアルゴリズムも選択可能)が、今はダウンロードできないみたい(ウイルス誤検出
されるため？)。
ググればダウンロードできるところはあるが、期間限定ぽいのでここには書かない。
必要なら各自で探す必要がある。</p>

<p>他のツールとしては「ViX 統合画像ビュアー」、「IrfanView」、「BatchGoo」などかな？
細かい設定ができないかもしれないので、適当なツールがあればそれを使用すればいい。</p>

<h3 id="section-8">元画像の選び方</h3>

<p>自分のディスプレイのアスペクト比(縦横比)が4:3の場合、元画像のアスペクト比は4:3のものを使用する。</p>

<p>ディスプレイのアスペクト比が4:3以外の時(ワイドスクリーンの時)は小さいサイズを表示しようとした際にど
う表示されるかに依る。Thinkpad T61pは画面全体に拡大されるので元画像のアスペクト比は8:5に近いものを選
んだ方がいい(または8:5になるように縦または横に帯を入れてみるとか)。<br />
まあ元画像のアスペクト比が4:3とかならグラフィカルメニュー時に横伸びした画像になるというだけなので、
気にならないなら別に構わない</p>

<h3 id="section-9">リサイズ＆減色について</h3>

<p>1024x768(または800x600)にリサイズしたあと、256色に減色する。
(減色してからリサイズしないように) </p>

<p>この時文字色、タイムバーを使用するならタイムバー色や背景色をパレットに含めるように設定する
(yukariの場合「強制的に以下の自由色を追加する」で指定可能)。</p>

<p>指定しなかった場合文字色やタイムバーの色がおかしくなる可能性がある
(パレットに色が見つからなかったとき拡張メニュー作成側でどういう処理をしてるか不明。
そんなえげつない色にはなってないので一番近い色を選んでる？？)</p>

<h3 id="mbm-maker">MBM Makerの使い方</h3>

<p>64bit版Windowsではメニューファイル作成が動かないみたい(16ビットDOS実行ファイルを動かそうとするので)</p>

<p>Windows XP(32bit)なら動くのを確認した(DLLが見つからないみたいなメッセージが出たけど”無視”としたら動
いた)。但し、以前別のPCでやったとき動かなかった記憶もあるので、環境に依るのかも</p>

<p>iniファイル作成までは動くので、<a href="#section1-4">1-4 MBM起動ディスクを作成</a>で作ったメディアに<code>mkm?.com</code>
と<code>mkm?.ini</code>を突っ込んで、再起動し、<code>mkm?.com</code>を実行すればメニューファイルができる。</p>

<p>実際の使い方は大体分かるだろうけど、一応スクリーンショットを貼っとく。</p>

<p><img src="http://nukino.github.com/images/2012/01/24/img05.png" alt="img05" title="設定画面" width="450" /></p>

<p><img src="http://nukino.github.com/images/2012/01/24/img06.png" alt="img06" title="プレビュー画面" width="600" /></p>

<h3 id="hdd-1">グラフィカルメニューをHDDに書き込む</h3>

<p>DOS起動FDを作成し、<code>mbm.com</code>と出来たメニューファイル(.mbm)を入れて、</p>

<pre class="cmdline"><code>mbm setmenu
</code></pre>

<p>として、メニューファイル、書き込むシリンダ番号を指定するのが一番簡単。この時書き込むシリンダ番号を間
違えると、OSが起動しなくなったりするかもしれないので注意。</p>

<pre class="cmdline"><code>mbm edit
</code></pre>

<p>として、未使用シリンダを確認した上で使用した方がいい。</p>

<p>なお、<a href="#section1-4">1-4 MBM起動ディスクを作成</a>で作ったUSBメディアで起動して、<code>mbm setmenu</code>としてもUSB側に
グラフィカルメニュー(拡張メニュー)を作成しようとするためうまくいかない。</p>

<p><a href="http://www.sssg.org/sns/naganuma/weblog/89.html">MBMをUSBメモリからインストールする</a></p>

<p>の方法で作った上でMBM.144を<a href="http://www.vector.co.jp/soft/dl/win95/util/se107750.html">Disk Explorer</a>
で編集し、<code>mbm.com</code>と出来たメニューファイル(.mbm)を突っ込めば動くかもしれない。</p>

<p>CD-R(またはCD-RW)起動の場合は試してないが、なんとなく動きそうな気がする。</p>

<p>もしくは新しくHDD内にパーティション作って、Free DOSを入れた上で必要ファイルを突っ込んでもいい。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gist.vimの導入とヘルパースクリプトの作成]]></title>
    <link href="http://nukino.github.com/blog/2012/01/16/gist_vim/"/>
    <updated>2012-01-16T11:11:00+09:00</updated>
    <id>http://nukino.github.com/blog/2012/01/16/gist_vim</id>
    <content type="html"><![CDATA[<p>Octopressで記事を書くにあたってGistにコード貼ったり、それをVim上で管理できるGist.vimを導入したんです
が、その際に少し嵌まったのでその解決法と使ってる内にもう少し便利にしたいな―。という欲求がフツフツと
沸いてきたので、vimスクリプトを書いてみた。</p>

<p>環境はWindows XP(SP3)+vim 7.3.393(Kaoriya版)。</p>

<!-- more -->

<h2 id="gistvim">Gist.vimの導入</h2>

<h3 id="curl">cURLのダウンロードとインストール</h3>

<p>Windows系の場合、まずはcURLは標準で入ってないのでダウンロードする必要がある。
(linux系なら多分最初から入ってる。Macも最近のなら入ってるのかな？)</p>

<p><a href="http://curl.haxx.se/download.html">cURL-Download</a></p>

<p>よりダウンロード。cygwinは使ってないので、</p>

<pre><code>Win32 - Generic
|   Win32 2000/XP   7.23.1  binary  SSL enabled         Gunter Knauf    1.33 MB
</code></pre>

<p>をダウンロードしてみた。インストーラは付いてないので解凍して</p>

<pre><code>curl.exe
libcurl.dll
libeay32.dll
libssl32.dll
</code></pre>

<p>の4ファイルをパスの通ったフォルダにコピー(または解凍したフォルダにパスを通す)すればおｋ。</p>

<h3 id="gistvim-1">Gist.vimのインストール</h3>

<p>通常のvimプラグインと一緒。</p>

<ul>
  <li><a href="http://www.vim.org/scripts/script.php?script_id=2423">Gist.vim - vim online</a></li>
  <li><a href="https://github.com/mattn/gist-vim">Gist.vim - GitHub</a></li>
</ul>

<p>のどちらかからダウンロード＆解凍して、<code>$VIMRUNTIME</code>にコピーすればいい。</p>

<p>vimプラグイン管理を使ってるなら<code>$MYVIMRC</code>に</p>

<pre><code>NeoBundle 'mattn/gist-vim'
</code></pre>

<p>とか書いてインストール(<code>:NeoBundleInstall</code>)すればいい(使ってる管理プラグインによって$MYVIMRCの書き方
やExコマンドは違う。ここではNeoBundleの例)</p>

<h3 id="section">設定</h3>

<p><code>$MYVIMRC</code>に以下を記述</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>$MYVIMRC(ex.vimrc)  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="vim"><span class="line">    <span class="k">let</span> g:github_user <span class="p">=</span> <span class="p">&lt;</span>input your username<span class="p">&gt;</span>
</span><span class="line">    <span class="k">let</span> g:github_token <span class="p">=</span> <span class="p">&lt;</span>input your token<span class="p">&gt;</span>
</span><span class="line">    <span class="k">let</span> g:gist_curl_options <span class="p">=</span> <span class="s2">&quot;-k&quot;</span>
</span><span class="line">    <span class="k">let</span> g:gist_detect_filetype <span class="p">=</span> <span class="m">1</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><code>g:github_user</code>や<code>g:github_token</code>を設定しておくとgitコマンドが動かないので若干高速化する(筈)。</p>

<p>ちなみに<code>g:github_token</code>は<a href="https://github.com/account/admin">Github→Account Setting→Account Admin</a>の以下の部分を参照すれば良い。</p>

<p><img src="http://nukino.github.com/images/2012/01/15/img00.png" alt="API Token" width="350" /></p>

<p><code>g:gist_curl_options</code>を指定しないとGist.vimが動かなかったので調べて、同じコマンドをコマンドラインか
ら打ってみると</p>

<pre><code>curl: (60) SSL certificate problem, verify that the CA cert is OK. Details:
error:14090086:SSL routines:SSL3_GET_SERVER_CERTIFICATE:certificate verify failed
More details here: http://curl.haxx.se/docs/sslcerts.html

curl performs SSL certificate verification by default, using a "bundle"
 of Certificate Authority (CA) public keys (CA certs). If the default
 bundle file isn't adequate, you can specify an alternate file
 using the --cacert option.
If this HTTPS server uses a certificate signed by a CA represented in
 the bundle, the certificate verification probably failed due to a
 problem with the certificate (it might be expired, or the name might
 not match the domain name in the URL).
If you'd like to turn off curl's verification of the certificate, use
 the -k (or --insecure) option.
</code></pre>

<p>てな表示が出た。SSL証明書の確認が出来ないので、確認を無視するには’-k’オプション指定してね。と書いて
あると見て、とりあえず<code>g:gist_curl_options</code>に<code>-k</code>を指定してみた。</p>

<p>なんか臭いものに蓋をしただけのような気もする。正しい解決策を誰か教えて。</p>

<h2 id="gistvim-2">Gist.vimの(基本的な)使い方</h2>

<h3 id="post">投稿(Post)</h3>

<pre><code>:Gist [-P|-p]
</code></pre>

<p><code>-p</code>を付けるとprivate、<code>-P</code>を付けるとpublicで投稿される。何も付けないと<code>g:gist_private</code>の値に従う。
(デフォルトはpublic)</p>

<p>範囲指定可能なので</p>

<pre><code>:6,20Gist
</code></pre>

<p>とすると、6行目から20行目までを投稿できる。</p>

<p>通常はVisual modeで選択した後”:”を入力すると自動的に選択範囲が範囲指定されるので、それを使う。</p>

<p>他にも<code>-m</code>を付けたら現在開いてるバッファ分の複数ファイルのgistを作成できたり、<code>-a</code>を付けると
anonymous投稿出来たりするみたいだが、使ったことはない。</p>

<h3 id="section-1">一覧取得</h3>

<pre><code>:Gist -l [user]
</code></pre>

<p>でgist一覧を取得できる。userを指定しない場合は自分となる。</p>

<pre><code>:Gist -la
</code></pre>

<p>で自分のpublicとprivate全てのgist一覧を取得できる。</p>

<h3 id="section-2">編集</h3>

<p>一覧取得したバッファで[Enter]を押すかまたは</p>

<pre><code>:Gist gist-id
</code></pre>

<p>とgist-idを指定したコマンドを実行すればgist編集バッファで編集が出来る</p>

<h3 id="section-3">更新</h3>

<p>gist編集バッファ内で</p>

<pre><code>:w[rite]
</code></pre>

<p>または</p>

<pre><code>:Gist -e
</code></pre>

<p>とすると編集バッファの内容を更新できる。</p>

<h3 id="section-4">削除</h3>

<p>間違えて投稿してしまった場合、gist編集バッファ内で</p>

<pre><code>:Gist -d
</code></pre>

<p>とすると、編集しているgist-idが削除される。</p>

<pre><code>:Gist -d gist-id
</code></pre>

<p>みたいにgist-idを指定して削除とかは出来ないみたい。(誤操作防止のため？？)</p>

<h3 id="description">説明(description)指定</h3>

<p>投稿、更新コマンド時に</p>

<pre><code>:Gist -s ほげほげ
:Gist -e -s ほげほげ
</code></pre>

<p>と<code>-s &lt;description&gt;</code>とすると説明(description)を指定できる。説明を指定しておくと、一覧表示の際の画面
が</p>

<p><img src="http://nukino.github.com/images/2012/01/15/img01.png" alt="一覧画面" /></p>

<p>のように説明が表示されて、管理がしやすいように思う。</p>

<p>また</p>

<pre><code>:Gist -s 2012/01/16 15:33
</code></pre>

<p>みたいに空白を入れると上手く動かない。空白の後ろ部分(先の例だと15:33)が説明となる。
gistの制限でそうしてあるのか単純にGist.vimのバグかまでは調べてない。全角スペースなら問題ないので、区
切りが欲しい場合は全角スペースで区切ると良い。</p>

<h2 id="gistvim-3">Gist.vimヘルパースクリプト</h2>

<p>毎回-sオプション付けて説明指定するのは面倒なので、それを自動的に付けてしまおう。
というスクリプトを書いてみた。</p>

<p>導入が若干面倒なので、プラグインにしてしまった方が良いような気もする。<br />
まあ要望があれば考えると言うことで・・・。</p>

<h3 id="section-5">インストール</h3>

<p><a href="https://gist.github.com/1606832">ここ</a>からファイルをダウンロードして、
<code>$VIMRUNTIME/autoload/gist_vim_helper.vim</code>に保存。</p>

<p><code>$MYVIMRC</code>に以下を追加</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>$MYVIMRC(ex.vimrc)  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="vim"><span class="line">    command<span class="p">!</span> <span class="p">-</span>nargs<span class="p">=</span>? <span class="p">-</span>range<span class="p">=</span>% GHPostGist <span class="k">call</span> gist_vim_helper#post_cmd<span class="p">(&lt;</span>count<span class="p">&gt;,</span> <span class="p">&lt;</span>line1<span class="p">&gt;,</span> <span class="p">&lt;</span>line2<span class="p">&gt;,</span> <span class="p">&lt;</span><span class="k">f</span><span class="p">-</span>args<span class="p">&gt;)</span>
</span><span class="line">    command<span class="p">!</span> <span class="p">-</span>nargs<span class="p">=</span>? <span class="p">-</span>range<span class="p">=</span>% GHEditGist <span class="k">call</span> gist_vim_helper#edit_cmd<span class="p">(&lt;</span>count<span class="p">&gt;,</span> <span class="p">&lt;</span>line1<span class="p">&gt;,</span> <span class="p">&lt;</span>line2<span class="p">&gt;,</span> <span class="p">&lt;</span><span class="k">f</span><span class="p">-</span>args<span class="p">&gt;)</span>
</span><span class="line">    command<span class="p">!</span> <span class="p">-</span>nargs<span class="p">=</span>? <span class="p">-</span>range<span class="p">=</span>% GHAutoGist <span class="k">call</span> gist_vim_helper#auto_cmd<span class="p">(&lt;</span>count<span class="p">&gt;,</span> <span class="p">&lt;</span>line1<span class="p">&gt;,</span> <span class="p">&lt;</span>line2<span class="p">&gt;,</span> <span class="p">&lt;</span><span class="k">f</span><span class="p">-</span>args<span class="p">&gt;)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="section-6">使い方</h3>

<h4 id="section-7">投稿</h4>

<pre><code>:GHPostGist [is_private]
</code></pre>

<p>が<code>:Gist -P</code>または<code>:Gist -p</code>コマンドの代替コマンド。<code>g:gist_vim_helper_new_desc</code>変数に従った説明を付
加する。<code>is_private</code>が1なら<code>:Gist -p</code>、0なら<code>:Gist -P</code>、省略時は<code>:Gist</code>コマンドが発行される。</p>

<p><code>g:gist_vim_helper_new_desc</code>に指定できるフォーマットは</p>

<dl>
  <dt>%Y,%m,%dなど</dt>
  <dd><code>strftmime()</code>関数で指定可能な日付時刻指定子</dd>
  <dt>$f</dt>
  <dd>投稿するファイル名</dd>
  <dt>$d</dt>
  <dd>ユーザー記述。毎回入力を求められる。</dd>
</dl>

<p>です。先ほど述べたようにスペースを入れないように注意！</p>

<h4 id="section-8">更新</h4>

<pre><code>:GHEditGist [is_private] [is_close]
</code></pre>

<p>が<code>:Gist -e</code>コマンドの代替。<code>is_private</code>は指定しても無意味。将来的にGist.vimがprivate→publicとかに対応す
るかもしれないので、付けてある。<code>is_close</code>に1を指定すると更新が成功したらgist編集バッファを閉じる。
<code>g:gist_vim_helper_edit_desc</code>変数に従った説明を付ける。</p>

<p><code>g:gist_vim_helper_edit_desc</code>に指定できるフォーマットは<code>g:gist_vim_helper_edit_desc</code>と同様。</p>

<p>ただし<code>$d</code>を指定した際は入力求める際の初期値が現在の説明になってるので、不要な部分を適宜削除する必要
がある。</p>

<h4 id="section-9">投稿または更新を自動判別</h4>

<pre><code>:GHAutoGist [is_private] [is_close]
</code></pre>

<p>はgist編集バッファ内で実行すると<code>:GHEditGist [is_private] [is_close]</code>コマンド、それ以外のバッファで
実行すると、<code>:GHPostGist [is_private]</code>コマンドを実行する。</p>

<p>結構便利。</p>

<h3 id="section-10">設定例</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>$MYVIMRC(ex.vimrc)  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="vim"><span class="line">    <span class="k">let</span> g:gist_vim_helper_new_desc  <span class="p">=</span> <span class="c">&quot;[%Y%m%d-%H%M]$f/$d&quot;</span>
</span><span class="line"><span class="c">    &quot;説明に作成日時を付加する</span>
</span><span class="line">    <span class="k">let</span> g:gist_vim_helper_edit_desc <span class="p">=</span> <span class="c">&quot;&quot;</span>
</span><span class="line"><span class="c">    &quot;説明に更新日時を付加する場合コメントアウト</span>
</span><span class="line"><span class="c">    &quot;let g:gist_vim_helper_edit_desc = &quot;[%Y%m%d-%H%M]$f/$d&quot;</span>
</span><span class="line">
</span><span class="line">    <span class="nb">noremap</span> <span class="p">&lt;</span><span class="k">silent</span><span class="p">&gt;&lt;</span>Space<span class="p">&gt;</span><span class="nb">gp</span> :GHPostGist <span class="m">0</span><span class="p">&lt;</span>CR<span class="p">&gt;</span>
</span><span class="line">    <span class="nb">noremap</span> <span class="p">&lt;</span><span class="k">silent</span><span class="p">&gt;&lt;</span>Space<span class="p">&gt;</span>ge :GHEditGist <span class="m">0</span> <span class="m">0</span><span class="p">&lt;</span>CR<span class="p">&gt;</span>
</span><span class="line">    <span class="nb">noremap</span> <span class="p">&lt;</span><span class="k">silent</span><span class="p">&gt;&lt;</span>Space<span class="p">&gt;</span>ga :GHAutoGist <span class="m">0</span> <span class="m">1</span><span class="p">&lt;</span>CR<span class="p">&gt;</span>
</span><span class="line">    nnoremap <span class="p">&lt;</span>Space<span class="p">&gt;</span>gl        :<span class="p">&lt;</span>C<span class="p">-</span><span class="k">u</span><span class="p">&gt;</span>echo <span class="c">&quot;please wait...&quot;&lt;CR&gt; :Gist -l&lt;CR&gt;</span>
</span><span class="line">    nnoremap <span class="p">&lt;</span>Space<span class="p">&gt;</span>gdel      :<span class="p">&lt;</span>C<span class="p">-</span><span class="k">u</span><span class="p">&gt;</span>Gist <span class="p">-</span><span class="k">d</span><span class="p">&lt;</span>CR<span class="p">&gt;</span> :<span class="k">close</span><span class="p">&lt;</span>CR<span class="p">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>キー定義は適当に変更する。<code>&lt;Space&gt;gl</code>、<code>&lt;Space&gt;gdel</code>はおまけ。</p>

<h3 id="gistvim-4">Gist.vimの修正(必要ならば)</h3>

<p><code>g:gist_vim_helper_edit_desc</code>に値を設定した場合、<code>:GHEditGist</code>(または<code>:GHAutoGist</code>)コマンド
で更新すると説明が更新されるが、</p>

<pre><code>:w[rite]
</code></pre>

<p>とすると、説明が更新されない。それが気に入らない人は<code>$VIMRUNTIME/autoload/gist.vim</code>の<code>s:GistWrite()</code>
関数(319行目くらい？)を以下のように変更する。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>gist.vim  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="diff"><span class="line">    function! s:GistWrite(fname)
</span><span class="line">      if substitute(a:fname, &#39;\\&#39;, &#39;/&#39;, &#39;g&#39;) == expand(&quot;%:p:gs@\\@/@&quot;)
</span><span class="line"><span class="gd">---     Gist -e</span>
</span><span class="line"><span class="gi">+++     1,1call gist_vim_helper#edit(0,0)</span>
</span><span class="line">      else
</span><span class="line">        exe &quot;w&quot;.(v:cmdbang ? &quot;!&quot; : &quot;&quot;) fnameescape(v:cmdarg) fnameescape(a:fname)
</span><span class="line">        silent! exe &quot;file&quot; fnameescape(a:fname)
</span><span class="line">        silent! au! BufWriteCmd &lt;buffer&gt;
</span><span class="line">      endif
</span><span class="line">    endfunction
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>追加する部分は</p>

<pre><code>call gist_vim_helper#edit_cmd(-1, 1, 1, 0, 0)
</code></pre>

<p>でもいいかもしれない。</p>

<h2 id="octopressgist-tag">Octopressで使用する場合にGist Tagを貼り付ける</h2>

<p><code>:Gist </code>コマンドで記事をポストすると<code>g:gist_put_url_to_clipboard_after_post</code>が1の時、</p>

<pre><code>https://gist.github.com/1606832
</code></pre>

<p>のようなURL(‘1606832’の部分はGist-ID)がクリップボードに貼り付けられる。またOctopressには</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span> (gist-tag)</span> <a href="http://nukino.github.com/downloads/code/2012-01/14/gist-tag">download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="p">{</span><span class="o">%</span> <span class="nx">gist</span> <span class="nx">gist_id</span> <span class="p">[</span><span class="nx">filename</span><span class="p">]</span> <span class="o">%</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>と記事に書けばGistコードをページに貼り付けてくれる”Gist Tag”という便利なプラグインが存在する。</p>

<p>ということでクリップボードから貼り付けて、ちょっと変更加えればGistコードをページに埋め込むことが出来
る･･･んだけど、数回やっただけで面倒くさくなってきた(スペースの有無とか間違えて、Octopress Document
見に行ったりしてるし)。</p>

<p>ということで変換して貼り付けてくれるvimスクリプトを書いてみた。</p>

<div><script src="https://gist.github.com/1606941.js?file="></script>
<noscript><pre><code>func! s:paste_gist_tag()
  let mx = 'http[s]\?://gist.github.com/\([0-9]\+\)'
  &quot; +または&quot;レジスタの中身を検索する
  let regs = [@+,@&quot;]
  for r in regs
    let mlist = matchlist(r, mx)
    if ( len(mlist) &gt; 2 )
      &quot;カーソル行の前の行先頭に挿入する
      exe &quot;normal! O\&lt;C-W&gt;{% gist &quot; . mlist[1] . &quot; %}&quot;
      return
    endif
  endif
endfunc

&quot;コマンド
command! -nargs=0 PasteGist     call &lt;SID&gt;paste_gist_tag()</code></pre></noscript></div>

<p>上記コードを$MYVIMRC(または<code>$VIMRUNTIME/ftplugin/markdown</code>とか)に貼り付ければ、vim上で</p>

<pre><code>:PasteGist
</code></pre>

<p>とExコマンド打てば、カーソル行にGist Tagが貼り付けられる(クリップボードにGistのURLがないと駄目)。</p>

<p>カーソル行の後に貼り付けるようにしたいのなら9行目の<code>normal O{</code>→<code>normal o{</code>とかにすればおｋ。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress記事作成スクリプトを修正してみた]]></title>
    <link href="http://nukino.github.com/blog/2012/01/12/Octopress/"/>
    <updated>2012-01-12T00:19:00+09:00</updated>
    <id>http://nukino.github.com/blog/2012/01/12/Octopress</id>
    <content type="html"><![CDATA[<p>以前<a href="http://nukino.github.com/blog/2012/01/06/Octopress/">Octopressを試してみる</a>で、Octopress記事作
成スクリプトを掲示したが、これを変更してみた。</p>

<p>変更点は</p>

<ol>
  <li>サブディレクトリの指定</li>
  <li>YAML Front Matterに published:の追加</li>
  <li>YAML Front Matterのcategories:、keywords:に初期値追加</li>
  <li>続きを読む(<code>&lt;!-- more --&gt;</code>)の追加</li>
</ol>

<!-- more -->

<h2 id="section">変更点の説明</h2>

<h3 id="section-1">サブディレクトリの指定</h3>

<p><code>octopress_dir/source/_post</code>にサブディレクトリを作ってもちゃんと記事を認識してくれるみたい。</p>

<p>月毎にディレクトリ作っておいた方が管理が楽そうなので、それに対応させるように
<code>g:octopress_article_subdir</code>変数を追加。</p>

<pre><code>let g:octopress_article_subdir = '%Y-%m'
</code></pre>

<p>のように指定。文字列には strftime()で使用できる書式指定コードを指定可能。</p>

<p>Kaoriya版なら、VC2010なので<a href="http://msdn.microsoft.com/ja-jp/library/fe06s4ak.aspx">Visual Studio 2010のstrftime()</a>を参照。</p>

<p>gccでコンパイルされてるなら<a href="http://linuxjm.sourceforge.jp/html/LDP_man-pages/man3/strftime.3.html">Manpage of strftime</a>になるのかな？</p>

<p>サブフォルダが存在しない場合は自動的に作られる(vimのmkdir()が存在すれば)。また’%Y/%m’のように複数階
層になっても動くはず。</p>

<h3 id="published-">:published の追加</h3>

<p>下書き機能ってないのかな？と<a href="http://octopress.org/docs/blogging/">Octopress Document-Blogging Basics</a>を見てるとYAML Front Matterに<code>published: false</code>と指定すれば良い
ことが分かった。</p>

<p>その時わざわざ追加するのもうざいので、記事の先頭部分に<code>published:</code>を追加するようにしてみた(初期値はtrue)</p>

<h3 id="categorieskeywords">categories:、keywords:に初期値追加</h3>

<p>いつも「書式どうだったっけ？」と思うので、<code>categories:</code>と<code>keywords:</code>にダミー初期値を出力するようにし
てみた。</p>

<p>鬱陶しいならソースを修正しといてください</p>

<h3 id="more---">続きを読む<code>&lt;!-- more --&gt;</code>の追加</h3>

<p>記事中に<code>&lt;!-- more --&gt;</code>があると「続きを読む」リンクが表示される。</p>

<p>毎回打つのも面倒なので、末尾に追加するようにしてみた。</p>

<p>なお表記はデフォルトでは「Read on →」となるが、これを変更したい場合<code>_config.yml</code>の</p>

<pre><code>excerpt_link: "Read on &amp;rarr;"  # "Continue reading" link text at the bottom of excerpted articles
</code></pre>

<p>を変更すればよい。</p>

<h2 id="section-2">ソースコード</h2>

<p><code>$VIMRUNTIME/autoload/myvimrc.vim</code>に以下を追加</p>

<div><script src="https://gist.github.com/1597341.js?file="></script>
<noscript><pre><code>&quot;Octopress 新記事作成
&quot;
&quot;使用するグローバル変数
&quot;  g:octopress_rootdir        octopressルートディレクトリ
&quot;  g:octopress_article_ext    記事の拡張子
&quot;  g:octopress_article_subdir 記事のサブフォルダ。strftime()のパラメータ(%Y等)
&quot;                             使用可能
&quot;
&quot; 2012/01/06  新規作成
&quot; 2012/01/11  category,keywordに初期値を入れた
&quot;             publishedフィールド追加
&quot;             g:octopress_article_subdir追加
&quot;             
func! myvimrc#new_article(title)
  let l:atitle = a:title
  if ( l:atitle == &quot;&quot; )
    let l:atitle = input(&quot;input title:&quot;)
  endif
  let l:time = localtime()
  let l:hantitle = l:atitle
  &quot;Kaoriya 全角→半角関数があるなら使う
  if ( exists( &quot;*ToHankaku&quot; ) )
    let l:hantitle = ToHankaku(l:atitle)
  endif
  &quot; match_characterはKaoriyaのhz_ja.vimより。意味はよく分からん。
  let l:match_character = '\%([ｳｶｷｸｹｺｻｼｽｾｿﾀﾁﾂﾃﾄﾊﾋﾌﾍﾎ]ﾞ\|[ﾊﾋﾌﾍﾎ]ﾟ\|.\)'
  let l:asctitle = &quot;&quot;
  let l:ii = 0
  let l:len = strlen(l:hantitle)
  &quot; titleのファイル名に使える英数字＆記号だけ抜き出す。
  while ( l:ii &lt; l:len )
      let l:char = matchstr(l:hantitle, l:match_character, l:ii)
    &quot;2バイト文字は省く
    if ( l:char =~ '^\f$' &amp;&amp; char2nr(l:char) &lt; 256 )
      let l:asctitle .= l:char
    endif
    let l:ii += strlen(l:char)
  endwhile
  if ( l:asctitle == &quot;&quot; )
    let l:asctitle = &quot;article&quot;
  endif
  let article_dir = get(g:, 'octopress_rootdir', '~/octopress') . '/source/_posts/'  
  let sub_dir = strftime(get(g:, 'octopress_article_subdir', ''), l:time)
  if ( sub_dir != '' )
    if ( finddir( article_dir . sub_dir ) == '' )
      if ( exists( &quot;*mkdir&quot; ) )
        let article_dir .= l:sub_dir
        call mkdir( article_dir, &quot;p&quot; )
      else
        &quot;作れない場合は_postsに置いとく
        echohl ErrorMsg | echomsg 'mkdirをサポートしてません _postに置いておきます' | echohl None
      endif
    else
      let article_dir .= l:sub_dir
    endif
    let last_char = article_dir[strlen(article_dir)-1]
    if ( last_char != '/' &amp;&amp; last_char != '\' )
      let article_dir .= '/'
    endif
  endif

  let article_ext = get(g:, 'octopress_article_ext', 'markdown')

  let l:fbase = strftime(&quot;%Y-%m-%d-&quot;, l:time) . l:asctitle
  let l:fname = article_dir . l:fbase . '.'  . article_ext
  let l:is_create = 1
  if ( findfile(l:fname) != &quot;&quot; )
    let l:ec = tolower(input(&quot;'&quot;.l:fbase.'.'.article_ext.&quot;' is exist create/overwrite/edit [c/w/e]?:&quot;))
    if ( l:ec == &quot;w&quot; )
      call delete(l:fname)
    elseif (l:ec == &quot;c&quot; )
      let l:ii = 0
      while ( 1 )
        let l:ii += 1
        let l:fname = article_dir . l:fbase.'_'.l:ii.'.' . article_ext
        if ( findfile(l:fname) == &quot;&quot; )
          break
        endif
      endwhile
    elseif (l:ec == &quot;e&quot; )
      let l:is_create = 0
    else
      return
    endif
  endif
  if ( l:is_create )
    let l:utf8title = &quot;&quot;
    if ( has('iconv') )
      let l:utf8title = iconv(l:atitle, &amp;enc, &quot;utf-8&quot;)
    else
      let l:utf8title = l:atitle
    endif

    let l:wlines = ['---', 'layout: post']
    let l:wlines += ['title: &quot;' . l:utf8title . '&quot;']
    let l:wlines += ['date: '. strftime(&quot;%Y-%m-%d %H:%M&quot;, l:time)]
    let l:wlines += ['comments: true', 'published: true', 'categories: [cat1, cat2]']
    let l:wlines += ['description: ', 'keywords: key1, key2', '---', '',&quot;&lt;!-- more --&gt;&quot;]

    call writefile( l:wlines, l:fname )
  endif
  if ( l:asctitle == l:atitle )
    &quot;タイトルに日本語が含まれない場合、明示的にutf-8にしてみる
    &quot;タイトルにファイル名に使えない文字が含まれてる場合ここを通らないけど
    augroup au_oct_new
      au BufEnter * setl fenc=utf-8
    augroup END
  endif
  execute &quot;edit&quot; . &quot; ++enc=UTF-8 &quot; . l:fname | &quot;normal G&quot;
  if ( l:asctitle == l:atitle )
    augroup au_oct_new
      autocmd!
    augroup END
  endif
endfunc
</code></pre></noscript></div>

<p><code>$MYVIMRC</code>に以下を追加</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>_vimrc</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="vim"><span class="line">command<span class="p">!</span> <span class="p">-</span>nargs<span class="p">=</span>? OctNewPost <span class="k">call</span> myvimrc#new_article<span class="p">(&lt;</span><span class="k">q</span><span class="p">-</span>args<span class="p">&gt;)</span>
</span><span class="line"><span class="c">&quot;設定サンプル</span>
</span><span class="line"><span class="k">let</span> g:octopress_article_ext <span class="p">=</span> <span class="c">&quot;krd&quot;</span>
</span><span class="line"><span class="k">let</span> g:octopress_rootdir <span class="p">=</span> expand<span class="p">(</span><span class="s1">&#39;$OCTOPRESS_DIR&#39;</span><span class="p">)</span>
</span><span class="line"><span class="k">let</span> g:octopress_article_subdir <span class="p">=</span> <span class="s1">&#39;%Y-%m&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>そのうちプラグインにするかも。</p>

<h2 id="section-3">実行と出力サンプル</h2>

<p>今日の日付が2012/01/12で上記設定サンプルが有効な場合にvim上で</p>

<pre><code>:OctNewPost Octopressを試してみる
</code></pre>

<p>などとして実行すると<code>$OCTOPRESS_DIR/source/_post/2012-01/2012-01-12-Octopress.krd</code>
ができる</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>2012-01-12-Octopress.krd</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="yaml"><span class="line"><span class="nn">---</span>
</span><span class="line"><span class="l-Scalar-Plain">layout</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">post</span>
</span><span class="line"><span class="l-Scalar-Plain">title</span><span class="p-Indicator">:</span> <span class="s">&quot;Octopressを試してみる&quot;</span>
</span><span class="line"><span class="l-Scalar-Plain">date</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">2012-01-12 09:08</span>
</span><span class="line"><span class="l-Scalar-Plain">comments</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">true</span>
</span><span class="line"><span class="l-Scalar-Plain">published</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">true</span>
</span><span class="line"><span class="l-Scalar-Plain">categories</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="nv">cat1</span><span class="p-Indicator">,</span> <span class="nv">cat2</span><span class="p-Indicator">]</span>
</span><span class="line"><span class="l-Scalar-Plain">description</span><span class="p-Indicator">:</span>
</span><span class="line"><span class="l-Scalar-Plain">keywords</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">key1, key2</span>
</span><span class="line"><span class="nn">---</span>
</span><span class="line">
</span><span class="line"><span class="l-Scalar-Plain">&lt;!-- more --&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[vimのhelpgrepで日本語が使えない場合]]></title>
    <link href="http://nukino.github.com/blog/2012/01/10/helpgrep/"/>
    <updated>2012-01-10T00:14:00+09:00</updated>
    <id>http://nukino.github.com/blog/2012/01/10/helpgrep</id>
    <content type="html"><![CDATA[<p>help内をgrep検索できるhelpgrep(＆lhelpgrep)なるコマンドがあることを最近知った(←遅い)。</p>

<p>しかし、私が使ってるvim(vim 7.3.393 Kaoriya版)では、helpgrepで日本語検索が出来ない。</p>

<p><a href="https://github.com/vim-jp/issues/issues/95">このページ</a>に依ると、内部エンコーディングがUTF-8以外の場合×みた
いなので、<code>_vimrc</code>に</p>

<pre><code>set enc=utf-8
</code></pre>

<p>と書けばおｋ･･･なのだが、内部エンコーディングはあまり変えたくないので、helpgrep(&amp;lhelpgrep)に渡す文字列、返ってきた文字列を変換するようにしてみた。</p>

<!-- more -->

<p><code>_vimrc</code>に以下を追加する。</p>

<div><script src="https://gist.github.com/1583365.js?file="></script>
<noscript><pre><code>func! FuncJHelpgrep(strg, type)
    if ( &amp;enc != &quot;utf-8&quot; )
        if ( !has('iconv') )
            echohl ErrorMsg | echomsg 'Not support iconv' | echohl None
            return
        endif
        if ( a:type == 0 )
            let scmd = &quot;helpgrep &quot;
        else
            let scmd = &quot;lhelpgrep &quot;
        endif
        &quot;検索結果をUTF-8に変換
        let sfind = iconv(a:strg, &amp;enc, &quot;utf-8&quot;)
        exe scmd . sfind
        if ( a:type == 0 )
            let flist = getqflist()
        else
            &quot;ヘルプウィンドウを検索
            let l:bufnrlist = tabpagebuflist()
            let nr_helpw = -1
            for i in bufnrlist
                if ( getbufvar(i, &quot;&amp;filetype&quot;) == &quot;help&quot; )
                    let nr_helpw = bufwinnr(i)
                    break
                endif
            endfor
            if ( nr_helpw == -1 )
                echohl ErrorMsg | echomsg 'Not found Help Window' | echohl None
                return
            else
                let flist = getloclist(nr_helpw)
            endif
        endif
        for l in flist
            let l.text = iconv(l.text, &quot;utf-8&quot;, &amp;enc)
        endfor
        if ( a:type == 0 )
            call setqflist(flist)
        else
            call setloclist(nr_helpw, flist)
        endif
    else
        helpgrep a:strg
    endif
endfunc

&quot;コマンド
command! -nargs=1 Jhelpg        call FuncJHelpgrep(&lt;q-args&gt;, 0)
command! -nargs=1 Jlhelpg       call FuncJHelpgrep(&lt;q-args&gt;, 1)</code></pre></noscript></div>

<p>Jhelpgコマンドがhelpgrep、Jlhelpgコマンドがlhelpgrepに相当する。</p>

<pre><code>:Jhelpg 検索文字列
:Jlhelpg 検索文字列
</code></pre>

<p>のように使用する。<code>_vimrc</code>に関数書くと常にロードされるから嫌な場合はautoload関数にすればいい。</p>

<p>QuickFix、ロケーションリストの文字化けは直してあるが、画面下部に表示されるメッセージの文字化けは直してない。</p>

<p>まあそのうちvimが修正されると思うけど。</p>

<hr />

<h4 id="section">追記(2012/01/25)</h4>

<p>vim 7.3.409(2012/01/21 Kaoriya版)で修正を確認(helpgrepで日本語検索可能)</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[vimからSSH/SCP接続してみる]]></title>
    <link href="http://nukino.github.com/blog/2012/01/08/vimSSH/"/>
    <updated>2012-01-08T06:10:00+09:00</updated>
    <id>http://nukino.github.com/blog/2012/01/08/vimSSH</id>
    <content type="html"><![CDATA[<p>ヘルプを探ってるとvimからSSH/SCP接続出来ることを知ったので、試してみた。</p>

<dl>
  <dt>クライアントPC</dt>
  <dd>Windows XP + vim 7.3.393(Kaoriya版)</dd>
  <dt>サーバーPC</dt>
  <dd>Ubuntu 11.10</dd>
</dl>

<p>で確認。「サーバー側にvim入れてSSHクライアント上で動かせば良いんじゃね？」という突っ込みは禁止www</p>

<!-- more -->

<h2 id="pcssh">サーバーPCにSSHサーバをインストール</h2>

<p>サーバーPCのコマンドラインで</p>

<pre class="cmdline"><code>sudo apt-get install ssh
</code></pre>

<p>とする。別にOpen SSHなどでも構わない。</p>

<h2 id="pcssh-1">クライアントPCにSSHクライアントをインストール</h2>

<p>SSHクライアントはPuTTY 0.60 ごった煮版 2007年8月6日版を使用した。</p>

<p>ダウンロードは<a href="http://yebisuya.dip.jp/Software/PuTTY/">PuTTY ごった煮版</a>から行う。</p>

<p><a href="http://www.chiark.greenend.org.uk/~sgtatham/putty/">本家</a>の方がバージョンは新しい。Windows 7で使う
ならこちらの方がいいかも。</p>

<p>インストールする場合にはデフォルトのフォルダではなく<code>C:\PuTTy</code>などの空白を含まないパスにインストール
することを推奨(理由は後述)</p>

<h2 id="myvimrc">$MYVIMRCを編集</h2>

<p>$MYVIMRC(ユーザーvimファイル。一般的には<code>$HOME/_vimrc</code>や<code>$HOME/.vimrc</code>など)を編集し、以下の記述を追
加(sftpは不要かな？)。</p>

<div><script src="https://gist.github.com/1576194.js?file="></script>
<noscript><pre><code>if (has('win32') || has('win64'))
    &quot;use scp
    let g:netrw_scp_cmd     = &quot;E:\\PuTTY\\pscp.exe -q -batch&quot;
    let g:netrw_sftp_cmd    = &quot;E:\\PuTTY\\psftp.exe&quot;
    let g:netrw_ssh_cmd     = &quot;E:\\PuTTY\\plink.exe&quot;
endif</code></pre></noscript></div>

<p>文字列を’”‘(ダブルクォーテーション)で括ってあるのは試してる際にそうすると何故か動き出したからだが、
今試すと”’“(シングルクォーテーション)で括っても動くことが判明したので特に意味無しかも<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>。</p>

<p>実行ファイルのパスに空白が入ってると上手く動かない。(ダブルクォーテーションで括っても駄目。
<code>g:netrw_list_cmd</code>を直接指定すると、最初のファイル一覧は取得できる)</p>

<p>既にPuTTyを空白の入ったフォルダ(<code>C:\Program Files\PuTTy</code>など)にインストールしてしまってる人は</p>

<ol>
  <li>空白の入らないフォルダ(<code>C:\PuTTy</code>など)に再インストール</li>
  <li>PuTTyのあるインストールフォルダにPATHを通して、<code>g:netrw_scp_cmd</code>などに実行ファイル名のみ指定</li>
  <li>空白の入らないフォルダにジャンクション/シンボリックリンクする</li>
  <li>空白の入らないフォルダにPuTTyフォルダの中身をコピーする</li>
</ol>

<p>のうちお好きなのをどうぞ。</p>

<h2 id="ssh">SSH接続を公開鍵認証に変更</h2>

<p>このままだとSCP/SSH接続しようとした際にユーザー名/パスワード入力の部分で止まる(vimからプロンプトが出
ない)。</p>

<p>そこで、公開鍵認証＋pageantでパスワード認証を自動化する(サーバーが1つしかないならplink.exeに-pwオプ
ション付けとくというのでもいいけど)。</p>

<p>具体的な設定方法は<a href="http://www.atmarkit.co.jp/flinux/rensai/buildlamp/lamp_05/05_1.html">公開鍵認証でsshを安全に使う</a>を参照。</p>

<p>上記のサイトを読めばちゃんと書いてあるが、公開鍵をサーバーに設置する際[公開鍵の保存]ボタンで保
存したファイルを使っちゃ駄目です。PuTTy鍵生成ダイアログ上部のテキストを貼り付けませう←ここで少し
嵌まった。</p>

<p>上記サイトでは<code>/etc/ssh/sshd_config</code>の編集方法があまり詳しく載ってないので補完しておくと(大体分かると思うけど)</p>

<p>33行目の”#”を外す</p>

<pre><code>AuthorizedKeysFile      %h/.ssh/authorized_keys
</code></pre>

<p>パスワード認証を無効化するには55行目のコメントを外してyes→no</p>

<pre><code>PasswordAuthentication no
</code></pre>

<p>としてサーバー上で</p>

<pre class="cmdline"><code>/etc/init.d/ssh restart
</code></pre>

<p>とすれば設定が有効化します。</p>

<p>pageantで作った秘密鍵を追加しとくのを忘れずに。</p>

<h2 id="section">使い方</h2>

<p>クライアント上のvimで</p>

<pre><code>:e scp://user@192.168.0.4/
</code></pre>

<p>とかするとサーバーのuserホームディレクトリの内容がダーっと表示されます。scpのパスは</p>

<pre><code>scp://[user@]machine[[:#]port]/path
</code></pre>

<p>と指定できるみたいです。(pathの末尾が”/”だとディレクトリを意味する)<br />
但しpathは指定したuserのホームディレクトリからの相対パスになるので、絶対パスにしたい場合は</p>

<pre><code>:e scp://root@192.168.0.4//etc/ssh/
</code></pre>

<p>とか</p>

<pre><code>:e scp://root@192.168.0.4//etc/ssh/sshd_config
</code></pre>

<p>みたいに先頭に”/”を付けます。</p>

<p>あと詳しい使い方はvimで</p>

<pre><code>:h netrw
</code></pre>

<p>参照。</p>

<h2 id="section-1">感想</h2>

<p>別件でやりたいことがあって調べてた際に見つけて試してみたけど、vimって色んな事が出来ることを再認識。</p>

<p>ディレクトリ移動とかは1回ずつSSH接続しに行くみたいなので、動作はかなりもっさりしている。</p>

<p>サーバーにvimを入れられない環境なら便利かもしれないが、自宅で使う場合はサーバー側にvim入れちゃった方
が速くてスマート。</p>

<hr />

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>実行ファイルのパスに空白が入ってるときは’&#8221;’で括らないと駄目。とかそういうことなのかも<a href="#fnref:1" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopressを試してみる]]></title>
    <link href="http://nukino.github.com/blog/2012/01/06/Octopress/"/>
    <updated>2012-01-06T16:02:00+09:00</updated>
    <id>http://nukino.github.com/blog/2012/01/06/Octopress</id>
    <content type="html"><![CDATA[<p><a href="http://onibibo.blog.eonet.jp/default/2012/01/octopress-5dd4.html">ここ</a>が元ブログのページ</p>

<p>以前</p>

<ul>
  <li><a href="http://onibibo.blog.eonet.jp/default/2011/12/eoblogmarkdown-64cb.html">eoblogをMarkdown記法で書く</a></li>
  <li><a href="http://onibibo.blog.eonet.jp/default/2011/12/eoblogmarkdowns-e804.html">eoblogをMarkdown記法で書く２(SyntaxHighlighter導入)</a></li>
  <li><a href="http://onibibo.blog.eonet.jp/default/2011/12/eoblogmarkdown-2be3.html">eoblogをMarkdown記法で書く３(プレビュー)</a></li>
</ul>

<p>で色々と頑張ってみたけど、運用してると、記事のアップと画像のアップがやっぱり面倒。</p>

<p>これを自動化するのって結構大変(多分自分でhttpのリクエストとか出すようなスクリプトか何か書かない
といけないし)だなと考えてましたが、たまたまvimのMarkdownスクリプト探しに行った際にoctopressというのが
あるのを知ったので、試してみた。</p>

<!-- more -->

<h2 id="section">導入</h2>

<ul>
  <li><a href="http://octopress.org/docs/setup/">Octopress Setup</a></li>
  <li><a href="http://blog.glidenote.com/blog/2011/11/07/install-octopress-on-github/">GithubとOctopressでモダンな技術系ブログを作ってみる</a></li>
</ul>

<p>などを参考にして導入。</p>

<p>但し書いてあるとおり<code>bundle install</code>とすると、システムのgem領域にrubyライブラリがインストールされてしまう
ので、</p>

<pre class="cmdline"><code>cd octopress
bundle install --path=vendor/bundle
</code></pre>

<p>とかすると<code>vendor/bundle</code>内にライブラリがインストールされて、複数のrubyプロジェクトがある場合にライブラリの
バージョン違いとかで嵌まらなくて済むかも。</p>

<p>gem領域を再構築したい場合は</p>

<pre class="cmdline"><code>gem list --local | cut -d" " -f1 | xargs gem uninstall
</code></pre>

<p>として、システムのgem領域に入ってるライブラリを全部アンインストールした後で必要なライブラリ(bundler
等)を<code>gem install</code>すればいい。</p>

<h2 id="section-1">見た目のカスタマイズ</h2>

<p>デフォルトのテーマは文字がでかくてイマイチ気に入らなかったので頑張って修正。</p>

<p><code>octopress/sass</code>内のファイルを編集すればいいみたい。</p>

<p>レイアウト自体はいじらずに専ら色や間隔、フォントなどをグチャグチャと調整してみた。
やってるうちに気付いたが、<code>octopress/sass/custom</code>内のファイルのみ変更するべきだったような気がする。</p>

<p>見た目はかなり希望に近づいたが、コードはなんか機能が分離し切れてないというか構造化がイマイチのような
感じ。まあ拘ってもしょうがないので暇なときに気が向けば修正しようかな？</p>

<p>Octopress本家の更新かけたり、間違えて<code>rake install</code>とかしたときに消えたりしたら悲しいので</p>

<pre class="cmdline"><code>cd octopress
cp -ar .themes/classic/ .themes/nukino
cp -arf sass/ .themes/nukino/
</code></pre>

<p>として新しいテーマを作ってバックアップしておいた。</p>

<h2 id="section-2">運用</h2>

<p>以前の記事にちらっと書いたけど、Windows上で運用すると変な警告出るし、ファイル内に日本語入ってると文
字コードを何にしてもきちんと動かないし･･･で、諦めた(rubyのデフォルト外部エンコーディングをUTF-8に
設定できれば動くかも)</p>

<p>今のところ自PCにcoLinux+Ubuntu 10.04入れてサービス化して、SSH経由で動かしてる(octopressフォルダ自体
はWindows側のファイルをsamba経由でアクセスしてる)</p>

<p>別PCにUbuntu 11.10を入れてSSH経由で動かした場合、previewとかしたときサーバの応答がめっちゃ遅い。</p>

<p>調べてみると、Octopress(正確にはJekyll)が使ってるWEBrickというのが遅いらしい<a href="http://kitbc.s41.xrea.com/main/?ubuntu_network_slow">Ubuntuネットワーク（ssh接続,
webrickサーバー）が遅い</a>に対策が書いてあったの
で、<code>/etc/nsswitch.conf</code>の<code>hosts:</code>行の<code>mdns4</code>を削除したら結構ましになった。</p>

<h3 id="section-3">ユーザーページの管理</h3>

<p><a href="http://tokkonopapa.github.com/blog/2011/12/30/octopress-on-github-and-bitbucket/">Octopressのインストールから運用管理まで</a></p>

<p>を参考に</p>

<ol>
  <li><a href="https://bitbucket.org/">Bitbucket</a>のアカウントを作成(こんなのあるんだ。遅れてるな＞俺)</li>
  <li><a href="https://bitbucket.org/account/">アカウントのページ</a>のSSH Keysに<code>~/.ssh/id_rsa.pub</code>の内容を貼付
&amp;Add Key</li>
  <li><a href="https://bitbucket.org/repo/create">Create new repositry</a>でoctopressを作成(Repositry typeをgitに
する)</li>
  <li>以下のコマンドを打つ</li>
</ol>

<pre class="cmdline"><code>cd octopress
git add .
git commit -m '&lt;message&gt;'
git remote add bitbucket git@bitbucket.org:&lt;username&gt;/octopress.git
git push -u bitbucket source
</code></pre>

<p>&lt;message&gt;は適当に。&lt;username&gt;はBitbucketのアカウント名。</p>

<p>なお、<code>bundle install</code>時にvendor以外のパスを指定した場合は<code>.gitignore</code>にそのパスを入れておかないと
rubyライブラリごとpushされると思う(試してないけど)。</p>

<h3 id="ruby">rubyライブラリのアップデート</h3>

<pre class="cmdline"><code>bundle update
</code></pre>

<p>Bundler 1.1を使ってる＆<code>bundle install</code>時にパスを指定した場合、古くて使ってないライブラリを削除して
くれる。</p>

<p>挙動が変わって嵌まるかもしれないのでバックアップしといた方がいいかも。</p>

<h3 id="section-4">記事作成</h3>

<pre class="cmdline"><code>rake new_post['title']
</code></pre>

<p>なのだが、SSH経由で運用してるため、いちいち打つのが面倒(‘title’に日本語入れたら問題ありそうだし)</p>

<p>別にこのコマンドを打たなくても<code>octopress/source/_posts</code>にファイルを作ったら検出してくれるみたいなので、
以下のようなvimスクリプトを作って運用してみる。</p>

<p><code>$VIMRUNTIME/autoload/myvimrc.vim</code>に以下(12/01/12修正。詳しくは<a href="http://nukino.github.com/blog/2012/01/12/Octopress/">こちら</a>)</p>

<div><script src="https://gist.github.com/1597341.js?file="></script>
<noscript><pre><code>&quot;Octopress 新記事作成
&quot;
&quot;使用するグローバル変数
&quot;  g:octopress_rootdir        octopressルートディレクトリ
&quot;  g:octopress_article_ext    記事の拡張子
&quot;  g:octopress_article_subdir 記事のサブフォルダ。strftime()のパラメータ(%Y等)
&quot;                             使用可能
&quot;
&quot; 2012/01/06  新規作成
&quot; 2012/01/11  category,keywordに初期値を入れた
&quot;             publishedフィールド追加
&quot;             g:octopress_article_subdir追加
&quot;             
func! myvimrc#new_article(title)
  let l:atitle = a:title
  if ( l:atitle == &quot;&quot; )
    let l:atitle = input(&quot;input title:&quot;)
  endif
  let l:time = localtime()
  let l:hantitle = l:atitle
  &quot;Kaoriya 全角→半角関数があるなら使う
  if ( exists( &quot;*ToHankaku&quot; ) )
    let l:hantitle = ToHankaku(l:atitle)
  endif
  &quot; match_characterはKaoriyaのhz_ja.vimより。意味はよく分からん。
  let l:match_character = '\%([ｳｶｷｸｹｺｻｼｽｾｿﾀﾁﾂﾃﾄﾊﾋﾌﾍﾎ]ﾞ\|[ﾊﾋﾌﾍﾎ]ﾟ\|.\)'
  let l:asctitle = &quot;&quot;
  let l:ii = 0
  let l:len = strlen(l:hantitle)
  &quot; titleのファイル名に使える英数字＆記号だけ抜き出す。
  while ( l:ii &lt; l:len )
      let l:char = matchstr(l:hantitle, l:match_character, l:ii)
    &quot;2バイト文字は省く
    if ( l:char =~ '^\f$' &amp;&amp; char2nr(l:char) &lt; 256 )
      let l:asctitle .= l:char
    endif
    let l:ii += strlen(l:char)
  endwhile
  if ( l:asctitle == &quot;&quot; )
    let l:asctitle = &quot;article&quot;
  endif
  let article_dir = get(g:, 'octopress_rootdir', '~/octopress') . '/source/_posts/'  
  let sub_dir = strftime(get(g:, 'octopress_article_subdir', ''), l:time)
  if ( sub_dir != '' )
    if ( finddir( article_dir . sub_dir ) == '' )
      if ( exists( &quot;*mkdir&quot; ) )
        let article_dir .= l:sub_dir
        call mkdir( article_dir, &quot;p&quot; )
      else
        &quot;作れない場合は_postsに置いとく
        echohl ErrorMsg | echomsg 'mkdirをサポートしてません _postに置いておきます' | echohl None
      endif
    else
      let article_dir .= l:sub_dir
    endif
    let last_char = article_dir[strlen(article_dir)-1]
    if ( last_char != '/' &amp;&amp; last_char != '\' )
      let article_dir .= '/'
    endif
  endif

  let article_ext = get(g:, 'octopress_article_ext', 'markdown')

  let l:fbase = strftime(&quot;%Y-%m-%d-&quot;, l:time) . l:asctitle
  let l:fname = article_dir . l:fbase . '.'  . article_ext
  let l:is_create = 1
  if ( findfile(l:fname) != &quot;&quot; )
    let l:ec = tolower(input(&quot;'&quot;.l:fbase.'.'.article_ext.&quot;' is exist create/overwrite/edit [c/w/e]?:&quot;))
    if ( l:ec == &quot;w&quot; )
      call delete(l:fname)
    elseif (l:ec == &quot;c&quot; )
      let l:ii = 0
      while ( 1 )
        let l:ii += 1
        let l:fname = article_dir . l:fbase.'_'.l:ii.'.' . article_ext
        if ( findfile(l:fname) == &quot;&quot; )
          break
        endif
      endwhile
    elseif (l:ec == &quot;e&quot; )
      let l:is_create = 0
    else
      return
    endif
  endif
  if ( l:is_create )
    let l:utf8title = &quot;&quot;
    if ( has('iconv') )
      let l:utf8title = iconv(l:atitle, &amp;enc, &quot;utf-8&quot;)
    else
      let l:utf8title = l:atitle
    endif

    let l:wlines = ['---', 'layout: post']
    let l:wlines += ['title: &quot;' . l:utf8title . '&quot;']
    let l:wlines += ['date: '. strftime(&quot;%Y-%m-%d %H:%M&quot;, l:time)]
    let l:wlines += ['comments: true', 'published: true', 'categories: [cat1, cat2]']
    let l:wlines += ['description: ', 'keywords: key1, key2', '---', '',&quot;&lt;!-- more --&gt;&quot;]

    call writefile( l:wlines, l:fname )
  endif
  if ( l:asctitle == l:atitle )
    &quot;タイトルに日本語が含まれない場合、明示的にutf-8にしてみる
    &quot;タイトルにファイル名に使えない文字が含まれてる場合ここを通らないけど
    augroup au_oct_new
      au BufEnter * setl fenc=utf-8
    augroup END
  endif
  execute &quot;edit&quot; . &quot; ++enc=UTF-8 &quot; . l:fname | &quot;normal G&quot;
  if ( l:asctitle == l:atitle )
    augroup au_oct_new
      autocmd!
    augroup END
  endif
endfunc
</code></pre></noscript></div>

<p><code>_vimrc</code>に以下を追加</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>_vimrc</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="vim"><span class="line">command<span class="p">!</span> <span class="p">-</span>nargs<span class="p">=</span>? OctNewPost <span class="k">call</span> myvimrc#new_article<span class="p">(&lt;</span><span class="k">q</span><span class="p">-</span>args<span class="p">&gt;)</span>
</span><span class="line"><span class="k">let</span> g:octopress_article_ext <span class="p">=</span> <span class="c">&quot;krd&quot;</span>
</span><span class="line"><span class="k">let</span> g:octopress_rootdir <span class="p">=</span> <span class="s1">&#39;~/octopress&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>使い方は</p>

<pre><code>:OctNewPost [title]
</code></pre>

<p>みたいにして使う。titleを省略した場合、入力を求めるように作ってみた。<br />
vimのキーに割り振るなり、ランチャーにコマンド実行オプション付けてvim起動するように登録するなりすればいい(私は後者)</p>

<p>titleには日本語入れても大丈夫。またファイルの文字コードはUTF-8になるように細工してる。</p>

<p>ファイル名は”yyyy-mm-dd-title.ext”みたいになる。ファイル名に全角文字入れたら不味そうな気がする
ので、titleの全角文字は省いたファイル名を作るようにしてみた。</p>

<p>但し、<code>match_character</code>はKaoriya-vimに入ってる<code>hz_ja.vim</code>から頂いたが、イマイチ意味が分かってない。
<code>myvimrc.vim</code>は文字コード(または内部エンコーディング)をshift-jis(cp932)とかにしないと思った通りに
動かなかったりするのかも。</p>

<hr />

<p>Markdown記法のパーサはデフォルトでは<code>rdiscount</code>が使われている。Jekyllのソースコードを見てみると
kramdownも対応してるみたいなので、<code>_config.yml</code>を</p>

<pre title="_config.yml"><code>markdown: kramdown
</code></pre>

<p>に変更して運用。多分他にもmaruku、redcarpetというパーサに対応してるぽい(癖が分からないので試してない)</p>

<p>Vimで拡張子<code>krd</code>の時kramdown用のシンタックスファイル(自作)が有効になるようにしてるので、新規作成時の
拡張子を<code>krd</code>にしてるが、そうするとJekyllがMarkdown形式ファイルだと認識してくれないので<code>_config.yml</code>に</p>

<pre title="_config.yml"><code>markdown_ext: "markdown,mkd,mkdn,md,krd"
</code></pre>

<p>を追加して<code>rake generate</code></p>

<h3 id="section-5">記事のプレビュー</h3>

<pre class="cmdline"><code>cd octopress
rake generate	#必要なとき
rake preview
</code></pre>

<p>ウチの環境ではSSHクライアントから上記コマンドを打つ。ちょっと面倒。</p>

<p>ブラウザで</p>

<pre><code>http://server-ip-address:4000/
</code></pre>

<p>を見ると、プレビュー出来る。記事などを更新して、ブラウザを再読込すると自動的に更新してくれる。
素晴らしい。</p>

<h3 id="section-6">記事の投稿</h3>

<pre class="cmdline"><code>cd octopress
rake generate	#必要なとき
rake deploy
</code></pre>

<p>ウチの環境ではSSHクライアントから上記コマンドを打つ。ちょっと面倒。</p>

<p><code>rake gen_deploy</code>とするとgenerateとdeploy両方してくれるみたい。</p>

<h3 id="section-7">キャッシュの削除</h3>

<pre class="cmdline"><code>rake clean
</code></pre>

<p><code>.pygments-cache</code>、<code>.gist-cache</code>、<code>.sass-cache</code>内のファイルと<code>source/stylesheets/screen.css</code>を削除。</p>

<p>作業してると溜まってくるので定期的に実行するといい･･･のかな？</p>

<h3 id="octopress">Octopressの更新</h3>

<pre class="cmdline"><code>git fetch octopress
git pull octopress master
</code></pre>

<h2 id="section-8">最後に</h2>

<p>環境の構築に手間取ったが、ローカルで色々テスト出来るし、拡張性は無限大だし、運用も快適に出来そうだ
し、でかなり良い感じかも。</p>

<p>ということで、たぶん今後はOctopressに乗り換えると思う</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[vim環境の再構築１(DropBoxでvim設定の共有)]]></title>
    <link href="http://nukino.github.com/blog/2011/12/24/test-post/"/>
    <updated>2011-12-24T05:58:00+09:00</updated>
    <id>http://nukino.github.com/blog/2011/12/24/test-post</id>
    <content type="html"><![CDATA[<p>最近vimでvundleとかpathogenとかでプラグイン管理するのが流行ってるっぽいので、私もやってみたい。<br />
ついでなのでこの機会にvim環境を再構築してみようと計画してみた。</p>

<ol>
  <li>vim設定の共有化</li>
  <li>neobundleでプラグイン管理</li>
  <li>今使ってるプラグインの見直し</li>
  <li>ruby編集環境構築(quickrun、vim-refなど)</li>
</ol>

<p>こんな感じの計画かな？</p>

<!-- more -->
<p>##vim設定の共有化について</p>

<p>使ってるPCでプラグインやその他設定が一致していると便利。</p>

<p>githubでvim設定を共有化するページを幾つか見つけたが、なんとなく同期させるには毎回コマンドを打たない
といけないような気がする。</p>

<p>ものぐさな私はそんな鬱陶しいことやってられないので、今使ってるDropBoxを利用すればDropBoxフォルダに置
いておくだけで、自動的に同期してくれるから便利な気がする。</p>

<p>もちろんSugarSyncなどローカルにあるフォルダを同期してくれるオンラインストレージならなんでもおｋ。</p>

<p>DropBoxでアカウント取りたい場合は<a href="http://db.tt/cZwekOvO">ここ</a>からアカウント作ってくれると嬉しいです
。(招待機能で招待した人された人双方に256MB容量が増える。でもアカウント作ったメアドが私にばれちゃうの
で注意)</p>

<h2 id="vimrcgvimrcdropbox">ユーザvimrc、ユーザgvimrcをDropBoxフォルダで管理</h2>

<p>ユーザvimrc、ユーザgvimrcは私の環境はWindowsなので、<code>$HOME/_vimrc</code>、<code>$HOME/_gvimrc</code>にあります。</p>

<p>これをDropBoxフォルダに置きたい。一番簡単なのは</p>

<pre class="cmdline"><code>SET HOME=%DROPBOX_DIR%
</code></pre>

<p>みたいに$HOMEをDrobBoxフォルダにしてしまうことですが、これは好みではない。</p>

<p>なので、ハードリンクを使おうと思う(Windows 2000以降＆$HOMEとDropBoxフォルダが同じボリューム＆その
ボリュームがNTFSフォーマットの場合使用可能)。  </p>

<p>最近のMac OSやlinuxユーザはハードリンクなりシンボリックリンクなりを使えば可能だと思う(lnコマンドだっ
け？)。<br />
Windows Vista以降ではシンボリックリンクが実装されてるみたいなんで、同一ボリュームの制限はないみたい
(mklinkコマンドを使用？)</p>

<p>私はPPxというファイラでサクッと作ってしまいましたが、持ってない人はコマンドラインを叩けば可。</p>

<p>$HOME/_vimrc、$HOME/_gvimrcをDropBoxフォルダへ移動した上で(不安ならバックアップ取った上で)</p>

<pre class="cmdline"><code>fsutil hardlink create %HOME%\_vimrc %DROPBOX_DIR%\_vimrc
fsutil hardlink create %HOME%\_gvimrc %DROPBOX_DIR%\_gvimrc
</code></pre>

<p>とかすれば出来るんじゃないかと思います。</p>

<p>残念ながらハードリンク or シンボリックリンクを使える条件を満たしてない場合は若干イリーガルだけど、</p>

<pre class="cmdline"><code>SET MYVIMRC=%DROPBOX_DIR%\_vimrc
SET MYGVIMRC=%DROPBOX_DIR%\_gvimrc
SET VIMINIT=:source %MYVIMRC%
SET GVIMINIT=:source %MYGVIMRC%
</code></pre>

<p>とかすればOK(当然コントロールパネル等で上記コマンドに相当する環境変数の設定をやること)</p>

<p>最初ハードリンクがファイルへのリンク貼れるの知らなくて、こっちのイリーガルな方法でやってたんで、動作
は確認済み(ただし私の環境ではMYGVIMRCは環境変数展開じゃ駄目で直接パス打ち込まないと動かなかった)</p>

<p>または$HOME/_vimrcに</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>`$HOME/_vimrc` </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">source expand('$DROPBOX_DIR') . '/_vimrc'</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>とか書いてもおｋ・・・だと思う(試してない)</p>

<h2 id="runtimepath">$RUNTIMEPATHの追加</h2>

<p>$RUNTIMEPATHは以下のように運用しようと思う</p>

<dl>
  <dt>$DROPBOX_DIR/vimfiles</dt>
  <dd>共有するプラグイン、vim設定を入れる</dd>
  <dt>$HOME/vimfiles/</dt>
  <dd>そのパソコン固有の設定を入れる</dd>
  <dt>$HOME/vimfiles/after</dt>
  <dd>そのパソコン固有の設定を入れる。共有設定を上書きしたい場合に利用する</dd>
</dl>

<p>ということでDROPBOX_DIRという環境変数を設定した上で、ユーザvimrcの先頭に以下のように記述する</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>`$HOME/_vimrc` </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">let dropbox_vim=substitute(expand($DROPBOX_DIR), "\\", "/", "g") . '/vimfiles'
</span><span class="line">	let &amp;runtimepath = dropbox_vim . "," . &amp;runtimepath</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>$vimのpluginとかより先にロードされちゃうのが若干気になるが、今のところ特に問題はなさそう。</p>

]]></content>
  </entry>
  
</feed>
