<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: cygwin | Nukino's memorandum]]></title>
  <link href="http://nukino.github.com/blog/categories/cygwin/atom.xml" rel="self"/>
  <link href="http://nukino.github.com/"/>
  <updated>2012-02-04T04:32:38+09:00</updated>
  <id>http://nukino.github.com/</id>
  <author>
    <name><![CDATA[nukino]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Cygwinで日本語manのレイアウト崩れを直す]]></title>
    <link href="http://nukino.github.com/blog/2012/02/04/Cygwinman/"/>
    <updated>2012-02-04T01:55:00+09:00</updated>
    <id>http://nukino.github.com/blog/2012/02/04/Cygwinman</id>
    <content type="html"><![CDATA[<p>Cygwin1.7.9において</p>

<p><code>/etc/man.conf</code>に</p>

<pre><code>JNROFF		/usr/bin/groff -DeucJP -Tutf8 -mandoc
</code></pre>

<p>と記述すれば、日本語manが表示されるが、レイアウトが崩れるので、これを修正しようと試みた</p>

<p>個人的にバージョンダウンとかは嫌いなので、新しいバージョン、新しいツールを導入する方向。</p>

<!-- more -->

<h2 id="groff-121">groff 1.21のインストール</h2>

<p>別マシンにインストールしてあるUbuntu 11.10では日本語manのレイアウト崩れは起こっていない。
そこでgroffのバージョンを確認すると1.21となっていたので、バージョンアップすればいけんじゃね？</p>

<p>ということでインストールしてみた。</p>

<p>手法としては</p>

<ol>
  <li>旧バージョンと共存させる</li>
  <li>新バージョンに完全に置き換える</li>
</ol>

<p>の2つがあると思う。</p>

<p>「倒れるときは前のめり」というモットーの元、私は「2.」で行くことにする(とか何とか言いつつしっかり
<code>C:\Cygwin</code>はバックアップ取っといたけど)</p>

<h3 id="section">インストールの前に</h3>

<p>gcc4、make辺りは必要だと思うので、インストールしてないなら、インストールしておく。</p>

<p>また、新バージョンに置き換える場合はgroffをアンインストールしておく(groff-coreもいらんかも)。</p>

<pre class="cmdline"><code>apt-cyg install gcc4 make
apt-cyg remove groff
</code></pre>

<p>apt-cygを導入してない場合はsetup.exeを使用する。apt-cygの導入方法については<a href="/blog/2012/02/02/Cygwin/#apt-cyg">ここ</a>参照。</p>

<h3 id="section-1">インストール</h3>

<p>Cygwinのパッケージはないので、ソースコードからビルドする。</p>

<pre class="cmdline"><code>wget ftp://ftp.ring.gr.jp/pub/GNU/groff/groff-1.21.tar.gz
tar -zxvf groff-1.21.tar.gz
cd groff-1.21
./configure --prefix=/usr
make
make install
</code></pre>

<p>旧バージョンと共存させる場合は<code>./configure</code>の際のprefixを変える(指定しなければ<code>/usr/local</code>みたい)。
また、<code>/etc/man.conf</code>を編集しておくこと(置き換えの場合は不要)</p>

<p>一応</p>

<pre class="cmdline"><code>which groff
groff --version
</code></pre>

<p>として、きちんとインストールされてるのを確認しておく。</p>

<h3 id="section-2">スクリーンショット</h3>

<p><code>man man</code>としたときの比較</p>

<h4 id="groff-1201">変更前(groff 1.20.1)</h4>

<p><img src="/images/2012/02/03/img00.png" alt="img00" title="変更前 man manスクリーンショット" /></p>

<h4 id="groff-121-1">変更後(groff 1.21)</h4>

<p><img src="/images/2012/02/03/img01.png" alt="img01" title="groff変更後 man manスクリーンショット" /></p>

<p>だいぶましになったが、特に英語と日本語が混じっている行がおかしいのと、インデントの効いていない行があ
る。</p>

<h2 id="man-db">man-dbのインストール</h2>

<p>再びUbuntu 11.10にて、<code>man</code>のバージョンを確認すると2.6.0.2だった。Cygwinのバージョン(1.6g)とだいぶ違う。</p>

<p>Ubuntu 11.10に入ってるmanのパッケージ名は正確にはman-dbというらしい</p>

<p>man-dbは何か設定方法が違うっぽい(<code>/etc/manpath.conf</code>しかない？？)が、設定項目がないと言うことはデ
フォルトで使えるようになってるんだろう。ということで、とりあえずインストールしてみる。</p>

<h3 id="section-3">準備</h3>

<p>まずはmanをアンインストール。あとDBのライブラリが必要なのでインストールする。<a href="http://packages.ubuntu.com/oneiric/man-db">
Ubuntu man-dbの依存関係</a>を見ると、gdbmがいいのかな？
(db4.5でもconfigureまで通るのは確認した)</p>

<pre class="cmdline"><code>apt-cyg remove man
apt-cyg install libgdbm-devel
</code></pre>

<p>また、libpipelineというライブラリがいるみたいだが、Cygwinのパッケージにはない。ググると
<a href="http://fd0.x0.to/cygwin/">http://fd0.x0.to/cygwin/</a>というところにあったので、これを使用する
(いいのかな？)</p>

<pre class="cmdline"><code>apt-cyg -m http://fd0.x0.to/cygwin/ install libpipeline-devel
</code></pre>

<h3 id="section-4">インストール</h3>

<p>man-db 2.6.0.2のソースコードをダウンロード。</p>

<p><a href="http://download.savannah.gnu.org/releases/man-db/man-db-2.6.0.2.tar.gz">http://download.savannah.gnu.org/releases/man-db/man-db-2.6.0.2.tar.gz</a><br />
が公式っぽいので、そこからダウンロードしようとしたけど、出来なかったので、<br />
<a href="http://sourceforge.jp/projects/sfnet_buluoos/downloads/0.3/src/man-db-2.6.0.2.tar.gz/">http://sourceforge.jp/projects/sfnet_buluoos/downloads/0.3/src/man-db-2.6.0.2.tar.gz/</a><br />
からダウンロード。</p>

<pre class="cmdline_noimg"><code>$ cd &lt;man-db-2.6.0.2.tar.gzのあるディレクトリ&gt;
$ tar -zxvf man-db-2.6.0.2.tar.gz
$ PKG_CONFIG=/usr/bin/true \
    libpipeline_CFLAGS='' \
    libpipeline_LIBS='-lpipeline' \
    ./configure --prefix=/usr --libexecdir=/usr/lib \
    --docdir=/usr/share/doc/man-db-2.6.0.2 --sysconfdir=/etc \
    --disable-setuid --with-browser=/usr/bin/lynx \
    --with-vgrind=/usr/bin/vgrind --with-grap=/usr/bin/grap
$ make
$ make install
</code></pre>

<p>DBのライブラリ(ヘッダーなど含む)が複数ある場合はgdbm→db5→db4→･･･の順でヘッダファイルを検索するみたい。
特定したい場合はconfigureで<code>--with-db=db4</code>とか指定すればいいみたい(未確認)。</p>

<p>参考ページによると<code>make check</code>としたらきちんとmakeされてるかどうかを確認できるらしいので、不安なら
<code>make install</code>の前に確認する。</p>

<p>一応</p>

<pre class="cmdline"><code>which man
man --version
</code></pre>

<p>としてインストールを確認。</p>

<dl>
  <dt>参考ページ</dt>
  <dd><a href="http://lfsbookja.sourceforge.jp/7.0.ja/chapter06/man-db.html">http://lfsbookja.sourceforge.jp/7.0.ja/chapter06/man-db.html</a></dd>
</dl>

<h3 id="section-5">スクリーンショット</h3>

<p><code>man man</code>したときのスクリーンショット</p>

<p><img src="/images/2012/02/03/img02.png" alt="img02" title="man-db変更後 man manスクリーンショット" /></p>

<p><strong class="emphasis-soft">びゅーてほー</strong></p>

<p>あと、manのマニュアルがman-dbのものに自動的に切り替わってる。素晴らしい。</p>

<p>設定ファイルは<code>/etc/man_db.conf</code>。全く設定せずに上記の画面が出た。やっぱりこうでなくっちゃ。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[cygwin(mintty)のシェル設定ファイル読み込み順]]></title>
    <link href="http://nukino.github.com/blog/2012/02/02/cygwinmintty/"/>
    <updated>2012-02-02T18:53:00+09:00</updated>
    <id>http://nukino.github.com/blog/2012/02/02/cygwinmintty</id>
    <content type="html"><![CDATA[<p>cygwin+minttyで</p>

<pre><code>C:\cygwin\bin\mintty.exe -i /Cygwin-Terminal.ico -
</code></pre>

<p>とした場合と</p>

<pre><code>C:\cygwin\bin\mintty.exe -i /Cygwin-Terminal.ico
</code></pre>

<p>とした場合(“-“(ハイフン)の有無)で挙動が違う(読み込まれる設定ファイルが違う＆起動速度が違う)ので調べてみた。</p>

<!-- more -->

<h2 id="section">設定ファイルの読み込み順</h2>

<p>挙動の違いは<code>man mintty</code>とすれば記述がある。</p>

<blockquote>
  <p>SYNOPSIS<br />
      mintty [OPTION]… [ - | PROGRAM [ARG]… ]<br />
～～～中略～～～<br />
INVOCATION<br />
      If a program name is supplied on the command line, this is executed
      with any additional arguments given.  Otherwise, mintty looks for a
      shell to execute in the SHELL environment variable.  If that is not
      set, it reads the user’s default shell setting from /etc/passwd.  As a
      last resort, it falls back to /bin/sh.  If a single dash is specified
      instead of a program name, the shell is invoked as a login shell.</p>
</blockquote>

<h3 id="section-1">引数に”-“(ハイフン)を指定した場合→ログインシェルを起動する。</h3>

<p>つまり、</p>

<pre><code>/etc/profile
~/.bash_profile
</code></pre>

<p>の順で読み込まれる(ログインシェルをbashにしてる場合？？)</p>

<p>但しデフォルトで生成される設定ファイルは<br />
<code>/etc/profile</code>内で<code>/etc/bash.bashrc</code><br />
<code>~/.bash_profile</code>内で<code>~/.bash_profile</code><br />
が読み込まれる(source)ので、実際には</p>

<pre><code>/etc/profile
/etc/bash.bashrc
~/.bash_profile
~/.bashrc
</code></pre>

<p>の順で読み込まれるということになる。</p>

<p>細かいことを言うと、ホームディレクトリ内の設定ファイルの検索順は
<a href="http://www.atmarkit.co.jp/flinux/rensai/theory09/theory09b.html">http://www.atmarkit.co.jp/flinux/rensai/theory09/theory09b.html</a>によると</p>

<p><code>~/.bash_profile</code>→<code>~/.bash_login</code>→<code>~/.profile</code><br />
(ファイルが見つかった時点でそのファイルが読み込まれる)</p>

<p>となっているらしい。cygwinでは最初に<code>~/.bash_profile</code>が生成されるので(<code>~/.profile</code>も生成されるけ
ど)、上記のような読み込み順となる。</p>

<h3 id="shell">引数に何も指定しない場合→SHELL環境変数が参照される</h3>

<p>Windows側のSHELL環境変数(システム優先)に<code>/bin/bash</code>と指定してある場合、bashが起動するので</p>

<pre><code>/etc/bash.bashrc
~/.bashrc
</code></pre>

<p>の順で読み込まれる。</p>

<p>Windows側のSHELL環境変数を指定しなかった場合は<code>/etc/passwd</code>を参照し、それでもシェルが不明なら
<code>/bin/sh</code>が起動する(Cygwinのログインシェル決定ルーチンもこんな感じぽい)</p>

<h2 id="section-2">ログインシェル起動したときに遅い</h2>

<p>私の環境では引数に”-“を指定した場合、起動が若干遅い。</p>

<p>各読込ファイルの先頭と<code>~/.bashrc</code>のみ末尾にも<code>date %T.%N</code>を追加して、調べてみると</p>

<table class="simpletbl">
  <tbody>
    <tr>
      <td>引数に”-“を指定した場合</td>
      <td>3214ms</td>
    </tr>
    <tr>
      <td>引数に何も指定しない場合</td>
      <td>390ms</td>
    </tr>
  </tbody>
</table>

<p>となってる(コマンド出力のオーバーヘッドがあるため、実際はもう少し速いと思う)<br />
なお環境はWindows7 SP1+Thinkpad T61p[Core 2 duo T9500]。</p>

<h3 id="section-3">何故遅いか</h3>

<p>何故遅いのか調べてみると<code>/etc/profile</code>のシェルスクリプト読込(source)処理が以下のようになってるみたい</p>

<pre><code>/etc/profile
    /etc/profile.d/*.sh読込･･･
        /etc/profile.d/bash_completion.sh
            /etc/bash_completion
                /etc/bash_completion.d/*読込(*.bak、*.swpなどは除外される)
        /etc/profile.d/lang.sh
        /etc/profile.d/openssl.sh
</code></pre>

<p>このうち<code>/etc/profile.d/bash_completion.sh</code>が遅そう<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>なので、cygwin上で</p>

<pre><code>cd /etc/profile.d
mv bash_completion.sh bash_completion.sh.del
</code></pre>

<p>としてみたらかなり速くなった(1062ms)。</p>

<p>ただしこの場合<code>bash_completion</code>は使えない。</p>

<h3 id="bashcompletion"><code>bash_completion</code>を高速化(必要コマンドのみ使用)</h3>

<p><code>bash_completion</code>はあると結構便利な場合もある(<code>man</code>コマンドの時など)ので、高速化できないかを考えてみ
る。</p>

<p><code>/etc/bash_completion.d</code>の中を見てみると、インストールされてないコマンド(<code>dpkg</code>など)の補完ファイル
がある(<code>/etc/bash_completion</code>ではコマンドが実行可能かどうかは調べてないっぽい。まあ実行可能かどうか
調べるのと、読み込むのとどちらが速いかは微妙なところではあるけど。)ので、</p>

<pre><code>mv /etc/bash_completion.d /etc/bash_completion.d.bak
mkdir /etc/bash_completion.d
</code></pre>

<p>として、必要な補完ファイルのみを<code>/etc/bash_completion.d</code>にコピーする(この場合、
<code>/etc/profile.d/bash_completion.sh</code>の名前は変えない)。</p>

<p>/etcディレクトリをいじくりまわしたくない場合は、<code>~/cygwin/bash_completion.d</code>というディレクトリ
を作って、以下を<code>~/.bashrc</code>に書く(この場合、<code>/etc/profile.d/bash_completion.sh</code>の拡張子を適当に変え
ておく。<code>/etc/bash_completion.d</code>の名前は変えなくていい)</p>

<p><div><script src='https://gist.github.com/1708241.js?file='></script>
<noscript><pre><code>if [[ -z &quot;$BASH_COMPLETION_DIR&quot; &amp;&amp; -f /etc/bash_completion ]]; then
    USER_COMP_DIR=~/cygwin/bash_completion.d
    BASH_COMPLETION_DIR=$USER_COMP_DIR
    BASH_COMPLETION_COMPAT_DIR=$USER_COMP_DIR
    unset USER_COMP_DIR
    . /etc/bash_completion
fi
</code></pre></noscript></div>
</p>

<p><code>bash-biiltins</code>,<code>gcc</code>,<code>gdb</code>,<code>make</code>,<code>man</code>,<code>sh</code>コマンド補完ファイルのみをコピーしたところ最初に比べ
ると、かなり速くなった(1810ms)。</p>

<p>ただ、<code>~/.bashrc</code>を書き換える方法だと引数に何も指定しない場合でも<code>bash_completion</code>が有効になってしま
うので、それが嫌な場合は<code>~/.bash_profile</code>に移動しとく。</p>

<h3 id="bashcompletion-1"><code>bash_completion</code>を更に高速化(コマンド以外の補完機能オフ)</h3>

<p><code>/etc/bash_completion</code>の読込自体が結構遅い。そこで、<code>bash_completion</code>のコ
マンド補完のみ使用するため、<code>/etc/bash_completion</code>の192行目～1201行目(<code>bash_completion</code> ver 1.3の場
合。<code># start of section containing completion functions called by other functions</code>～
<code># start of section containing completion functions for external programs</code>の直前まで)をコピーし、
<code>~/cygwin/bash_completion</code>というファイルを作って貼り付けておく</p>

<p>んで、<code>~/.bashrc</code>に以下を追加する。</p>

<p><div><script src='https://gist.github.com/1708232.js?file='></script>
<noscript><pre><code>[ -n &quot;$USER_COMP_DIR&quot; ] || USER_COMP_DIR=~/cygwin/bash_completion.d
[ -n &quot;$USER_COMP_FILE&quot; ] || USER_COMP_FILE=~/cygwin/bash_completion
if [[ -d $USER_COMP_DIR &amp;&amp; -r $USER_COMP_DIR &amp;&amp; -x $USER_COMP_DIR &amp;&amp; \
    -f $USER_COMP_FILE &amp;&amp; -r $USER_COMP_FILE ]]; then

    # /etc/bash_completionより
    UNAME=$( uname -s )
    # strip OS type and version under Cygwin (e.g. CYGWIN_NT-5.1 =&gt; Cygwin)
    UNAME=${UNAME/CYGWIN_*/Cygwin}

    case ${UNAME} in
        Linux|GNU|GNU/*) USERLAND=GNU ;;
        *) USERLAND=${UNAME} ;;
    esac

    # Turn on extended globbing and programmable completion
    shopt -s extglob progcomp
    #----

    # 関数群を読み込む
    . &quot;$USER_COMP_FILE&quot;
    # USER_COMP_DIRの中身を読み込む
    for i in $(LC_ALL=C command ls &quot;$USER_COMP_DIR&quot;); do
        i=$USER_COMP_DIR/$i
        [[ -f $i &amp;&amp; -r $i ]] &amp;&amp; . &quot;$i&quot;
    done
    unset i

    unset -f have
    unset UNAME USERLAND have
fi
unset USER_COMP_DIR USER_COMP_FILE
</code></pre></noscript></div>
</p>

<p>先ほどと同様に<code>bash-biiltins</code>,<code>gcc</code>,<code>gdb</code>,<code>make</code>,<code>man</code>,<code>sh</code>コマンド補完ファイルのみを
<code>~/cygwin/bash_completion.d</code>にコピーしたところ、更に速くなった(1320ms)。</p>

<p>manコマンドの補完が効くのは確認したが、他は確認してない。他の記述も引っ張ってこないときちんと動かな
かったりするかも。</p>

<p>この方法だと、<code>bash_completion</code>のフル機能が使いたい場合は<code>source /etc/bash_completion</code>とコマンド
を打てばいいと思う(またはエイリアスを設定して、それを打つとか)</p>

<h3 id="section-4">まとめ</h3>

<p>引数に”-“を指定した場合、実行時間は以下のようになる。機能を限定していくほど高速化する(当たり前だけ
ど)</p>

<table class="normaltbl">
  <thead>
    <tr>
      <th style="text-align: left">項目</th>
      <th style="text-align: left">時間</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left"><code>bash_completion</code>フル使用(初期状態)</td>
      <td style="text-align: left">3214ms</td>
    </tr>
    <tr>
      <td style="text-align: left">必要コマンドのみ使用</td>
      <td style="text-align: left">1810ms</td>
    </tr>
    <tr>
      <td style="text-align: left">コマンド以外の補完機能オフ</td>
      <td style="text-align: left">1320ms</td>
    </tr>
  </tbody>
  <tbody>
    <tr>
      <td style="text-align: left"><code>bash_completoin</code>オフ</td>
      <td style="text-align: left">1062ms</td>
    </tr>
  </tbody>
</table>

<p><code>bash_completion</code>が遅いのは、補完機能をスクリプトで実現しようとしているためだと思う。
他のシェルに切り替えるとこんな涙ぐましいコトしなくてもスマートで高速なのかも知れない。</p>

<hr />

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p><code>bash_completion</code>はデフォルトでは入っていない。そういえば<code>git-completion</code>を入れてから遅くなったような気がするので、この時に<code>bash_completion</code>がインストールされたのだと思う。<a href="#fnref:1" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cygwinを導入してみた]]></title>
    <link href="http://nukino.github.com/blog/2012/02/02/Cygwin/"/>
    <updated>2012-02-02T14:33:00+09:00</updated>
    <id>http://nukino.github.com/blog/2012/02/02/Cygwin</id>
    <content type="html"><![CDATA[<p>OSを再インストールしたので、以前使っていたlinux系のツール群(rubyやcurl、gitなど)をどうしようかな？
と考えた結果、Cygwinで統合するのはどうかと考えた。</p>

<p>Cygwin自体は以前何度かインストールしたことがあるが、設定が煩雑で結局思い通りにならなかった(己のス
キルが足りてなかっただけとも言う･･･)ので毛嫌いしていたが、最近のはUTF-8にも対応していて結構簡単
そうという記述を<a href="http://d.hatena.ne.jp/takuya_1st/20111121/1321865738">ここ</a>で見かけたので、
丁度いい機会なので挑戦してみた。</p>

<p>導入したOSはWindows 7 64bit(SP1)。Cygwinのバージョン(<code>cygwin1.dll</code>のバージョン)は1.7.9</p>

<!-- more -->

<h2 id="section">準備</h2>

<p>この手のツール使う際には常識かもしれないが、ホスト名やユーザ名に日本語は含んでいない方がいい。<br />
もし含んでいるなら、変更することを推奨する。</p>

<h3 id="section-1">環境変数の設定</h3>

<p>必要ならば、以下の環境変数を設定しておく。</p>

<p><div><script src='https://gist.github.com/1710407.js?file='></script>
<noscript><pre><code>rem CygwinシンボリックリンクをWindowsショートカットにする場合コメントアウト
rem setx CYGWIN winsymlinks
rem makeの動作モード
setx MAKE_MODE unix</code></pre></noscript></div>
</p>

<p>なお、Windows Vista以降では<code>setx</code>コマンドでシステムのプロパティにある環境変数を追加、編集、削除でき
るので、このファイルをダウンロードして実行するだけでおｋ(コマンドプロンプトで打ってもいいけど)。</p>

<p>Windows XPは標準で入ってないが、Windows XP CD/DVDの<code>\Support\SUPTOOLS.MSI</code>をインストールすれば導入で
きる。コマンドの詳細は<a href="http://www.atmarkit.co.jp/fwin2k/win2ktips/1003setx/setx.html">http://www.atmarkit.co.jp/fwin2k/win2ktips/1003setx/setx.html</a>参照。</p>

<p>このコマンドかなり便利だと思うけど、他のページではあまり触れられてないね。</p>

<p><code>MAKE_MODE</code>環境変数はmakeするときに<code>cmd.exe</code>を使用するか<code>/bin/sh</code>を参照するかを指定する。</p>

<p><code>SH_OPTS</code>環境変数に<code>igncr</code>を指定すると、シェルスクリプトの改行コードがCR+LFでも動く。<code>~/.bashrc</code>など
に指定した場合、関連付けなどでCygwin外から実行した際には<code>~/.bashrc</code>は読み込まれないので、
エラーになる。環境変数に指定しておくと、必ず有効になる。<br />
テキストファイルの改行コードをLFに統一してるような人には勿論不要。</p>

<p><code>CYGWIN</code>環境変数に<code>winsymlinks</code>を指定すると、Cygwinで作成するシンボリックリンクをショートカットとし
て利用することが可能(Cygwin 1.5系と同様らしい)。</p>

<p>ただし<a href="http://cygwin.com/cygwin-ug-net/using-cygwinenv.html">The CYGWIN environment variable</a>にある
ようにこれを指定すると速度が遅くなるらしい。個人的にはショートカットではなくWindowsのジャンクション/
シンボリックリンクを使って欲しいので、設定していない</p>

<p>なお他のページで<code>ntsec</code>や<code>smbntsec</code>などを設定するような記述があるが、Cygwin 1.7系では既に廃止されて
いるので、旧版(Cygwin 1.5系??)と共存させるなどの目的がないなら設定する必要はない
(設定しても不都合はなさそうだが。)</p>

<p>また、SHELLやHOME環境変数の設定も特にこだわりがないなら不要。セットアップ時に<code>/etc/passwd</code>が作られ、
その中でデフォルトのSHELL(/bin/bash)、HOME(/home/ユーザー名)が設定されている為。</p>

<dl>
  <dt>その他参考ページ</dt>
  <dd><a href="http://www.oki-osk.jp/esc/cyg/cygwin-23.html">Cygwin 1.7.5</a></dd>
  <dd><a href="http://news.mynavi.jp/special/2002/cygwin/004.html">Windowsユーザーへ贈るUnixへの架け橋</a></dd>
</dl>

<h2 id="cygwin">Cygwinのインストール</h2>

<p><a href="http://www.cygwin.com/">Cygwin本家</a>から<code>setup.exe</code>をダウンロードして実行。試したsetup.exeのバージョ
ンは2.763、cygwin1.dllのバージョンは1.7.9(2011-03-29)。</p>

<p>セットアップ自体は簡単。</p>

<ol>
  <li>“Install from Internet”を選択</li>
  <li>Cygwinのインストールディレクトリは<code>C:\Cygwin</code>など</li>
  <li>Local Package Directoryは<code>C:\Cygwin\package</code>など</li>
  <li>Download siteは”ftp://ftp.jaist.ac.jp”を選択(近くのサーバーを選択すればいい)</li>
  <li>インストールするパッケージは必要なら後でインストールすればいいので、適当でいいが、wgetはインストール
しておくこと(後で<code>apt-cyg</code>を使うときに必要。)。bzip2とgawkも必要だが、恐らくデフォルトでインストール
する設定になっているはず。</li>
</ol>

<p>あとは放っておけばいい。昔インストールしたときはISDNだったなー。2～3時間くらいセットアップに時間かかっ
たような気がするけど、今は光だから10分程度で終わる。</p>

<h2 id="section-2">初期設定</h2>

<h3 id="home">シェル環境設定ファイルとHOME環境変数について</h3>

<p>セットアップが出来たら、Cygwinを起動する。</p>

<p>ホームディレクトリはデフォルトでは<code>/home/Windowsユーザ名</code>(<code>C:\Cygwin\home\Windowsユーザ名</code>)で、ディ
レクトリがない場合は自動的に作成され、シェル環境設定ファイルが作成される(Cygwin 1.7.9の場合、
<code>.bash_profile</code>,<code>.bashrc</code>,<code>.inputrc</code>,<code>.profile</code>の4つのファイル)</p>

<p>しかし、既にHOME環境変数を設定していて、既にそのディレクトリが存在する場合、シェル環境設定ファイル
が作られないという問題がある。</p>

<p>デフォルトのシェル環境設定ファイルは<code>/etc/skell</code>にあるので、これをホームディレクトリにコピーする。
(Cygwinで以下のコマンドを実行。上書きされると困るかもしれないので’-i’オプション付けてある)</p>

<pre class="cmdline"><code>cp -i /etc/skel/.* ~/
</code></pre>

<p>また発生条件がイマイチ定かではないが、独自のHOME環境変数(<code>e:\user</code>など)を設定しているとCygwin上の
<code>cd ~</code>が、<code>cd /home/$USER</code>と解釈される場合がある。</p>

<p>そのため<code>~/.bashrc</code>に以下を追加しておく。</p>

<pre><code>export HOME=/cygdrive/e/user
</code></pre>

<p>これを設定してからはそういう不思議な症状にならなくなったような気がする。</p>

<h3 id="mintty">minttyの設定(言語設定)</h3>

<p>現在(Cygwin 1.7.9)のデフォルトのターミナルエミュレータはminttyといわれるPuttyベースのターミナルであ
る。特にこだわりがないなら、これを使うことを推奨する。</p>

<p>何はともあれ言語(ロケール)設定を行う。</p>

<p><img src="/images/2012/02/01/img00.png" alt="img00" title="LANG設定" /></p>

<p>上記のように設定して、Cygwin(mintty)を再起動し、<code>echo $LANG</code>とコマンドを打って以下のようになればOK</p>

<p><img src="/images/2012/02/01/img01.png" alt="img01" title="LANG設定確認" /></p>

<p>詳しくは<code>man mintty</code>とすれば記述があるが、ロケールを設定することで、Cygwin上のLANG環境変数を上書きし
てくれる。恐らくCygwin上のシェルが起動する前に設定してくれると思うので、シェルの挙動なども変更される
筈(~/.bashrcで設定するのとは違う)。</p>

<p>但しLANG環境変数を設定することによって<code>date</code>コマンドなどの出力形式が変わる。これにより動作しない
スクリプトなどがあるかもしれない。</p>

<p>より安全に行くなら、mintty上のロケール設定をデフォルトに戻し、コマンドプロンプトで</p>

<pre class="cmdline"><code>setx LC_CTYPE ja_JP.UTF-8
</code></pre>

<p>として、文字列処理のみを日本語対応にするという手もあるが、私はグローバルな環境変数は極力いじりたくな
いし、メッセージも日本語化されないし、ということでロケールを考慮してないスクリプトなど無視する（ぉぃ。</p>

<p>あと、minttyのフォントや透過設定(Transparency)などを設定すれば、見た目がかっちょよくなる。</p>

<p><img src="/images/2012/02/01/img02.png" alt="img02" title="スクリーンショット" /></p>

<h2 id="bin">ユーザbinディレクトリの作成とパス設定</h2>

<p>ユーザーbinディレクトリを作成してパスを設定しておく。</p>

<p>Cygwinのコマンドラインで</p>

<pre class="cmdline"><code>mkdir ~/cygwin/bin
</code></pre>

<p>として、<code>~/.bashrc</code>に以下を追加</p>

<p><div><script src='https://gist.github.com/1714785.js?file='></script>
<noscript><pre><code>if [ -d &quot;${HOME}/cygwin/bin&quot; ] ; then
  PATH=&quot;${HOME}/cygwin/bin:${PATH}&quot;
fi
</code></pre></noscript></div>
</p>

<p>普通は<code>~/bin</code>でいいんだが、ウチはHOME環境変数設定して、データファイルは全てそこにぶち込んでいるた
め、Cygwinとそれ以外で区別したいので<code>~/cygwin</code>にCygwin系のファイルを置いてる。まあHOMEのルートが
結構カオスになってきたけど。</p>

<p>んで、設定を有効化(Cygwin再起動でもいいけど)</p>

<pre class="cmdline"><code>source ~/.bashrc
</code></pre>

<h2 id="apt-cyg">apt-cyg導入</h2>

<p>Cygwinでは追加のパッケージをインストールするときにはsetup.exeを使用しなくてはいけないが、apt-cygをイ
ンストールすることで、コマンドライン上でパッケージをインストールできる。まあlinuxのaptみたいなもの。</p>

<p>かなり便利。</p>

<pre class="cmdline"><code>wget http://apt-cyg.googlecode.com/svn/trunk/apt-cyg
mv apt-cyg ~/cygwin/bin
chmod +x ~/cygwin/bin/apt-cyg
</code></pre>

<h3 id="section-3">使い方</h3>

<dl>
  <dt>検索</dt>
  <dd>apt-cyg find パッケージ名</dd>
  <dt>インストール</dt>
  <dd>apt-cyg install パッケージ名</dd>
  <dt>アンインストール</dt>
  <dd>apt-cyg remove パッケージ名</dd>
  <dt>指定したパッケージの記述を取得(バージョン確認したい時など)</dt>
  <dd>apt-cyg describe パッケージ名</dd>
</dl>

<p>デフォルトのミラーサイトは<code>ftp://mirror.mcs.anl.gov/pub/cygwin</code>でちと遠くて遅いので、
<code>~/.bashrc</code>に以下を追加。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>~/.bashrc  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">alias </span>apt-cyg<span class="o">=</span>’apt-cyg -m ftp://ftp.jaist.ac.jp/pub/cygwin/ -c /package’
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><code>/etc/setup/last-cache</code>や<code>/etc/setup/last-mirror</code>があればそれを読み込むみたいだから、エイリアスにし
なくてもいいような気もするけど。</p>

<h3 id="section-4">ちょっと修正</h3>

<p>このスクリプトは大文字・小文字を区別するみたい。検索するときは大文字・小文字を区別しない方が嬉しいの
で、apt-cygを以下のように修正する</p>

<p><div><script src='https://gist.github.com/1718936.js?file='></script>
<noscript><pre><code>--- apt-cyg	2010-04-28 03:55:43.000000000 +0900
+++ ~/cygwin/bin/apt-cyg	2012-01-24 07:24:17.433141300 +0900
@@ -242,11 +242,11 @@ case &quot;$command&quot; in
     do
       echo &quot;&quot;
       echo Searching for installed packages matching $pkg:
-      awk '/[^ ]+ [^ ]+ 0/ {if ($1 ~ query) print $1}' query=&quot;$pkg&quot; /etc/setup/installed.db
+      awk -v IGNORECASE=1 '/[^ ]+ [^ ]+ 0/ {if ($1 ~ query) print $1}' query=&quot;$pkg&quot; /etc/setup/installed.db
       echo &quot;&quot;
       echo Searching for installable packages matching $pkg:
-      cat setup.ini | awk -v query=&quot;$pkg&quot; \
+      cat setup.ini | awk -v query=&quot;$pkg&quot; -v IGNORECASE=1 \
         'BEGIN{RS=&quot;\n\n@ &quot;; FS=&quot;\n&quot;; ORS=&quot;\n&quot;} {if ($1 ~ query) {print $1}}'
     done
 
   ;;</code></pre></noscript></div>
</p>

<p>patch,curlコマンドがあるなら(インストールは<code>apt-cyg install patch curl</code>)、
以下のようにすればパッチを当てられる</p>

<pre class="cmdline"><code>cd ~/cygwin/bin
curl https://raw.github.com/gist/1718936 &gt; apt-cyg.diff
patch &lt; apt-cyg.diff
</code></pre>

<p>動くのを確認したら<code>apt-cyg.diff</code>と<code>apt-cyg.orig</code>は削除していい。</p>

<h2 id="windowsgvim">WindowsのgVimで編集するシェルスクリプト</h2>

<p>Cygwin上でファイル編集するときにWindows上のgVimを利用するようにしてみた。</p>

<p>新規ファイル指定時にパーミッションが000になるみたいなので、umask設定に従って設定し直している(要bcコマンド)</p>

<p><div><script src='https://gist.github.com/1720551.js?file='></script>
<noscript><pre><code>#!/bin/bash
if [[ $# = 1 &amp;&amp; ! -f $1 ]]; then
    #改行コードunix 同期実行
    gvim -c &quot;setl ff=unix&quot; `cygpath -w $1`
    #ファイルが存在するならパーミッション設定
    if [ -f $1 ]; then
        #umaskの結果を参照する場合(要bcコマンド)
        um=`umask`
        perm=`echo &quot;ibase=8; obase=8; 666 - $um&quot; | bc`
        chmod $perm &quot;$1&quot;
        #bcコマンドを使わない場合(固定)
        #chmod 644 &quot;$1&quot;
    fi
else
    #既存ファイルまたは複数ファイル指定の場合、非同期とする
    gvim `cygpath -w $*  | awk '{printf $0&quot; &quot;}'` &amp;
fi
#gvim -c &quot;setl ff=unix fenc=utf-8&quot; `cygpath -w $*` &amp;</code></pre></noscript></div>
</p>

<p>導入はこんな感じ</p>

<pre class="cmdline"><code>apt-cyg install bc
cd ~/cygwin/bin
curl https://raw.github.com/gist/1720551 &gt; wvi
chmod +x wvi
</code></pre>

<p>gVimにパス通ってること前提なので、パスを通したくない場合はgVimの場所を書いておく</p>

<p>使い方は</p>

<pre class="cmdline"><code>wvi ~/.bashrc
</code></pre>

<p>とかって編集するファイルを指定する(複数指定可なんだけど、複数指定してgVim終了時にCygwinターミナルに
ゴミが混入する)</p>

<h2 id="man">日本語man導入</h2>

<p>日本語manがあるとコマンドの雰囲気が分かりやすいので、導入してみる。<br />
以下のコマンドを実行。</p>

<p>但し、ダウンロードするファイル(以下の例だと20120115)は最新のものを
<a href="http://linuxjm.sourceforge.jp/download.html">http://linuxjm.sourceforge.jp/download.html</a>で確認し、ダウンロードする。</p>

<pre class="cmdline"><code>apt-cyg install perl lv make
wget http://linuxjm.sourceforge.jp/man-pages-ja-20120115.tar.gz
tar -zxvf man-pages-ja*
cd man-pages-ja*
</code></pre>

<p>続いて以下のコマンド</p>

<pre class="cmdline"><code>groups `whoami`
make config
</code></pre>

<p>多分こんな感じで設定していけばいいと思う。</p>

<p><img src="/images/2012/02/01/img04.png" alt="img04" title="make config 1" /></p>

<p><img src="/images/2012/02/01/img05.png" alt="img05" title="make config 2" /></p>

<p>続いてインストール</p>

<pre class="cmdline"><code>make install
</code></pre>

<p><code>man.conf</code>の<code>JNROFF</code>の行(99行目？)を以下のように変更</p>

<pre><code>JNROFF		/usr/bin/groff -DeucJP -Tutf8 -mandoc
</code></pre>

<p>一応これで導入完了。試しに<code>man man</code>してみると、以下のようになる。</p>

<p><img src="/images/2012/02/01/img06.png" alt="img06" title="man manスクリーンショット" /></p>

<p>インデントがガタガタだが、とりあえず表示は出来た。これを直すのはまた後で考える。<br />
(02/04追記。修正してみた。詳しくは<a href="/blog/2012/02/04/Cygwinman/">こちらの記事</a>を参照)</p>

<p>あと日本語manは情報が古い場合がある為、オリジナルmanを参照する必要があるかもしれないので、
<code>~/.bashrc</code>に以下を追加</p>

<p><div><script src='https://gist.github.com/1722000.js?file='></script>
<noscript><pre><code>#英語のmanページを表示
alias eman='LANG=en_US LC_ALL=en_US /usr/bin/man' 
</code></pre></noscript></div>
</p>

<p>これでman→存在すれば日本語man、eman→オリジナルmanとなる。</p>

<p>jman→日本語man、man→オリジナルmanというエイリアス設定よりこちらの方が私は好き。</p>

<h2 id="tips">ちょっとしたTips</h2>

<h3 id="ls">ls時の色を変える</h3>

<p>デフォルトの<code>ls --color=auto</code>の設定が気に入らない場合、それを変更できる。</p>

<pre class="cmdline"><code>cp /etc/DIR_COLORS ~/cygwin/.dircolors
</code></pre>

<p>として、<code>~/cygwin/.dircolors</code>を編集。あと<code>~/.bashrc</code>に以下を追加</p>

<p><div><script src='https://gist.github.com/1722119.js?file='></script>
<noscript><pre><code>if [ -x /usr/bin/dircolors ]; then
    test -r ~/cygwin/.dircolors &amp;&amp; eval &quot;$(dircolors -b ~/cygwin/.dircolors)&quot; || eval &quot;$(dircolors -b)&quot;
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'
    alias ls='ls -hF --color=auto'                 # classify files in colour
    alias dir='ls --color=auto --format=vertical'
    alias vdir='ls --color=auto --format=long'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi
</code></pre></noscript></div>
</p>

<p>基本的にUbuntuの<code>~/.bashrc</code>から引っ張ってきたので、grepとかの色分け設定も入ってる。</p>

<p>ディレクトリ→緑、実行可能ファイル→マゼンダ、アーカイブファイル→黄色の設定がWindowsファイラーの設
定で見慣れてるので、そのように設定。他の項目の色と重なる場合は適当に重複しないように修正した。</p>

<p><img src="/images/2012/02/01/img07.png" alt="img07" title="ls スクリーンショット" /></p>

<h3 id="bashvi">bashをviモードに</h3>

<p><code>~/.bashrc</code>に</p>

<pre><code>set -o vi
</code></pre>

<p>を追加することで、bashの編集モードをviモードにすることが出来る。</p>

<p>ddやDで行削除出来るのが便利。wやbで単語間移動できるのも便利。</p>

<p>だが挿入モードかノーマルモードかが分からん。カーソル変えるとかプロンプト変えるとか何とかならないか調
べてみたが、よく分からない。</p>

<h3 id="mintty-1">mintty起動時の初期ディレクトリを指定するには</h3>

<p>ファイラーとかの連携で、ホームディレクトリ以外のフォルダを指定してminttyが起動できると嬉しい。</p>

<p>コマンドラインパラメータに</p>

<pre><code>C:\cygwin\bin\mintty.exe -i /Cygwin-Terminal.ico
</code></pre>

<p>とかって指定し(デスクトップとかに置かれるショートカットのリンク先から末尾の”-“を取る)、作業フォル
ダー(ファイラーやランチャーによってはカレントディレクトリとか初期フォルダとか名称が違うと思う)に
mintty起動時の初期ディレクトリを指定すればOK。</p>

<p>ショートカット作成で例を取ると</p>

<p><img src="/images/2012/02/01/img03.png" alt="img03" title="ショートカット作成" width="350" /></p>

<p>ただし、引数に”-“を指定するのと、指定しないのは微妙に挙動が異なる。詳しくは<a href="/blog/2012/02/02/cygwinmintty/">別稿</a>に譲る</p>

]]></content>
  </entry>
  
</feed>
