<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Octopress | Nukino's memorandum]]></title>
  <link href="http://nukino.github.com/blog/categories/octopress/atom.xml" rel="self"/>
  <link href="http://nukino.github.com/"/>
  <updated>2012-01-12T08:19:48+09:00</updated>
  <id>http://nukino.github.com/</id>
  <author>
    <name><![CDATA[nukino]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Octopress記事作成スクリプトを修正してみた]]></title>
    <link href="http://nukino.github.com/blog/2012/01/12/Octopress/"/>
    <updated>2012-01-12T00:19:00+09:00</updated>
    <id>http://nukino.github.com/blog/2012/01/12/Octopress</id>
    <content type="html"><![CDATA[<p>以前<a href="http://nukino.github.com/blog/2012/01/06/Octopress/">Octopressを試してみる</a>で、Octopress記事作
成スクリプトを掲示したが、これを変更してみた。</p>

<p>変更点は</p>

<ol>
  <li>サブディレクトリの指定</li>
  <li>YAML Front Matterに published:の追加</li>
  <li>YAML Front Matterのcategories:、keywords:に初期値追加</li>
  <li>続きを読む(<code>&lt;!-- more --&gt;</code>)の追加</li>
</ol>

<!-- more -->

<h2 id="section">変更点の説明</h2>

<h3 id="section-1">サブディレクトリの指定</h3>

<p><code>octopress_dir/source/_post</code>にサブディレクトリを作ってもちゃんと記事を認識してくれるみたい。</p>

<p>月毎にディレクトリ作っておいた方が管理が楽そうなので、それに対応させるように
<code>g:octopress_article_subdir</code>変数を追加。</p>

<pre><code>let g:octopress_article_subdir = '%Y-%m'
</code></pre>

<p>のように指定。文字列には strftime()で使用できる書式指定コードを指定可能。</p>

<p>Kaoriya版なら、VC2010なので<a href="http://msdn.microsoft.com/ja-jp/library/fe06s4ak.aspx">Visual Studio 2010のstrftime()</a>を参照。</p>

<p>gccでコンパイルされてるなら<a href="http://linuxjm.sourceforge.jp/html/LDP_man-pages/man3/strftime.3.html">Manpage of strftime</a>になるのかな？</p>

<p>サブフォルダが存在しない場合は自動的に作られる(vimのmkdir()が存在すれば)。また’%Y/%m’のように複数階
層になっても動くはず。</p>

<h3 id="published-">:published の追加</h3>

<p>下書き機能ってないのかな？と<a href="http://octopress.org/docs/blogging/">Octopress Document-Blogging Basics</a>を見てるとYAML Front Matterに<code>published: false</code>と指定すれば良い
ことが分かった。</p>

<p>その時わざわざ追加するのもうざいので、記事の先頭部分に<code>published:</code>を追加するようにしてみた(初期値はtrue)</p>

<h3 id="categorieskeywords">categories:、keywords:に初期値追加</h3>

<p>いつも「書式どうだったっけ？」と思うので、<code>categories:</code>と<code>keywords:</code>にダミー初期値を出力するようにし
てみた。</p>

<p>鬱陶しいならソースを修正しといてください</p>

<h3 id="more---">続きを読む<code>&lt;!-- more --&gt;</code>の追加</h3>

<p>記事中に<code>&lt;!-- more --&gt;</code>があると「続きを読む」リンクが表示される。</p>

<p>毎回打つのも面倒なので、末尾に追加するようにしてみた。</p>

<p>なお表記はデフォルトでは「Read on →」となるが、これを変更したい場合<code>_config.yml</code>の</p>

<pre><code>excerpt_link: "Read on &amp;rarr;"  # "Continue reading" link text at the bottom of excerpted articles
</code></pre>

<p>を変更すればよい。</p>

<h2 id="section-2">ソースコード</h2>

<p><div><script src='https://gist.github.com/1597341.js?file='></script>
<noscript><pre><code>&quot;Octopress 新記事作成
&quot;
&quot;使用するグローバル変数
&quot;  g:octopress_rootdir        octopressルートディレクトリ
&quot;  g:octopress_article_ext    記事の拡張子
&quot;  g:octopress_article_subdir 記事のサブフォルダ。strftime()のパラメータ(%Y等)
&quot;                             使用可能
&quot;
&quot; 2012/01/06  新規作成
&quot; 2012/01/11  category,keywordに初期値を入れた
&quot;             publishedフィールド追加
&quot;             g:octopress_article_subdir追加
&quot;             
func! myvimrc#new_article(title)
  let l:atitle = a:title
  if ( l:atitle == &quot;&quot; )
    let l:atitle = input(&quot;input title:&quot;)
  endif
  let l:time = localtime()
  let l:hantitle = l:atitle
  &quot;Kaoriya 全角→半角関数があるなら使う
  if ( exists( &quot;*ToHankaku&quot; ) )
    let l:hantitle = ToHankaku(l:atitle)
  endif
  &quot; match_characterはKaoriyaのhz_ja.vimより。意味はよく分からん。
  let l:match_character = '\%([ｳｶｷｸｹｺｻｼｽｾｿﾀﾁﾂﾃﾄﾊﾋﾌﾍﾎ]ﾞ\|[ﾊﾋﾌﾍﾎ]ﾟ\|.\)'
  let l:asctitle = &quot;&quot;
  let l:ii = 0
  let l:len = strlen(l:hantitle)
  &quot; titleのファイル名に使える英数字＆記号だけ抜き出す。
  while ( l:ii &lt; l:len )
      let l:char = matchstr(l:hantitle, l:match_character, l:ii)
    &quot;2バイト文字は省く
    if ( l:char =~ '^\f$' &amp;&amp; char2nr(l:char) &lt; 256 )
      let l:asctitle .= l:char
    endif
    let l:ii += strlen(l:char)
  endwhile
  if ( l:asctitle == &quot;&quot; )
    let l:asctitle = &quot;article&quot;
  endif
  let article_dir = get(g:, 'octopress_rootdir', '~/octopress') . '/source/_posts/'  
  let sub_dir = strftime(get(g:, 'octopress_article_subdir', ''), l:time)
  if ( sub_dir != '' )
    if ( finddir( article_dir . sub_dir ) == '' )
      if ( exists( &quot;*mkdir&quot; ) )
        let article_dir .= l:sub_dir
        call mkdir( article_dir, &quot;p&quot; )
      else
        &quot;作れない場合は_postsに置いとく
        echohl ErrorMsg | echomsg 'mkdirをサポートしてません _postに置いておきます' | echohl None
      endif
    else
      let article_dir .= l:sub_dir
    endif
    let last_char = article_dir[strlen(article_dir)-1]
    if ( last_char != '/' &amp;&amp; last_char != '\' )
      let article_dir .= '/'
    endif
  endif

  let article_ext = get(g:, 'octopress_article_ext', 'markdown')

  let l:fbase = strftime(&quot;%Y-%m-%d-&quot;, l:time) . l:asctitle
  let l:fname = article_dir . l:fbase . '.'  . article_ext
  let l:is_create = 1
  if ( findfile(l:fname) != &quot;&quot; )
    let l:ec = tolower(input(&quot;'&quot;.l:fbase.'.'.article_ext.&quot;' is exist create/overwrite/edit [c/w/e]?:&quot;))
    if ( l:ec == &quot;w&quot; )
      call delete(l:fname)
    elseif (l:ec == &quot;c&quot; )
      let l:ii = 0
      while ( 1 )
        let l:ii += 1
        let l:fname = article_dir . l:fbase.'_'.l:ii.'.' . article_ext
        if ( findfile(l:fname) == &quot;&quot; )
          break
        endif
      endwhile
    elseif (l:ec == &quot;e&quot; )
      let l:is_create = 0
    else
      return
    endif
  endif
  if ( l:is_create )
    let l:utf8title = &quot;&quot;
    if ( has('iconv') )
      let l:utf8title = iconv(l:atitle, &amp;enc, &quot;utf-8&quot;)
    else
      let l:utf8title = l:atitle
    endif

    let l:wlines = ['---', 'layout: post']
    let l:wlines += ['title: &quot;' . l:utf8title . '&quot;']
    let l:wlines += ['date: '. strftime(&quot;%Y-%m-%d %H:%M&quot;, l:time)]
    let l:wlines += ['comments: true', 'published: true', 'categories: [cat1, cat2]']
    let l:wlines += ['description: ', 'keywords: key1, key2', '---', '',&quot;&lt;!-- more --&gt;&quot;]

    call writefile( l:wlines, l:fname )
  endif
  if ( l:asctitle == l:atitle )
    &quot;タイトルに日本語が含まれない場合、明示的にutf-8にしてみる
    &quot;タイトルにファイル名に使えない文字が含まれてる場合ここを通らないけど
    augroup au_oct_new
      au BufEnter * setl fenc=utf-8
    augroup END
  endif
  execute &quot;edit&quot; . &quot; ++enc=UTF-8 &quot; . l:fname | &quot;normal G&quot;
  if ( l:asctitle == l:atitle )
    augroup au_oct_new
      autocmd!
    augroup END
  endif
endfunc
</code></pre></noscript></div>
</p>

<p>そのうちプラグインにするかも。</p>

]]></content>
  </entry>
  
</feed>
