<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: octopress | Nukino's memorandum]]></title>
  <link href="http://nukino.github.com/blog/categories/octopress/atom.xml" rel="self"/>
  <link href="http://nukino.github.com/"/>
  <updated>2012-01-27T17:15:50+09:00</updated>
  <id>http://nukino.github.com/</id>
  <author>
    <name><![CDATA[nukino]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Gist.vimの導入とヘルパースクリプトの作成]]></title>
    <link href="http://nukino.github.com/blog/2012/01/16/gist_vim/"/>
    <updated>2012-01-16T11:11:00+09:00</updated>
    <id>http://nukino.github.com/blog/2012/01/16/gist_vim</id>
    <content type="html"><![CDATA[<p>Octopressで記事を書くにあたってGistにコード貼ったり、それをVim上で管理できるGist.vimを導入したんです
が、その際に少し嵌まったのでその解決法と使ってる内にもう少し便利にしたいな―。という欲求がフツフツと
沸いてきたので、vimスクリプトを書いてみた。</p>

<p>環境はWindows XP(SP3)+vim 7.3.393(Kaoriya版)。</p>

<!-- more -->

<h2 id="gistvim">Gist.vimの導入</h2>

<h3 id="curl">cURLのダウンロードとインストール</h3>

<p>Windows系の場合、まずはcURLは標準で入ってないのでダウンロードする必要がある。
(linux系なら多分最初から入ってる。Macも最近のなら入ってるのかな？)</p>

<p><a href="http://curl.haxx.se/download.html">cURL-Download</a></p>

<p>よりダウンロード。cygwinは使ってないので、</p>

<pre><code>Win32 - Generic
|   Win32 2000/XP   7.23.1  binary  SSL enabled         Gunter Knauf    1.33 MB
</code></pre>

<p>をダウンロードしてみた。インストーラは付いてないので解凍して</p>

<pre><code>curl.exe
libcurl.dll
libeay32.dll
libssl32.dll
</code></pre>

<p>の4ファイルをパスの通ったフォルダにコピー(または解凍したフォルダにパスを通す)すればおｋ。</p>

<h3 id="gistvim-1">Gist.vimのインストール</h3>

<p>通常のvimプラグインと一緒。</p>

<ul>
  <li><a href="http://www.vim.org/scripts/script.php?script_id=2423">Gist.vim - vim online</a></li>
  <li><a href="https://github.com/mattn/gist-vim">Gist.vim - GitHub</a></li>
</ul>

<p>のどちらかからダウンロード＆解凍して、<code>$VIMRUNTIME</code>にコピーすればいい。</p>

<p>vimプラグイン管理を使ってるなら<code>$MYVIMRC</code>に</p>

<pre><code>NeoBundle 'mattn/gist-vim'
</code></pre>

<p>とか書いてインストール(<code>:NeoBundleInstall</code>)すればいい(使ってる管理プラグインによって$MYVIMRCの書き方
やExコマンドは違う。ここではNeoBundleの例)</p>

<h3 id="section">設定</h3>

<p><code>$MYVIMRC</code>に以下を記述</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>$MYVIMRC(ex.vimrc)  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'>    <span class="k">let</span> g:github_user <span class="p">=</span> &amp;<span class="k">lt</span>;input your username&amp;gt;
</span><span class='line'>    <span class="k">let</span> g:github_token <span class="p">=</span> &amp;<span class="k">lt</span>;input your token&amp;gt;
</span><span class='line'>    <span class="k">let</span> g:gist_curl_options <span class="p">=</span> “<span class="p">-</span><span class="k">k</span>”
</span><span class='line'>    <span class="k">let</span> g:gist_detect_filetype <span class="p">=</span> <span class="m">1</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><code>g:github_user</code>や<code>g:github_token</code>を設定しておくとgitコマンドが動かないので若干高速化する(筈)。</p>

<p>ちなみに<code>g:github_token</code>は<a href="https://github.com/account/admin">Github→Account Setting→Account Admin</a>の以下の部分を参照すれば良い。</p>

<p><img src="/images/2012/01/15/img00.png" alt="API Token" width="350" /></p>

<p><code>g:gist_curl_options</code>を指定しないとGist.vimが動かなかったので調べて、同じコマンドをコマンドラインか
ら打ってみると</p>

<pre><code>curl: (60) SSL certificate problem, verify that the CA cert is OK. Details:
error:14090086:SSL routines:SSL3_GET_SERVER_CERTIFICATE:certificate verify failed
More details here: http://curl.haxx.se/docs/sslcerts.html

curl performs SSL certificate verification by default, using a "bundle"
 of Certificate Authority (CA) public keys (CA certs). If the default
 bundle file isn't adequate, you can specify an alternate file
 using the --cacert option.
If this HTTPS server uses a certificate signed by a CA represented in
 the bundle, the certificate verification probably failed due to a
 problem with the certificate (it might be expired, or the name might
 not match the domain name in the URL).
If you'd like to turn off curl's verification of the certificate, use
 the -k (or --insecure) option.
</code></pre>

<p>てな表示が出た。SSL証明書の確認が出来ないので、確認を無視するには’-k’オプション指定してね。と書いて
あると見て、とりあえず<code>g:gist_curl_options</code>に<code>-k</code>を指定してみた。</p>

<p>なんか臭いものに蓋をしただけのような気もする。正しい解決策を誰か教えて。</p>

<h2 id="gistvim-2">Gist.vimの(基本的な)使い方</h2>

<h3 id="post">投稿(Post)</h3>

<pre><code>:Gist [-P|-p]
</code></pre>

<p><code>-p</code>を付けるとprivate、<code>-P</code>を付けるとpublicで投稿される。何も付けないと<code>g:gist_private</code>の値に従う。
(デフォルトはpublic)</p>

<p>範囲指定可能なので</p>

<pre><code>:6,20Gist
</code></pre>

<p>とすると、6行目から20行目までを投稿できる。</p>

<p>通常はVisual modeで選択した後”:”を入力すると自動的に選択範囲が範囲指定されるので、それを使う。</p>

<p>他にも<code>-m</code>を付けたら現在開いてるバッファ分の複数ファイルのgistを作成できたり、<code>-a</code>を付けると
anonymous投稿出来たりするみたいだが、使ったことはない。</p>

<h3 id="section-1">一覧取得</h3>

<pre><code>:Gist -l [user]
</code></pre>

<p>でgist一覧を取得できる。userを指定しない場合は自分となる。</p>

<pre><code>:Gist -la
</code></pre>

<p>で自分のpublicとprivate全てのgist一覧を取得できる。</p>

<h3 id="section-2">編集</h3>

<p>一覧取得したバッファで[Enter]を押すかまたは</p>

<pre><code>:Gist gist-id
</code></pre>

<p>とgist-idを指定したコマンドを実行すればgist編集バッファで編集が出来る</p>

<h3 id="section-3">更新</h3>

<p>gist編集バッファ内で</p>

<pre><code>:w[rite]
</code></pre>

<p>または</p>

<pre><code>:Gist -e
</code></pre>

<p>とすると編集バッファの内容を更新できる。</p>

<h3 id="section-4">削除</h3>

<p>間違えて投稿してしまった場合、gist編集バッファ内で</p>

<pre><code>:Gist -d
</code></pre>

<p>とすると、編集しているgist-idが削除される。</p>

<pre><code>:Gist -d gist-id
</code></pre>

<p>みたいにgist-idを指定して削除とかは出来ないみたい。(誤操作防止のため？？)</p>

<h3 id="description">説明(description)指定</h3>

<p>投稿、更新コマンド時に</p>

<pre><code>:Gist -s ほげほげ
:Gist -e -s ほげほげ
</code></pre>

<p>と<code>-s &lt;description&gt;</code>とすると説明(description)を指定できる。説明を指定しておくと、一覧表示の際の画面
が</p>

<p><img src="/images/2012/01/15/img01.png" alt="一覧画面" /></p>

<p>のように説明が表示されて、管理がしやすいように思う。</p>

<p>また</p>

<pre><code>:Gist -s 2012/01/16 15:33
</code></pre>

<p>みたいに空白を入れると上手く動かない。空白の後ろ部分(先の例だと15:33)が説明となる。
gistの制限でそうしてあるのか単純にGist.vimのバグかまでは調べてない。全角スペースなら問題ないので、区
切りが欲しい場合は全角スペースで区切ると良い。</p>

<h2 id="gistvim-3">Gist.vimヘルパースクリプト</h2>

<p>毎回-sオプション付けて説明指定するのは面倒なので、それを自動的に付けてしまおう。
というスクリプトを書いてみた。</p>

<p>導入が若干面倒なので、プラグインにしてしまった方が良いような気もする。<br />
まあ要望があれば考えると言うことで・・・。</p>

<h3 id="section-5">インストール</h3>

<p><a href="https://gist.github.com/1606832">ここ</a>からファイルをダウンロードして、
<code>$VIMRUNTIME/autoload/gist_vim_helper.vim</code>に保存。</p>

<p><code>$MYVIMRC</code>に以下を追加</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>$MYVIMRC(ex.vimrc)  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'>    command<span class="p">!</span> <span class="p">-</span>nargs<span class="p">=</span>? <span class="p">-</span>range<span class="p">=</span>% GHPostGist <span class="k">call</span> gist_vim_helper#post_cmd<span class="p">(&lt;</span>count<span class="p">&gt;,</span> <span class="p">&lt;</span>line1<span class="p">&gt;,</span> <span class="p">&lt;</span>line2<span class="p">&gt;,</span> <span class="p">&lt;</span><span class="k">f</span><span class="p">-</span>args<span class="p">&gt;)</span>
</span><span class='line'>    command<span class="p">!</span> <span class="p">-</span>nargs<span class="p">=</span>? <span class="p">-</span>range<span class="p">=</span>% GHEditGist <span class="k">call</span> gist_vim_helper#edit_cmd<span class="p">(&lt;</span>count<span class="p">&gt;,</span> <span class="p">&lt;</span>line1<span class="p">&gt;,</span> <span class="p">&lt;</span>line2<span class="p">&gt;,</span> <span class="p">&lt;</span><span class="k">f</span><span class="p">-</span>args<span class="p">&gt;)</span>
</span><span class='line'>    command<span class="p">!</span> <span class="p">-</span>nargs<span class="p">=</span>? <span class="p">-</span>range<span class="p">=</span>% GHAutoGist <span class="k">call</span> gist_vim_helper#auto_cmd<span class="p">(&lt;</span>count<span class="p">&gt;,</span> <span class="p">&lt;</span>line1<span class="p">&gt;,</span> <span class="p">&lt;</span>line2<span class="p">&gt;,</span> <span class="p">&lt;</span><span class="k">f</span><span class="p">-</span>args<span class="p">&gt;)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></f-args></line2></line1></count></f-args></line2></line1></count></f-args></line2></line1></count></p>

<h3 id="section-6">使い方</h3>

<h4 id="section-7">投稿</h4>

<pre><code>:GHPostGist [is_private]
</code></pre>

<p>が<code>:Gist -P</code>または<code>:Gist -p</code>コマンドの代替コマンド。<code>g:gist_vim_helper_new_desc</code>変数に従った説明を付
加する。<code>is_private</code>が1なら<code>:Gist -p</code>、0なら<code>:Gist -P</code>、省略時は<code>:Gist</code>コマンドが発行される。</p>

<p><code>g:gist_vim_helper_new_desc</code>に指定できるフォーマットは</p>

<dl>
  <dt>%Y,%m,%dなど</dt>
  <dd><code>strftmime()</code>関数で指定可能な日付時刻指定子</dd>
  <dt>$f</dt>
  <dd>投稿するファイル名</dd>
  <dt>$d</dt>
  <dd>ユーザー記述。毎回入力を求められる。</dd>
</dl>

<p>です。先ほど述べたようにスペースを入れないように注意！</p>

<h4 id="section-8">更新</h4>

<pre><code>:GHEditGist [is_private] [is_close]
</code></pre>

<p>が<code>:Gist -e</code>コマンドの代替。<code>is_private</code>は指定しても無意味。将来的にGist.vimがprivate→publicとかに対応す
るかもしれないので、付けてある。<code>is_close</code>に1を指定すると更新が成功したらgist編集バッファを閉じる。
<code>g:gist_vim_helper_edit_desc</code>変数に従った説明を付ける。</p>

<p><code>g:gist_vim_helper_edit_desc</code>に指定できるフォーマットは<code>g:gist_vim_helper_edit_desc</code>と同様。</p>

<p>ただし<code>$d</code>を指定した際は入力求める際の初期値が現在の説明になってるので、不要な部分を適宜削除する必要
がある。</p>

<h4 id="section-9">投稿または更新を自動判別</h4>

<pre><code>:GHAutoGist [is_private] [is_close]
</code></pre>

<p>はgist編集バッファ内で実行すると<code>:GHEditGist [is_private] [is_close]</code>コマンド、それ以外のバッファで
実行すると、<code>:GHPostGist [is_private]</code>コマンドを実行する。</p>

<p>結構便利。</p>

<h3 id="section-10">設定例</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>$MYVIMRC(ex.vimrc)  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'>    <span class="k">let</span> g:gist_vim_helper_new_desc  <span class="p">=</span> “[%Y%<span class="k">m</span>%<span class="k">d</span><span class="p">-</span>%H%M]$<span class="k">f</span>/$<span class="k">d</span>”
</span><span class='line'>    “説明に作成日時を付加する
</span><span class='line'>    <span class="k">let</span> g:gist_vim_helper_edit_desc <span class="p">=</span> “”
</span><span class='line'>    “説明に更新日時を付加する場合コメントアウト
</span><span class='line'>    “<span class="k">let</span> g:gist_vim_helper_edit_desc <span class="p">=</span> “[%Y%<span class="k">m</span>%<span class="k">d</span><span class="p">-</span>%H%M]$<span class="k">f</span><span class="sr">/$d”&lt;/</span><span class="k">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="k">pre</span><span class="p">&gt;&lt;</span>code<span class="p">&gt;</span><span class="nb">noremap</span> &amp;<span class="k">lt</span>;<span class="k">silent</span>&amp;gt;&amp;<span class="k">lt</span>;Space&amp;gt;<span class="nb">gp</span> :GHPostGist <span class="m">0</span>&amp;<span class="k">lt</span>;CR&amp;gt;
</span><span class='line'><span class="nb">noremap</span> &amp;<span class="k">lt</span>;<span class="k">silent</span>&amp;gt;&amp;<span class="k">lt</span>;Space&amp;gt;ge :GHEditGist <span class="m">0</span> <span class="m">0</span>&amp;<span class="k">lt</span>;CR&amp;gt;
</span><span class='line'><span class="nb">noremap</span> &amp;<span class="k">lt</span>;<span class="k">silent</span>&amp;gt;&amp;<span class="k">lt</span>;Space&amp;gt;ga :GHAutoGist <span class="m">0</span> <span class="m">1</span>&amp;<span class="k">lt</span>;CR&amp;gt;
</span><span class='line'>nnoremap &amp;<span class="k">lt</span>;Space&amp;gt;gl        :&amp;<span class="k">lt</span>;C<span class="p">-</span><span class="k">u</span>&amp;gt;echo <span class="c">&quot;please wait...&quot;&amp;lt;CR&amp;gt; :Gist -l&amp;lt;CR&amp;gt;</span>
</span><span class='line'>nnoremap &amp;<span class="k">lt</span>;Space&amp;gt;gdel      :&amp;<span class="k">lt</span>;C<span class="p">-</span><span class="k">u</span>&amp;gt;Gist <span class="p">-</span><span class="k">d</span>&amp;<span class="k">lt</span>;CR&amp;gt; :<span class="k">close</span>&amp;<span class="k">lt</span>;CR&amp;gt;
</span></code></pre></td></tr></table></div></figure></notextile></div>
</code></pre>

<p>キー定義は適当に変更する。<code>&lt;Space&gt;gl</code>、<code>&lt;Space&gt;gdel</code>はおまけ。</p>

<h3 id="gistvim-4">Gist.vimの修正(必要ならば)</h3>

<p><code>g:gist_vim_helper_edit_desc</code>に値を設定した場合、<code>:GHEditGist</code>(または<code>:GHAutoGist</code>)コマンド
で更新すると説明が更新されるが、</p>

<pre><code>:w[rite]
</code></pre>

<p>とすると、説明が更新されない。それが気に入らない人は<code>$VIMRUNTIME/autoload/gist.vim</code>の<code>s:GistWrite()</code>
関数(319行目くらい？)を以下のように変更する。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>gist.vim  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'>    function! s:GistWrite(fname)
</span><span class='line'>      if substitute(a:fname, ‘\’, ‘/’, ‘g’) == expand(“%:p:gs@\@/@”)
</span><span class='line'>—     Gist -e
</span><span class='line'><span class="gi">+++     1,1call gist_vim_helper#edit(0,0)</span>
</span><span class='line'>      else
</span><span class='line'>        exe “w”.(v:cmdbang ? “!” : “”) fnameescape(v:cmdarg) fnameescape(a:fname)
</span><span class='line'>        silent! exe “file” fnameescape(a:fname)
</span><span class='line'>        silent! au! BufWriteCmd &lt;buffer&gt;
</span><span class='line'>      endif
</span><span class='line'>    endfunction
</span></code></pre></td></tr></table></div></figure></notextile></div></buffer></p>

<p>追加する部分は</p>

<pre><code>call gist_vim_helper#edit_cmd(-1, 1, 1, 0, 0)
</code></pre>

<p>でもいいかもしれない。</p>

<h2 id="octopressgist-tag">Octopressで使用する場合にGist Tagを貼り付ける</h2>

<p><code>:Gist </code>コマンドで記事をポストすると<code>g:gist_put_url_to_clipboard_after_post</code>が1の時、</p>

<pre><code>https://gist.github.com/1606832
</code></pre>

<p>のようなURL(‘1606832’の部分はGist-ID)がクリップボードに貼り付けられる。またOctopressには</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (gist-tag)</span> <a href='/downloads/code/2012-01/14/gist-tag'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="p">{</span><span class="o">%</span> <span class="nx">gist</span> <span class="nx">gist_id</span> <span class="p">[</span><span class="nx">filename</span><span class="p">]</span> <span class="o">%</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>と記事に書けばGistコードをページに貼り付けてくれる”Gist Tag”という便利なプラグインが存在する。</p>

<p>ということでクリップボードから貼り付けて、ちょっと変更加えればGistコードをページに埋め込むことが出来
る･･･んだけど、数回やっただけで面倒くさくなってきた(スペースの有無とか間違えて、Octopress Document
見に行ったりしてるし)。</p>

<p>ということで変換して貼り付けてくれるvimスクリプトを書いてみた。</p>

<p><div><script src='https://gist.github.com/1606941.js?file='></script>
<noscript><pre><code>func! s:paste_gist_tag()
  let mx = 'http[s]\?://gist.github.com/\([0-9]\+\)'
  &quot; +または&quot;レジスタの中身を検索する
  let regs = [@+,@&quot;]
  for r in regs
    let mlist = matchlist(r, mx)
    if ( len(mlist) &gt; 2 )
      &quot;カーソル行の前の行先頭に挿入する
      exe &quot;normal! O\&lt;C-W&gt;{% gist &quot; . mlist[1] . &quot; %}&quot;
      return
    endif
  endif
endfunc

&quot;コマンド
command! -nargs=0 PasteGist     call &lt;SID&gt;paste_gist_tag()</code></pre></noscript></div>
</p>

<p>上記コードを$MYVIMRC(または<code>$VIMRUNTIME/ftplugin/markdown</code>とか)に貼り付ければ、vim上で</p>

<pre><code>:PasteGist
</code></pre>

<p>とExコマンド打てば、カーソル行にGist Tagが貼り付けられる(クリップボードにGistのURLがないと駄目)。</p>

<p>カーソル行の後に貼り付けるようにしたいのなら9行目の<code>normal O{</code>→<code>normal o{</code>とかにすればおｋ。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress記事作成スクリプトを修正してみた]]></title>
    <link href="http://nukino.github.com/blog/2012/01/12/Octopress/"/>
    <updated>2012-01-12T00:19:00+09:00</updated>
    <id>http://nukino.github.com/blog/2012/01/12/Octopress</id>
    <content type="html"><![CDATA[<p>以前<a href="http://nukino.github.com/blog/2012/01/06/Octopress/">Octopressを試してみる</a>で、Octopress記事作
成スクリプトを掲示したが、これを変更してみた。</p>

<p>変更点は</p>

<ol>
  <li>サブディレクトリの指定</li>
  <li>YAML Front Matterに published:の追加</li>
  <li>YAML Front Matterのcategories:、keywords:に初期値追加</li>
  <li>続きを読む(<code>&lt;!-- more --&gt;</code>)の追加</li>
</ol>

<!-- more -->

<h2 id="section">変更点の説明</h2>

<h3 id="section-1">サブディレクトリの指定</h3>

<p><code>octopress_dir/source/_post</code>にサブディレクトリを作ってもちゃんと記事を認識してくれるみたい。</p>

<p>月毎にディレクトリ作っておいた方が管理が楽そうなので、それに対応させるように
<code>g:octopress_article_subdir</code>変数を追加。</p>

<pre><code>let g:octopress_article_subdir = '%Y-%m'
</code></pre>

<p>のように指定。文字列には strftime()で使用できる書式指定コードを指定可能。</p>

<p>Kaoriya版なら、VC2010なので<a href="http://msdn.microsoft.com/ja-jp/library/fe06s4ak.aspx">Visual Studio 2010のstrftime()</a>を参照。</p>

<p>gccでコンパイルされてるなら<a href="http://linuxjm.sourceforge.jp/html/LDP_man-pages/man3/strftime.3.html">Manpage of strftime</a>になるのかな？</p>

<p>サブフォルダが存在しない場合は自動的に作られる(vimのmkdir()が存在すれば)。また’%Y/%m’のように複数階
層になっても動くはず。</p>

<h3 id="published-">:published の追加</h3>

<p>下書き機能ってないのかな？と<a href="http://octopress.org/docs/blogging/">Octopress Document-Blogging Basics</a>を見てるとYAML Front Matterに<code>published: false</code>と指定すれば良い
ことが分かった。</p>

<p>その時わざわざ追加するのもうざいので、記事の先頭部分に<code>published:</code>を追加するようにしてみた(初期値はtrue)</p>

<h3 id="categorieskeywords">categories:、keywords:に初期値追加</h3>

<p>いつも「書式どうだったっけ？」と思うので、<code>categories:</code>と<code>keywords:</code>にダミー初期値を出力するようにし
てみた。</p>

<p>鬱陶しいならソースを修正しといてください</p>

<h3 id="more---">続きを読む<code>&lt;!-- more --&gt;</code>の追加</h3>

<p>記事中に<code>&lt;!-- more --&gt;</code>があると「続きを読む」リンクが表示される。</p>

<p>毎回打つのも面倒なので、末尾に追加するようにしてみた。</p>

<p>なお表記はデフォルトでは「Read on →」となるが、これを変更したい場合<code>_config.yml</code>の</p>

<pre><code>excerpt_link: "Read on &amp;rarr;"  # "Continue reading" link text at the bottom of excerpted articles
</code></pre>

<p>を変更すればよい。</p>

<h2 id="section-2">ソースコード</h2>

<p><code>$VIMRUNTIME/autoload/myvimrc.vim</code>に以下を追加</p>

<p><div><script src='https://gist.github.com/1597341.js?file='></script>
<noscript><pre><code>&quot;Octopress 新記事作成
&quot;
&quot;使用するグローバル変数
&quot;  g:octopress_rootdir        octopressルートディレクトリ
&quot;  g:octopress_article_ext    記事の拡張子
&quot;  g:octopress_article_subdir 記事のサブフォルダ。strftime()のパラメータ(%Y等)
&quot;                             使用可能
&quot;
&quot; 2012/01/06  新規作成
&quot; 2012/01/11  category,keywordに初期値を入れた
&quot;             publishedフィールド追加
&quot;             g:octopress_article_subdir追加
&quot;             
func! myvimrc#new_article(title)
  let l:atitle = a:title
  if ( l:atitle == &quot;&quot; )
    let l:atitle = input(&quot;input title:&quot;)
  endif
  let l:time = localtime()
  let l:hantitle = l:atitle
  &quot;Kaoriya 全角→半角関数があるなら使う
  if ( exists( &quot;*ToHankaku&quot; ) )
    let l:hantitle = ToHankaku(l:atitle)
  endif
  &quot; match_characterはKaoriyaのhz_ja.vimより。意味はよく分からん。
  let l:match_character = '\%([ｳｶｷｸｹｺｻｼｽｾｿﾀﾁﾂﾃﾄﾊﾋﾌﾍﾎ]ﾞ\|[ﾊﾋﾌﾍﾎ]ﾟ\|.\)'
  let l:asctitle = &quot;&quot;
  let l:ii = 0
  let l:len = strlen(l:hantitle)
  &quot; titleのファイル名に使える英数字＆記号だけ抜き出す。
  while ( l:ii &lt; l:len )
      let l:char = matchstr(l:hantitle, l:match_character, l:ii)
    &quot;2バイト文字は省く
    if ( l:char =~ '^\f$' &amp;&amp; char2nr(l:char) &lt; 256 )
      let l:asctitle .= l:char
    endif
    let l:ii += strlen(l:char)
  endwhile
  if ( l:asctitle == &quot;&quot; )
    let l:asctitle = &quot;article&quot;
  endif
  let article_dir = get(g:, 'octopress_rootdir', '~/octopress') . '/source/_posts/'  
  let sub_dir = strftime(get(g:, 'octopress_article_subdir', ''), l:time)
  if ( sub_dir != '' )
    if ( finddir( article_dir . sub_dir ) == '' )
      if ( exists( &quot;*mkdir&quot; ) )
        let article_dir .= l:sub_dir
        call mkdir( article_dir, &quot;p&quot; )
      else
        &quot;作れない場合は_postsに置いとく
        echohl ErrorMsg | echomsg 'mkdirをサポートしてません _postに置いておきます' | echohl None
      endif
    else
      let article_dir .= l:sub_dir
    endif
    let last_char = article_dir[strlen(article_dir)-1]
    if ( last_char != '/' &amp;&amp; last_char != '\' )
      let article_dir .= '/'
    endif
  endif

  let article_ext = get(g:, 'octopress_article_ext', 'markdown')

  let l:fbase = strftime(&quot;%Y-%m-%d-&quot;, l:time) . l:asctitle
  let l:fname = article_dir . l:fbase . '.'  . article_ext
  let l:is_create = 1
  if ( findfile(l:fname) != &quot;&quot; )
    let l:ec = tolower(input(&quot;'&quot;.l:fbase.'.'.article_ext.&quot;' is exist create/overwrite/edit [c/w/e]?:&quot;))
    if ( l:ec == &quot;w&quot; )
      call delete(l:fname)
    elseif (l:ec == &quot;c&quot; )
      let l:ii = 0
      while ( 1 )
        let l:ii += 1
        let l:fname = article_dir . l:fbase.'_'.l:ii.'.' . article_ext
        if ( findfile(l:fname) == &quot;&quot; )
          break
        endif
      endwhile
    elseif (l:ec == &quot;e&quot; )
      let l:is_create = 0
    else
      return
    endif
  endif
  if ( l:is_create )
    let l:utf8title = &quot;&quot;
    if ( has('iconv') )
      let l:utf8title = iconv(l:atitle, &amp;enc, &quot;utf-8&quot;)
    else
      let l:utf8title = l:atitle
    endif

    let l:wlines = ['---', 'layout: post']
    let l:wlines += ['title: &quot;' . l:utf8title . '&quot;']
    let l:wlines += ['date: '. strftime(&quot;%Y-%m-%d %H:%M&quot;, l:time)]
    let l:wlines += ['comments: true', 'published: true', 'categories: [cat1, cat2]']
    let l:wlines += ['description: ', 'keywords: key1, key2', '---', '',&quot;&lt;!-- more --&gt;&quot;]

    call writefile( l:wlines, l:fname )
  endif
  if ( l:asctitle == l:atitle )
    &quot;タイトルに日本語が含まれない場合、明示的にutf-8にしてみる
    &quot;タイトルにファイル名に使えない文字が含まれてる場合ここを通らないけど
    augroup au_oct_new
      au BufEnter * setl fenc=utf-8
    augroup END
  endif
  execute &quot;edit&quot; . &quot; ++enc=UTF-8 &quot; . l:fname | &quot;normal G&quot;
  if ( l:asctitle == l:atitle )
    augroup au_oct_new
      autocmd!
    augroup END
  endif
endfunc
</code></pre></noscript></div>
</p>

<p><code>$MYVIMRC</code>に以下を追加</p>

<p><code>vim _vimrc
command! -nargs=? OctNewPost call myvimrc#new_article(&lt;q-args&gt;)
"設定サンプル
let g:octopress_article_ext = "krd"
let g:octopress_rootdir = expand('$OCTOPRESS_DIR')
let g:octopress_article_subdir = '%Y-%m'
</code></p>

<p>そのうちプラグインにするかも。</p>

<h2 id="section-3">実行と出力サンプル</h2>

<p>今日の日付が2012/01/12で上記設定サンプルが有効な場合にvim上で</p>

<pre><code>:OctNewPost Octopressを試してみる
</code></pre>

<p>などとして実行すると<code>$OCTOPRESS_DIR/source/_post/2012-01/2012-01-12-Octopress.krd</code>
ができる</p>

<h2 id="yaml-2012-01-12-octopresskrd">``` yaml 2012-01-12-Octopress.krd</h2>
<p>layout: post
title: “Octopressを試してみる”
date: 2012-01-12 09:08
comments: true
published: true
categories: [cat1, cat2]
description: 
keywords: key1, key2
—</p>

<!-- more -->

<p>```</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopressを試してみる]]></title>
    <link href="http://nukino.github.com/blog/2012/01/06/Octopress/"/>
    <updated>2012-01-06T16:02:00+09:00</updated>
    <id>http://nukino.github.com/blog/2012/01/06/Octopress</id>
    <content type="html"><![CDATA[<p><a href="http://onibibo.blog.eonet.jp/default/2012/01/octopress-5dd4.html">ここ</a>が元ブログのページ</p>

<p>以前</p>

<ul>
  <li><a href="http://onibibo.blog.eonet.jp/default/2011/12/eoblogmarkdown-64cb.html">eoblogをMarkdown記法で書く</a></li>
  <li><a href="http://onibibo.blog.eonet.jp/default/2011/12/eoblogmarkdowns-e804.html">eoblogをMarkdown記法で書く２(SyntaxHighlighter導入)</a></li>
  <li><a href="http://onibibo.blog.eonet.jp/default/2011/12/eoblogmarkdown-2be3.html">eoblogをMarkdown記法で書く３(プレビュー)</a></li>
</ul>

<p>で色々と頑張ってみたけど、運用してると、記事のアップと画像のアップがやっぱり面倒。</p>

<p>これを自動化するのって結構大変(多分自分でhttpのリクエストとか出すようなスクリプトか何か書かない
といけないし)だなと考えてましたが、たまたまvimのMarkdownスクリプト探しに行った際にoctopressというのが
あるのを知ったので、試してみた。</p>

<!-- more -->

<h2 id="section">導入</h2>

<ul>
  <li><a href="http://octopress.org/docs/setup/">Octopress Setup</a></li>
  <li><a href="http://blog.glidenote.com/blog/2011/11/07/install-octopress-on-github/">GithubとOctopressでモダンな技術系ブログを作ってみる</a></li>
</ul>

<p>などを参考にして導入。</p>

<p>但し書いてあるとおり<code>bundle install</code>とすると、システムのgem領域にrubyライブラリがインストールされてしまう
ので、</p>

<pre><code>cd octopress
bundle install --path=vendor/bundle
</code></pre>

<p>とかすると<code>vendor/bundle</code>内にライブラリがインストールされて、複数のrubyプロジェクトがある場合にライブラリの
バージョン違いとかで嵌まらなくて済むかも。</p>

<p>gem領域を再構築したい場合は</p>

<pre><code>gem list --local | cut -d" " -f1 | xargs gem uninstall
</code></pre>

<p>として、システムのgem領域に入ってるライブラリを全部アンインストールした後で必要なライブラリ(bundler
等)を<code>gem install</code>すればいい。</p>

<h2 id="section-1">見た目のカスタマイズ</h2>

<p>デフォルトのテーマは文字がでかくてイマイチ気に入らなかったので頑張って修正。</p>

<p><code>octopress/sass</code>内のファイルを編集すればいいみたい。</p>

<p>レイアウト自体はいじらずに専ら色や間隔、フォントなどをグチャグチャと調整してみた。
やってるうちに気付いたが、<code>octopress/sass/custom</code>内のファイルのみ変更するべきだったような気がする。</p>

<p>見た目はかなり希望に近づいたが、コードはなんか機能が分離し切れてないというか構造化がイマイチのような
感じ。まあ拘ってもしょうがないので暇なときに気が向けば修正しようかな？</p>

<p>Octopress本家の更新かけたり、間違えて<code>rake install</code>とかしたときに消えたりしたら悲しいので</p>

<pre><code>cd octopress
cp -ar .themes/classic/ .themes/nukino
cp -arf sass/ .themes/nukino/
</code></pre>

<p>として新しいテーマを作ってバックアップしておいた。</p>

<h2 id="section-2">運用</h2>

<p>以前の記事にちらっと書いたけど、Windows上で運用すると変な警告出るし、ファイル内に日本語入ってると文
字コードを何にしてもきちんと動かないし･･･で、諦めた(rubyのデフォルト外部エンコーディングをUTF-8に
設定できれば動くかも)</p>

<p>今のところ自PCにcoLinux+Ubuntu 10.04入れてサービス化して、SSH経由で動かしてる(octopressフォルダ自体
はWindows側のファイルをsamba経由でアクセスしてる)</p>

<p>別PCにUbuntu 11.10を入れてSSH経由で動かした場合、previewとかしたときサーバの応答がめっちゃ遅い。</p>

<p>調べてみると、Octopress(正確にはJekyll)が使ってるWEBrickというのが遅いらしい<a href="http://kitbc.s41.xrea.com/main/?ubuntu_network_slow">Ubuntuネットワーク（ssh接続,
webrickサーバー）が遅い</a>に対策が書いてあったの
で、<code>/etc/nsswitch.conf</code>の<code>hosts:</code>行の<code>mdns4</code>を削除したら結構ましになった。</p>

<h3 id="section-3">ユーザーページの管理</h3>

<p><a href="http://tokkonopapa.github.com/blog/2011/12/30/octopress-on-github-and-bitbucket/">Octopressのインストールから運用管理まで</a></p>

<p>を参考に</p>

<ol>
  <li><a href="https://bitbucket.org/">Bitbucket</a>のアカウントを作成(こんなのあるんだ。遅れてるな＞俺)</li>
  <li><a href="https://bitbucket.org/account/">アカウントのページ</a>のSSH Keysに<code>~/.ssh/id_rsa.pub</code>の内容を貼付
&amp;Add Key</li>
  <li><a href="https://bitbucket.org/repo/create">Create new repositry</a>でoctopressを作成(Repositry typeをgitに
する)</li>
  <li>以下のコマンドを打つ</li>
</ol>

<pre><code>cd octopress
git add .
git commit -m '&lt;message&gt;'
git remote add bitbucket git@bitbucket.org:&lt;username&gt;/octopress.git
git push -u bitbucket source
</code></pre>

<p>&lt;message&gt;は適当に。&lt;username&gt;はBitbucketのアカウント名。</p>

<p>なお、<code>bundle install</code>時にvendor以外のパスを指定した場合は<code>.gitignore</code>にそのパスを入れておかないと
rubyライブラリごとpushされると思う(試してないけど)。</p>

<h3 id="ruby">rubyライブラリのアップデート</h3>

<pre><code>bundle update
</code></pre>

<p>Bundler 1.1を使ってる＆<code>bundle install</code>時にパスを指定した場合、古くて使ってないライブラリを削除して
くれる。</p>

<p>挙動が変わって嵌まるかもしれないのでバックアップしといた方がいいかも。</p>

<h3 id="section-4">記事作成</h3>

<pre><code>rake new_post['title']
</code></pre>

<p>なのだが、SSH経由で運用してるため、いちいち打つのが面倒(‘title’に日本語入れたら問題ありそうだし)</p>

<p>別にこのコマンドを打たなくても<code>octopress/source/_posts</code>にファイルを作ったら検出してくれるみたいなので、
以下のようなvimスクリプトを作って運用してみる。</p>

<p><code>$VIMRUNTIME/autoload/myvimrc.vim</code>に以下(12/01/12修正。詳しくは<a href="/blog/2012/01/12/Octopress/">こちら</a>)</p>

<p><div><script src='https://gist.github.com/1597341.js?file='></script>
<noscript><pre><code>&quot;Octopress 新記事作成
&quot;
&quot;使用するグローバル変数
&quot;  g:octopress_rootdir        octopressルートディレクトリ
&quot;  g:octopress_article_ext    記事の拡張子
&quot;  g:octopress_article_subdir 記事のサブフォルダ。strftime()のパラメータ(%Y等)
&quot;                             使用可能
&quot;
&quot; 2012/01/06  新規作成
&quot; 2012/01/11  category,keywordに初期値を入れた
&quot;             publishedフィールド追加
&quot;             g:octopress_article_subdir追加
&quot;             
func! myvimrc#new_article(title)
  let l:atitle = a:title
  if ( l:atitle == &quot;&quot; )
    let l:atitle = input(&quot;input title:&quot;)
  endif
  let l:time = localtime()
  let l:hantitle = l:atitle
  &quot;Kaoriya 全角→半角関数があるなら使う
  if ( exists( &quot;*ToHankaku&quot; ) )
    let l:hantitle = ToHankaku(l:atitle)
  endif
  &quot; match_characterはKaoriyaのhz_ja.vimより。意味はよく分からん。
  let l:match_character = '\%([ｳｶｷｸｹｺｻｼｽｾｿﾀﾁﾂﾃﾄﾊﾋﾌﾍﾎ]ﾞ\|[ﾊﾋﾌﾍﾎ]ﾟ\|.\)'
  let l:asctitle = &quot;&quot;
  let l:ii = 0
  let l:len = strlen(l:hantitle)
  &quot; titleのファイル名に使える英数字＆記号だけ抜き出す。
  while ( l:ii &lt; l:len )
      let l:char = matchstr(l:hantitle, l:match_character, l:ii)
    &quot;2バイト文字は省く
    if ( l:char =~ '^\f$' &amp;&amp; char2nr(l:char) &lt; 256 )
      let l:asctitle .= l:char
    endif
    let l:ii += strlen(l:char)
  endwhile
  if ( l:asctitle == &quot;&quot; )
    let l:asctitle = &quot;article&quot;
  endif
  let article_dir = get(g:, 'octopress_rootdir', '~/octopress') . '/source/_posts/'  
  let sub_dir = strftime(get(g:, 'octopress_article_subdir', ''), l:time)
  if ( sub_dir != '' )
    if ( finddir( article_dir . sub_dir ) == '' )
      if ( exists( &quot;*mkdir&quot; ) )
        let article_dir .= l:sub_dir
        call mkdir( article_dir, &quot;p&quot; )
      else
        &quot;作れない場合は_postsに置いとく
        echohl ErrorMsg | echomsg 'mkdirをサポートしてません _postに置いておきます' | echohl None
      endif
    else
      let article_dir .= l:sub_dir
    endif
    let last_char = article_dir[strlen(article_dir)-1]
    if ( last_char != '/' &amp;&amp; last_char != '\' )
      let article_dir .= '/'
    endif
  endif

  let article_ext = get(g:, 'octopress_article_ext', 'markdown')

  let l:fbase = strftime(&quot;%Y-%m-%d-&quot;, l:time) . l:asctitle
  let l:fname = article_dir . l:fbase . '.'  . article_ext
  let l:is_create = 1
  if ( findfile(l:fname) != &quot;&quot; )
    let l:ec = tolower(input(&quot;'&quot;.l:fbase.'.'.article_ext.&quot;' is exist create/overwrite/edit [c/w/e]?:&quot;))
    if ( l:ec == &quot;w&quot; )
      call delete(l:fname)
    elseif (l:ec == &quot;c&quot; )
      let l:ii = 0
      while ( 1 )
        let l:ii += 1
        let l:fname = article_dir . l:fbase.'_'.l:ii.'.' . article_ext
        if ( findfile(l:fname) == &quot;&quot; )
          break
        endif
      endwhile
    elseif (l:ec == &quot;e&quot; )
      let l:is_create = 0
    else
      return
    endif
  endif
  if ( l:is_create )
    let l:utf8title = &quot;&quot;
    if ( has('iconv') )
      let l:utf8title = iconv(l:atitle, &amp;enc, &quot;utf-8&quot;)
    else
      let l:utf8title = l:atitle
    endif

    let l:wlines = ['---', 'layout: post']
    let l:wlines += ['title: &quot;' . l:utf8title . '&quot;']
    let l:wlines += ['date: '. strftime(&quot;%Y-%m-%d %H:%M&quot;, l:time)]
    let l:wlines += ['comments: true', 'published: true', 'categories: [cat1, cat2]']
    let l:wlines += ['description: ', 'keywords: key1, key2', '---', '',&quot;&lt;!-- more --&gt;&quot;]

    call writefile( l:wlines, l:fname )
  endif
  if ( l:asctitle == l:atitle )
    &quot;タイトルに日本語が含まれない場合、明示的にutf-8にしてみる
    &quot;タイトルにファイル名に使えない文字が含まれてる場合ここを通らないけど
    augroup au_oct_new
      au BufEnter * setl fenc=utf-8
    augroup END
  endif
  execute &quot;edit&quot; . &quot; ++enc=UTF-8 &quot; . l:fname | &quot;normal G&quot;
  if ( l:asctitle == l:atitle )
    augroup au_oct_new
      autocmd!
    augroup END
  endif
endfunc
</code></pre></noscript></div>
</p>

<p><code>_vimrc</code>に以下を追加</p>

<p><code>vim _vimrc
command! -nargs=? OctNewPost call myvimrc#new_article(&lt;q-args&gt;)
let g:octopress_article_ext = "krd"
let g:octopress_rootdir = '~/octopress'
</code></p>

<p>使い方は</p>

<pre><code>:OctNewPost [title]
</code></pre>

<p>みたいにして使う。titleを省略した場合、入力を求めるように作ってみた。<br />
vimのキーに割り振るなり、ランチャーにコマンド実行オプション付けてvim起動するように登録するなりすればいい(私は後者)</p>

<p>titleには日本語入れても大丈夫。またファイルの文字コードはUTF-8になるように細工してる。</p>

<p>ファイル名は”yyyy-mm-dd-title.ext”みたいになる。ファイル名に全角文字入れたら不味そうな気がする
ので、titleの全角文字は省いたファイル名を作るようにしてみた。</p>

<p>但し、<code>match_character</code>はKaoriya-vimに入ってる<code>hz_ja.vim</code>から頂いたが、イマイチ意味が分かってない。
<code>myvimrc.vim</code>は文字コード(または内部エンコーディング)をshift-jis(cp932)とかにしないと思った通りに
動かなかったりするのかも。</p>

<hr />

<p>Markdown記法のパーサはデフォルトでは<code>rdiscount</code>が使われている。Jekyllのソースコードを見てみると
kramdownも対応してるみたいなので、<code>_config.yml</code>を</p>

<pre title="_config.yml"><code>markdown: kramdown
</code></pre>

<p>に変更して運用。多分他にもmaruku、redcarpetというパーサに対応してるぽい(癖が分からないので試してない)</p>

<p>Vimで拡張子<code>krd</code>の時kramdown用のシンタックスファイル(自作)が有効になるようにしてるので、新規作成時の
拡張子を<code>krd</code>にしてるが、そうするとJekyllがMarkdown形式ファイルだと認識してくれないので<code>_config.yml</code>に</p>

<pre title="_config.yml"><code>markdown_ext: "markdown,mkd,mkdn,md,krd"
</code></pre>

<p>を追加して<code>rake generate</code></p>

<h3 id="section-5">記事のプレビュー</h3>

<pre><code>cd octopress
rake generate	#必要なとき
rake preview
</code></pre>

<p>ウチの環境ではSSHクライアントから上記コマンドを打つ。ちょっと面倒。</p>

<p>ブラウザで</p>

<pre><code>http://server-ip-address:4000/
</code></pre>

<p>を見ると、プレビュー出来る。記事などを更新して、ブラウザを再読込すると自動的に更新してくれる。
素晴らしい。</p>

<h3 id="section-6">記事の投稿</h3>

<pre><code>cd octopress
rake generate	#必要なとき
rake deploy
</code></pre>

<p>ウチの環境ではSSHクライアントから上記コマンドを打つ。ちょっと面倒。</p>

<p><code>rake gen_deploy</code>とするとgenerateとdeploy両方してくれるみたい。</p>

<h3 id="section-7">キャッシュの削除</h3>

<pre><code>rake clean
</code></pre>

<p><code>.pygments-cache</code>、<code>.gist-cache</code>、<code>.sass-cache</code>内のファイルと<code>source/stylesheets/screen.css</code>を削除。</p>

<p>作業してると溜まってくるので定期的に実行するといい･･･のかな？</p>

<h3 id="octopress">Octopressの更新</h3>

<pre><code>git fetch octopress
git pull octopress master
</code></pre>

<h2 id="section-8">最後に</h2>

<p>環境の構築に手間取ったが、ローカルで色々テスト出来るし、拡張性は無限大だし、運用も快適に出来そうだ
し、でかなり良い感じかも。</p>

<p>ということで、たぶん今後はOctopressに乗り換えると思う</p>

]]></content>
  </entry>
  
</feed>
