<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: vim | Nukino's memorandum]]></title>
  <link href="http://nukino.github.com/blog/categories/vim/atom.xml" rel="self"/>
  <link href="http://nukino.github.com/"/>
  <updated>2012-01-26T01:39:12+09:00</updated>
  <id>http://nukino.github.com/</id>
  <author>
    <name><![CDATA[nukino]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Gist.vimの導入とヘルパースクリプトの作成]]></title>
    <link href="http://nukino.github.com/blog/2012/01/16/gist_vim/"/>
    <updated>2012-01-16T11:11:00+09:00</updated>
    <id>http://nukino.github.com/blog/2012/01/16/gist_vim</id>
    <content type="html"><![CDATA[<p>Octopressで記事を書くにあたってGistにコード貼ったり、それをVim上で管理できるGist.vimを導入したんです
が、その際に少し嵌まったのでその解決法と使ってる内にもう少し便利にしたいな―。という欲求がフツフツと
沸いてきたので、vimスクリプトを書いてみた。</p>

<p>環境はWindows XP(SP3)+vim 7.3.393(Kaoriya版)。</p>

<!-- more -->

<h2 id="gistvim">Gist.vimの導入</h2>

<h3 id="curl">cURLのダウンロードとインストール</h3>

<p>Windows系の場合、まずはcURLは標準で入ってないのでダウンロードする必要がある。
(linux系なら多分最初から入ってる。Macも最近のなら入ってるのかな？)</p>

<p><a href="http://curl.haxx.se/download.html">cURL-Download</a></p>

<p>よりダウンロード。cygwinは使ってないので、</p>

<pre><code>Win32 - Generic
|   Win32 2000/XP   7.23.1  binary  SSL enabled         Gunter Knauf    1.33 MB
</code></pre>

<p>をダウンロードしてみた。インストーラは付いてないので解凍して</p>

<pre><code>curl.exe
libcurl.dll
libeay32.dll
libssl32.dll
</code></pre>

<p>の4ファイルをパスの通ったフォルダにコピー(または解凍したフォルダにパスを通す)すればおｋ。</p>

<h3 id="gistvim-1">Gist.vimのインストール</h3>

<p>通常のvimプラグインと一緒。</p>

<ul>
  <li><a href="http://www.vim.org/scripts/script.php?script_id=2423">Gist.vim - vim online</a></li>
  <li><a href="https://github.com/mattn/gist-vim">Gist.vim - GitHub</a></li>
</ul>

<p>のどちらかからダウンロード＆解凍して、<code>$VIMRUNTIME</code>にコピーすればいい。</p>

<p>vimプラグイン管理を使ってるなら<code>$MYVIMRC</code>に</p>

<pre><code>NeoBundle 'mattn/gist-vim'
</code></pre>

<p>とか書いてインストール(<code>:NeoBundleInstall</code>)すればいい(使ってる管理プラグインによって$MYVIMRCの書き方
やExコマンドは違う。ここではNeoBundleの例)</p>

<h3 id="section">設定</h3>

<p><code>$MYVIMRC</code>に以下を記述</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>$MYVIMRC(ex.vimrc)  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'>    <span class="k">let</span> g:github_user <span class="p">=</span> &amp;<span class="k">lt</span>;input your username&amp;gt;
</span><span class='line'>    <span class="k">let</span> g:github_token <span class="p">=</span> &amp;<span class="k">lt</span>;input your token&amp;gt;
</span><span class='line'>    <span class="k">let</span> g:gist_curl_options <span class="p">=</span> “<span class="p">-</span><span class="k">k</span>”
</span><span class='line'>    <span class="k">let</span> g:gist_detect_filetype <span class="p">=</span> <span class="m">1</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><code>g:github_user</code>や<code>g:github_token</code>を設定しておくとgitコマンドが動かないので若干高速化する(筈)。</p>

<p>ちなみに<code>g:github_token</code>は<a href="https://github.com/account/admin">Github→Account Setting→Account Admin</a>の以下の部分を参照すれば良い。</p>

<p><img src="/images/2012/01/15/img00.png" alt="API Token" width="350" /></p>

<p><code>g:gist_curl_options</code>を指定しないとGist.vimが動かなかったので調べて、同じコマンドをコマンドラインか
ら打ってみると</p>

<pre><code>curl: (60) SSL certificate problem, verify that the CA cert is OK. Details:
error:14090086:SSL routines:SSL3_GET_SERVER_CERTIFICATE:certificate verify failed
More details here: http://curl.haxx.se/docs/sslcerts.html

curl performs SSL certificate verification by default, using a "bundle"
 of Certificate Authority (CA) public keys (CA certs). If the default
 bundle file isn't adequate, you can specify an alternate file
 using the --cacert option.
If this HTTPS server uses a certificate signed by a CA represented in
 the bundle, the certificate verification probably failed due to a
 problem with the certificate (it might be expired, or the name might
 not match the domain name in the URL).
If you'd like to turn off curl's verification of the certificate, use
 the -k (or --insecure) option.
</code></pre>

<p>てな表示が出た。SSL証明書の確認が出来ないので、確認を無視するには’-k’オプション指定してね。と書いて
あると見て、とりあえず<code>g:gist_curl_options</code>に<code>-k</code>を指定してみた。</p>

<p>なんか臭いものに蓋をしただけのような気もする。正しい解決策を誰か教えて。</p>

<h2 id="gistvim-2">Gist.vimの(基本的な)使い方</h2>

<h3 id="post">投稿(Post)</h3>

<pre><code>:Gist [-P|-p]
</code></pre>

<p><code>-p</code>を付けるとprivate、<code>-P</code>を付けるとpublicで投稿される。何も付けないと<code>g:gist_private</code>の値に従う。
(デフォルトはpublic)</p>

<p>範囲指定可能なので</p>

<pre><code>:6,20Gist
</code></pre>

<p>とすると、6行目から20行目までを投稿できる。</p>

<p>通常はVisual modeで選択した後”:”を入力すると自動的に選択範囲が範囲指定されるので、それを使う。</p>

<p>他にも<code>-m</code>を付けたら現在開いてるバッファ分の複数ファイルのgistを作成できたり、<code>-a</code>を付けると
anonymous投稿出来たりするみたいだが、使ったことはない。</p>

<h3 id="section-1">一覧取得</h3>

<pre><code>:Gist -l [user]
</code></pre>

<p>でgist一覧を取得できる。userを指定しない場合は自分となる。</p>

<pre><code>:Gist -la
</code></pre>

<p>で自分のpublicとprivate全てのgist一覧を取得できる。</p>

<h3 id="section-2">編集</h3>

<p>一覧取得したバッファで[Enter]を押すかまたは</p>

<pre><code>:Gist gist-id
</code></pre>

<p>とgist-idを指定したコマンドを実行すればgist編集バッファで編集が出来る</p>

<h3 id="section-3">更新</h3>

<p>gist編集バッファ内で</p>

<pre><code>:w[rite]
</code></pre>

<p>または</p>

<pre><code>:Gist -e
</code></pre>

<p>とすると編集バッファの内容を更新できる。</p>

<h3 id="section-4">削除</h3>

<p>間違えて投稿してしまった場合、gist編集バッファ内で</p>

<pre><code>:Gist -d
</code></pre>

<p>とすると、編集しているgist-idが削除される。</p>

<pre><code>:Gist -d gist-id
</code></pre>

<p>みたいにgist-idを指定して削除とかは出来ないみたい。(誤操作防止のため？？)</p>

<h3 id="description">説明(description)指定</h3>

<p>投稿、更新コマンド時に</p>

<pre><code>:Gist -s ほげほげ
:Gist -e -s ほげほげ
</code></pre>

<p>と<code>-s &lt;description&gt;</code>とすると説明(description)を指定できる。説明を指定しておくと、一覧表示の際の画面
が</p>

<p><img src="/images/2012/01/15/img01.png" alt="一覧画面" /></p>

<p>のように説明が表示されて、管理がしやすいように思う。</p>

<p>また</p>

<pre><code>:Gist -s 2012/01/16 15:33
</code></pre>

<p>みたいに空白を入れると上手く動かない。空白の後ろ部分(先の例だと15:33)が説明となる。
gistの制限でそうしてあるのか単純にGist.vimのバグかまでは調べてない。全角スペースなら問題ないので、区
切りが欲しい場合は全角スペースで区切ると良い。</p>

<h2 id="gistvim-3">Gist.vimヘルパースクリプト</h2>

<p>毎回-sオプション付けて説明指定するのは面倒なので、それを自動的に付けてしまおう。
というスクリプトを書いてみた。</p>

<p>導入が若干面倒なので、プラグインにしてしまった方が良いような気もする。<br />
まあ要望があれば考えると言うことで・・・。</p>

<h3 id="section-5">インストール</h3>

<p><a href="https://gist.github.com/1606832">ここ</a>からファイルをダウンロードして、
<code>$VIMRUNTIME/autoload/gist_vim_helper.vim</code>に保存。</p>

<p><code>$MYVIMRC</code>に以下を追加</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>$MYVIMRC(ex.vimrc)  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'>    command<span class="p">!</span> <span class="p">-</span>nargs<span class="p">=</span>? <span class="p">-</span>range<span class="p">=</span>% GHPostGist <span class="k">call</span> gist_vim_helper#post_cmd<span class="p">(&lt;</span>count<span class="p">&gt;,</span> <span class="p">&lt;</span>line1<span class="p">&gt;,</span> <span class="p">&lt;</span>line2<span class="p">&gt;,</span> <span class="p">&lt;</span><span class="k">f</span><span class="p">-</span>args<span class="p">&gt;)</span>
</span><span class='line'>    command<span class="p">!</span> <span class="p">-</span>nargs<span class="p">=</span>? <span class="p">-</span>range<span class="p">=</span>% GHEditGist <span class="k">call</span> gist_vim_helper#edit_cmd<span class="p">(&lt;</span>count<span class="p">&gt;,</span> <span class="p">&lt;</span>line1<span class="p">&gt;,</span> <span class="p">&lt;</span>line2<span class="p">&gt;,</span> <span class="p">&lt;</span><span class="k">f</span><span class="p">-</span>args<span class="p">&gt;)</span>
</span><span class='line'>    command<span class="p">!</span> <span class="p">-</span>nargs<span class="p">=</span>? <span class="p">-</span>range<span class="p">=</span>% GHAutoGist <span class="k">call</span> gist_vim_helper#auto_cmd<span class="p">(&lt;</span>count<span class="p">&gt;,</span> <span class="p">&lt;</span>line1<span class="p">&gt;,</span> <span class="p">&lt;</span>line2<span class="p">&gt;,</span> <span class="p">&lt;</span><span class="k">f</span><span class="p">-</span>args<span class="p">&gt;)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></f-args></line2></line1></count></f-args></line2></line1></count></f-args></line2></line1></count></p>

<h3 id="section-6">使い方</h3>

<h4 id="section-7">投稿</h4>

<pre><code>:GHPostGist [is_private]
</code></pre>

<p>が<code>:Gist -P</code>または<code>:Gist -p</code>コマンドの代替コマンド。<code>g:gist_vim_helper_new_desc</code>変数に従った説明を付
加する。<code>is_private</code>が1なら<code>:Gist -p</code>、0なら<code>:Gist -P</code>、省略時は<code>:Gist</code>コマンドが発行される。</p>

<p><code>g:gist_vim_helper_new_desc</code>に指定できるフォーマットは</p>

<dl>
  <dt>%Y,%m,%dなど</dt>
  <dd><code>strftmime()</code>関数で指定可能な日付時刻指定子</dd>
  <dt>$f</dt>
  <dd>投稿するファイル名</dd>
  <dt>$d</dt>
  <dd>ユーザー記述。毎回入力を求められる。</dd>
</dl>

<p>です。先ほど述べたようにスペースを入れないように注意！</p>

<h4 id="section-8">更新</h4>

<pre><code>:GHEditGist [is_private] [is_close]
</code></pre>

<p>が<code>:Gist -e</code>コマンドの代替。<code>is_private</code>は指定しても無意味。将来的にGist.vimがprivate→publicとかに対応す
るかもしれないので、付けてある。<code>is_close</code>に1を指定すると更新が成功したらgist編集バッファを閉じる。
<code>g:gist_vim_helper_edit_desc</code>変数に従った説明を付ける。</p>

<p><code>g:gist_vim_helper_edit_desc</code>に指定できるフォーマットは<code>g:gist_vim_helper_edit_desc</code>と同様。</p>

<p>ただし<code>$d</code>を指定した際は入力求める際の初期値が現在の説明になってるので、不要な部分を適宜削除する必要
がある。</p>

<h4 id="section-9">投稿または更新を自動判別</h4>

<pre><code>:GHAutoGist [is_private] [is_close]
</code></pre>

<p>はgist編集バッファ内で実行すると<code>:GHEditGist [is_private] [is_close]</code>コマンド、それ以外のバッファで
実行すると、<code>:GHPostGist [is_private]</code>コマンドを実行する。</p>

<p>結構便利。</p>

<h3 id="section-10">設定例</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>$MYVIMRC(ex.vimrc)  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'>    <span class="k">let</span> g:gist_vim_helper_new_desc  <span class="p">=</span> “[%Y%<span class="k">m</span>%<span class="k">d</span><span class="p">-</span>%H%M]$<span class="k">f</span>/$<span class="k">d</span>”
</span><span class='line'>    “説明に作成日時を付加する
</span><span class='line'>    <span class="k">let</span> g:gist_vim_helper_edit_desc <span class="p">=</span> “”
</span><span class='line'>    “説明に更新日時を付加する場合コメントアウト
</span><span class='line'>    “<span class="k">let</span> g:gist_vim_helper_edit_desc <span class="p">=</span> “[%Y%<span class="k">m</span>%<span class="k">d</span><span class="p">-</span>%H%M]$<span class="k">f</span><span class="sr">/$d”&lt;/</span><span class="k">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="k">pre</span><span class="p">&gt;&lt;</span>code<span class="p">&gt;</span><span class="nb">noremap</span> &amp;<span class="k">lt</span>;<span class="k">silent</span>&amp;gt;&amp;<span class="k">lt</span>;Space&amp;gt;<span class="nb">gp</span> :GHPostGist <span class="m">0</span>&amp;<span class="k">lt</span>;CR&amp;gt;
</span><span class='line'><span class="nb">noremap</span> &amp;<span class="k">lt</span>;<span class="k">silent</span>&amp;gt;&amp;<span class="k">lt</span>;Space&amp;gt;ge :GHEditGist <span class="m">0</span> <span class="m">0</span>&amp;<span class="k">lt</span>;CR&amp;gt;
</span><span class='line'><span class="nb">noremap</span> &amp;<span class="k">lt</span>;<span class="k">silent</span>&amp;gt;&amp;<span class="k">lt</span>;Space&amp;gt;ga :GHAutoGist <span class="m">0</span> <span class="m">1</span>&amp;<span class="k">lt</span>;CR&amp;gt;
</span><span class='line'>nnoremap &amp;<span class="k">lt</span>;Space&amp;gt;gl        :&amp;<span class="k">lt</span>;C<span class="p">-</span><span class="k">u</span>&amp;gt;echo <span class="c">&quot;please wait...&quot;&amp;lt;CR&amp;gt; :Gist -l&amp;lt;CR&amp;gt;</span>
</span><span class='line'>nnoremap &amp;<span class="k">lt</span>;Space&amp;gt;gdel      :&amp;<span class="k">lt</span>;C<span class="p">-</span><span class="k">u</span>&amp;gt;Gist <span class="p">-</span><span class="k">d</span>&amp;<span class="k">lt</span>;CR&amp;gt; :<span class="k">close</span>&amp;<span class="k">lt</span>;CR&amp;gt;
</span></code></pre></td></tr></table></div></figure></notextile></div>
</code></pre>

<p>キー定義は適当に変更する。<code>&lt;Space&gt;gl</code>、<code>&lt;Space&gt;gdel</code>はおまけ。</p>

<h3 id="gistvim-4">Gist.vimの修正(必要ならば)</h3>

<p><code>g:gist_vim_helper_edit_desc</code>に値を設定した場合、<code>:GHEditGist</code>(または<code>:GHAutoGist</code>)コマンド
で更新すると説明が更新されるが、</p>

<pre><code>:w[rite]
</code></pre>

<p>とすると、説明が更新されない。それが気に入らない人は<code>$VIMRUNTIME/autoload/gist.vim</code>の<code>s:GistWrite()</code>
関数(319行目くらい？)を以下のように変更する。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>gist.vim  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'>    function! s:GistWrite(fname)
</span><span class='line'>      if substitute(a:fname, ‘\’, ‘/’, ‘g’) == expand(“%:p:gs@\@/@”)
</span><span class='line'>—     Gist -e
</span><span class='line'><span class="gi">+++     1,1call gist_vim_helper#edit(0,0)</span>
</span><span class='line'>      else
</span><span class='line'>        exe “w”.(v:cmdbang ? “!” : “”) fnameescape(v:cmdarg) fnameescape(a:fname)
</span><span class='line'>        silent! exe “file” fnameescape(a:fname)
</span><span class='line'>        silent! au! BufWriteCmd &lt;buffer&gt;
</span><span class='line'>      endif
</span><span class='line'>    endfunction
</span></code></pre></td></tr></table></div></figure></notextile></div></buffer></p>

<p>追加する部分は</p>

<pre><code>call gist_vim_helper#edit_cmd(-1, 1, 1, 0, 0)
</code></pre>

<p>でもいいかもしれない。</p>

<h2 id="octopressgist-tag">Octopressで使用する場合にGist Tagを貼り付ける</h2>

<p><code>:Gist </code>コマンドで記事をポストすると<code>g:gist_put_url_to_clipboard_after_post</code>が1の時、</p>

<pre><code>https://gist.github.com/1606832
</code></pre>

<p>のようなURL(‘1606832’の部分はGist-ID)がクリップボードに貼り付けられる。またOctopressには</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (gist-tag)</span> <a href='/downloads/code/2012-01/14/gist-tag'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="p">{</span><span class="o">%</span> <span class="nx">gist</span> <span class="nx">gist_id</span> <span class="p">[</span><span class="nx">filename</span><span class="p">]</span> <span class="o">%</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>と記事に書けばGistコードをページに貼り付けてくれる”Gist Tag”という便利なプラグインが存在する。</p>

<p>ということでクリップボードから貼り付けて、ちょっと変更加えればGistコードをページに埋め込むことが出来
る･･･んだけど、数回やっただけで面倒くさくなってきた(スペースの有無とか間違えて、Octopress Document
見に行ったりしてるし)。</p>

<p>ということで変換して貼り付けてくれるvimスクリプトを書いてみた。</p>

<p><div><script src='https://gist.github.com/1606941.js?file='></script>
<noscript><pre><code>func! s:paste_gist_tag()
  let mx = 'http[s]\?://gist.github.com/\([0-9]\+\)'
  &quot; +または&quot;レジスタの中身を検索する
  let regs = [@+,@&quot;]
  for r in regs
    let mlist = matchlist(r, mx)
    if ( len(mlist) &gt; 2 )
      &quot;カーソル行の前の行先頭に挿入する
      exe &quot;normal! O\&lt;C-W&gt;{% gist &quot; . mlist[1] . &quot; %}&quot;
      return
    endif
  endif
endfunc

&quot;コマンド
command! -nargs=0 PasteGist     call &lt;SID&gt;paste_gist_tag()</code></pre></noscript></div>
</p>

<p>上記コードを$MYVIMRC(または<code>$VIMRUNTIME/ftplugin/markdown</code>とか)に貼り付ければ、vim上で</p>

<pre><code>:PasteGist
</code></pre>

<p>とExコマンド打てば、カーソル行にGist Tagが貼り付けられる(クリップボードにGistのURLがないと駄目)。</p>

<p>カーソル行の後に貼り付けるようにしたいのなら9行目の<code>normal O{</code>→<code>normal o{</code>とかにすればおｋ。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress記事作成スクリプトを修正してみた]]></title>
    <link href="http://nukino.github.com/blog/2012/01/12/Octopress/"/>
    <updated>2012-01-12T00:19:00+09:00</updated>
    <id>http://nukino.github.com/blog/2012/01/12/Octopress</id>
    <content type="html"><![CDATA[<p>以前<a href="http://nukino.github.com/blog/2012/01/06/Octopress/">Octopressを試してみる</a>で、Octopress記事作
成スクリプトを掲示したが、これを変更してみた。</p>

<p>変更点は</p>

<ol>
  <li>サブディレクトリの指定</li>
  <li>YAML Front Matterに published:の追加</li>
  <li>YAML Front Matterのcategories:、keywords:に初期値追加</li>
  <li>続きを読む(<code>&lt;!-- more --&gt;</code>)の追加</li>
</ol>

<!-- more -->

<h2 id="section">変更点の説明</h2>

<h3 id="section-1">サブディレクトリの指定</h3>

<p><code>octopress_dir/source/_post</code>にサブディレクトリを作ってもちゃんと記事を認識してくれるみたい。</p>

<p>月毎にディレクトリ作っておいた方が管理が楽そうなので、それに対応させるように
<code>g:octopress_article_subdir</code>変数を追加。</p>

<pre><code>let g:octopress_article_subdir = '%Y-%m'
</code></pre>

<p>のように指定。文字列には strftime()で使用できる書式指定コードを指定可能。</p>

<p>Kaoriya版なら、VC2010なので<a href="http://msdn.microsoft.com/ja-jp/library/fe06s4ak.aspx">Visual Studio 2010のstrftime()</a>を参照。</p>

<p>gccでコンパイルされてるなら<a href="http://linuxjm.sourceforge.jp/html/LDP_man-pages/man3/strftime.3.html">Manpage of strftime</a>になるのかな？</p>

<p>サブフォルダが存在しない場合は自動的に作られる(vimのmkdir()が存在すれば)。また’%Y/%m’のように複数階
層になっても動くはず。</p>

<h3 id="published-">:published の追加</h3>

<p>下書き機能ってないのかな？と<a href="http://octopress.org/docs/blogging/">Octopress Document-Blogging Basics</a>を見てるとYAML Front Matterに<code>published: false</code>と指定すれば良い
ことが分かった。</p>

<p>その時わざわざ追加するのもうざいので、記事の先頭部分に<code>published:</code>を追加するようにしてみた(初期値はtrue)</p>

<h3 id="categorieskeywords">categories:、keywords:に初期値追加</h3>

<p>いつも「書式どうだったっけ？」と思うので、<code>categories:</code>と<code>keywords:</code>にダミー初期値を出力するようにし
てみた。</p>

<p>鬱陶しいならソースを修正しといてください</p>

<h3 id="more---">続きを読む<code>&lt;!-- more --&gt;</code>の追加</h3>

<p>記事中に<code>&lt;!-- more --&gt;</code>があると「続きを読む」リンクが表示される。</p>

<p>毎回打つのも面倒なので、末尾に追加するようにしてみた。</p>

<p>なお表記はデフォルトでは「Read on →」となるが、これを変更したい場合<code>_config.yml</code>の</p>

<pre><code>excerpt_link: "Read on &amp;rarr;"  # "Continue reading" link text at the bottom of excerpted articles
</code></pre>

<p>を変更すればよい。</p>

<h2 id="section-2">ソースコード</h2>

<p><code>$VIMRUNTIME/autoload/myvimrc.vim</code>に以下を追加</p>

<p><div><script src='https://gist.github.com/1597341.js?file='></script>
<noscript><pre><code>&quot;Octopress 新記事作成
&quot;
&quot;使用するグローバル変数
&quot;  g:octopress_rootdir        octopressルートディレクトリ
&quot;  g:octopress_article_ext    記事の拡張子
&quot;  g:octopress_article_subdir 記事のサブフォルダ。strftime()のパラメータ(%Y等)
&quot;                             使用可能
&quot;
&quot; 2012/01/06  新規作成
&quot; 2012/01/11  category,keywordに初期値を入れた
&quot;             publishedフィールド追加
&quot;             g:octopress_article_subdir追加
&quot;             
func! myvimrc#new_article(title)
  let l:atitle = a:title
  if ( l:atitle == &quot;&quot; )
    let l:atitle = input(&quot;input title:&quot;)
  endif
  let l:time = localtime()
  let l:hantitle = l:atitle
  &quot;Kaoriya 全角→半角関数があるなら使う
  if ( exists( &quot;*ToHankaku&quot; ) )
    let l:hantitle = ToHankaku(l:atitle)
  endif
  &quot; match_characterはKaoriyaのhz_ja.vimより。意味はよく分からん。
  let l:match_character = '\%([ｳｶｷｸｹｺｻｼｽｾｿﾀﾁﾂﾃﾄﾊﾋﾌﾍﾎ]ﾞ\|[ﾊﾋﾌﾍﾎ]ﾟ\|.\)'
  let l:asctitle = &quot;&quot;
  let l:ii = 0
  let l:len = strlen(l:hantitle)
  &quot; titleのファイル名に使える英数字＆記号だけ抜き出す。
  while ( l:ii &lt; l:len )
      let l:char = matchstr(l:hantitle, l:match_character, l:ii)
    &quot;2バイト文字は省く
    if ( l:char =~ '^\f$' &amp;&amp; char2nr(l:char) &lt; 256 )
      let l:asctitle .= l:char
    endif
    let l:ii += strlen(l:char)
  endwhile
  if ( l:asctitle == &quot;&quot; )
    let l:asctitle = &quot;article&quot;
  endif
  let article_dir = get(g:, 'octopress_rootdir', '~/octopress') . '/source/_posts/'  
  let sub_dir = strftime(get(g:, 'octopress_article_subdir', ''), l:time)
  if ( sub_dir != '' )
    if ( finddir( article_dir . sub_dir ) == '' )
      if ( exists( &quot;*mkdir&quot; ) )
        let article_dir .= l:sub_dir
        call mkdir( article_dir, &quot;p&quot; )
      else
        &quot;作れない場合は_postsに置いとく
        echohl ErrorMsg | echomsg 'mkdirをサポートしてません _postに置いておきます' | echohl None
      endif
    else
      let article_dir .= l:sub_dir
    endif
    let last_char = article_dir[strlen(article_dir)-1]
    if ( last_char != '/' &amp;&amp; last_char != '\' )
      let article_dir .= '/'
    endif
  endif

  let article_ext = get(g:, 'octopress_article_ext', 'markdown')

  let l:fbase = strftime(&quot;%Y-%m-%d-&quot;, l:time) . l:asctitle
  let l:fname = article_dir . l:fbase . '.'  . article_ext
  let l:is_create = 1
  if ( findfile(l:fname) != &quot;&quot; )
    let l:ec = tolower(input(&quot;'&quot;.l:fbase.'.'.article_ext.&quot;' is exist create/overwrite/edit [c/w/e]?:&quot;))
    if ( l:ec == &quot;w&quot; )
      call delete(l:fname)
    elseif (l:ec == &quot;c&quot; )
      let l:ii = 0
      while ( 1 )
        let l:ii += 1
        let l:fname = article_dir . l:fbase.'_'.l:ii.'.' . article_ext
        if ( findfile(l:fname) == &quot;&quot; )
          break
        endif
      endwhile
    elseif (l:ec == &quot;e&quot; )
      let l:is_create = 0
    else
      return
    endif
  endif
  if ( l:is_create )
    let l:utf8title = &quot;&quot;
    if ( has('iconv') )
      let l:utf8title = iconv(l:atitle, &amp;enc, &quot;utf-8&quot;)
    else
      let l:utf8title = l:atitle
    endif

    let l:wlines = ['---', 'layout: post']
    let l:wlines += ['title: &quot;' . l:utf8title . '&quot;']
    let l:wlines += ['date: '. strftime(&quot;%Y-%m-%d %H:%M&quot;, l:time)]
    let l:wlines += ['comments: true', 'published: true', 'categories: [cat1, cat2]']
    let l:wlines += ['description: ', 'keywords: key1, key2', '---', '',&quot;&lt;!-- more --&gt;&quot;]

    call writefile( l:wlines, l:fname )
  endif
  if ( l:asctitle == l:atitle )
    &quot;タイトルに日本語が含まれない場合、明示的にutf-8にしてみる
    &quot;タイトルにファイル名に使えない文字が含まれてる場合ここを通らないけど
    augroup au_oct_new
      au BufEnter * setl fenc=utf-8
    augroup END
  endif
  execute &quot;edit&quot; . &quot; ++enc=UTF-8 &quot; . l:fname | &quot;normal G&quot;
  if ( l:asctitle == l:atitle )
    augroup au_oct_new
      autocmd!
    augroup END
  endif
endfunc
</code></pre></noscript></div>
</p>

<p><code>$MYVIMRC</code>に以下を追加</p>

<p><code>vim _vimrc
command! -nargs=? OctNewPost call myvimrc#new_article(&lt;q-args&gt;)
"設定サンプル
let g:octopress_article_ext = "krd"
let g:octopress_rootdir = expand('$OCTOPRESS_DIR')
let g:octopress_article_subdir = '%Y-%m'
</code></p>

<p>そのうちプラグインにするかも。</p>

<h2 id="section-3">実行と出力サンプル</h2>

<p>今日の日付が2012/01/12で上記設定サンプルが有効な場合にvim上で</p>

<pre><code>:OctNewPost Octopressを試してみる
</code></pre>

<p>などとして実行すると<code>$OCTOPRESS_DIR/source/_post/2012-01/2012-01-12-Octopress.krd</code>
ができる</p>

<h2 id="yaml-2012-01-12-octopresskrd">``` yaml 2012-01-12-Octopress.krd</h2>
<p>layout: post
title: “Octopressを試してみる”
date: 2012-01-12 09:08
comments: true
published: true
categories: [cat1, cat2]
description: 
keywords: key1, key2
—</p>

<!-- more -->

<p>```</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[vimのhelpgrepで日本語が使えない場合]]></title>
    <link href="http://nukino.github.com/blog/2012/01/10/helpgrep/"/>
    <updated>2012-01-10T00:14:00+09:00</updated>
    <id>http://nukino.github.com/blog/2012/01/10/helpgrep</id>
    <content type="html"><![CDATA[<p>help内をgrep検索できるhelpgrep(＆lhelpgrep)なるコマンドがあることを最近知った(←遅い)。</p>

<p>しかし、私が使ってるvim(vim 7.3.393 Kaoriya版)では、helpgrepで日本語検索が出来ない。</p>

<p><a href="https://github.com/vim-jp/issues/issues/95">このページ</a>に依ると、内部エンコーディングがUTF-8以外の場合×みた
いなので、<code>_vimrc</code>に</p>

<pre><code>set enc=utf-8
</code></pre>

<p>と書けばおｋ･･･なのだが、内部エンコーディングはあまり変えたくないので、helpgrep(&amp;lhelpgrep)に渡す文字列、返ってきた文字列を変換するようにしてみた。</p>

<!-- more -->

<p><code>_vimrc</code>に以下を追加する。</p>

<p><div><script src='https://gist.github.com/1583365.js?file='></script>
<noscript><pre><code>func! FuncJHelpgrep(strg, type)
    if ( &amp;enc != &quot;utf-8&quot; )
        if ( !has('iconv') )
            echohl ErrorMsg | echomsg 'Not support iconv' | echohl None
            return
        endif
        if ( a:type == 0 )
            let scmd = &quot;helpgrep &quot;
        else
            let scmd = &quot;lhelpgrep &quot;
        endif
        &quot;検索結果をUTF-8に変換
        let sfind = iconv(a:strg, &amp;enc, &quot;utf-8&quot;)
        exe scmd . sfind
        if ( a:type == 0 )
            let flist = getqflist()
        else
            &quot;ヘルプウィンドウを検索
            let l:bufnrlist = tabpagebuflist()
            let nr_helpw = -1
            for i in bufnrlist
                if ( getbufvar(i, &quot;&amp;filetype&quot;) == &quot;help&quot; )
                    let nr_helpw = bufwinnr(i)
                    break
                endif
            endfor
            if ( nr_helpw == -1 )
                echohl ErrorMsg | echomsg 'Not found Help Window' | echohl None
                return
            else
                let flist = getloclist(nr_helpw)
            endif
        endif
        for l in flist
            let l.text = iconv(l.text, &quot;utf-8&quot;, &amp;enc)
        endfor
        if ( a:type == 0 )
            call setqflist(flist)
        else
            call setloclist(nr_helpw, flist)
        endif
    else
        helpgrep a:strg
    endif
endfunc

&quot;コマンド
command! -nargs=1 Jhelpg        call FuncJHelpgrep(&lt;q-args&gt;, 0)
command! -nargs=1 Jlhelpg       call FuncJHelpgrep(&lt;q-args&gt;, 1)</code></pre></noscript></div>
</p>

<p>Jhelpgコマンドがhelpgrep、Jlhelpgコマンドがlhelpgrepに相当する。</p>

<pre><code>:Jhelpg 検索文字列
:Jlhelpg 検索文字列
</code></pre>

<p>のように使用する。<code>_vimrc</code>に関数書くと常にロードされるから嫌な場合はautoload関数にすればいい。</p>

<p>QuickFix、ロケーションリストの文字化けは直してあるが、画面下部に表示されるメッセージの文字化けは直してない。</p>

<p>まあそのうちvimが修正されると思うけど。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[vimからSSH/SCP接続してみる]]></title>
    <link href="http://nukino.github.com/blog/2012/01/08/vimSSH/"/>
    <updated>2012-01-08T06:10:00+09:00</updated>
    <id>http://nukino.github.com/blog/2012/01/08/vimSSH</id>
    <content type="html"><![CDATA[<p>ヘルプを探ってるとvimからSSH/SCP接続出来ることを知ったので、試してみた。</p>

<dl>
  <dt>クライアントPC</dt>
  <dd>Windows XP + vim 7.3.393(Kaoriya版)</dd>
  <dt>サーバーPC</dt>
  <dd>Ubuntu 11.10</dd>
</dl>

<p>で確認。「サーバー側にvim入れてSSHクライアント上で動かせば良いんじゃね？」という突っ込みは禁止www</p>

<!-- more -->

<h2 id="pcssh">サーバーPCにSSHサーバをインストール</h2>

<p>サーバーPCのコマンドラインで</p>

<pre><code>sudo apt-get install ssh
</code></pre>

<p>とする。別にOpen SSHなどでも構わない。</p>

<h2 id="pcssh-1">クライアントPCにSSHクライアントをインストール</h2>

<p>SSHクライアントはPuTTY 0.60 ごった煮版 2007年8月6日版を使用した。</p>

<p>ダウンロードは<a href="http://yebisuya.dip.jp/Software/PuTTY/">PuTTY ごった煮版</a>から行う。</p>

<p><a href="http://www.chiark.greenend.org.uk/~sgtatham/putty/">本家</a>の方がバージョンは新しい。Windows 7で使う
ならこちらの方がいいかも。</p>

<p>インストールする場合にはデフォルトのフォルダではなく<code>C:\PuTTy</code>などの空白を含まないパスにインストール
することを推奨(理由は後述)</p>

<h2 id="myvimrc">$MYVIMRCを編集</h2>

<p>$MYVIMRC(ユーザーvimファイル。一般的には<code>$HOME/_vimrc</code>や<code>$HOME/.vimrc</code>など)を編集し、以下の記述を追
加(sftpは不要かな？)。</p>

<p><div><script src='https://gist.github.com/1576194.js?file='></script>
<noscript><pre><code>if (has('win32') || has('win64'))
    &quot;use scp
    let g:netrw_scp_cmd     = &quot;E:\\PuTTY\\pscp.exe -q -batch&quot;
    let g:netrw_sftp_cmd    = &quot;E:\\PuTTY\\psftp.exe&quot;
    let g:netrw_ssh_cmd     = &quot;E:\\PuTTY\\plink.exe&quot;
endif</code></pre></noscript></div>
</p>

<p>文字列を’”‘(ダブルクォーテーション)で括ってあるのは試してる際にそうすると何故か動き出したからだが、
今試すと”’“(シングルクォーテーション)で括っても動くことが判明したので特に意味無しかも<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>。</p>

<p>実行ファイルのパスに空白が入ってると上手く動かない。(ダブルクォーテーションで括っても駄目。
<code>g:netrw_list_cmd</code>を直接指定すると、最初のファイル一覧は取得できる)</p>

<p>既にPuTTyを空白の入ったフォルダ(<code>C:\Program Files\PuTTy</code>など)にインストールしてしまってる人は</p>

<ol>
  <li>空白の入らないフォルダ(<code>C:\PuTTy</code>など)に再インストール</li>
  <li>PuTTyのあるインストールフォルダにPATHを通して、<code>g:netrw_scp_cmd</code>などに実行ファイル名のみ指定</li>
  <li>空白の入らないフォルダにジャンクション/シンボリックリンクする</li>
  <li>空白の入らないフォルダにPuTTyフォルダの中身をコピーする</li>
</ol>

<p>のうちお好きなのをどうぞ。</p>

<h2 id="ssh">SSH接続を公開鍵認証に変更</h2>

<p>このままだとSCP/SSH接続しようとした際にユーザー名/パスワード入力の部分で止まる(vimからプロンプトが出
ない)。</p>

<p>そこで、公開鍵認証＋pageantでパスワード認証を自動化する(サーバーが1つしかないならplink.exeに-pwオプ
ション付けとくというのでもいいけど)。</p>

<p>具体的な設定方法は<a href="http://www.atmarkit.co.jp/flinux/rensai/buildlamp/lamp_05/05_1.html">公開鍵認証でsshを安全に使う</a>を参照。</p>

<p>上記のサイトを読めばちゃんと書いてあるが、公開鍵をサーバーに設置する際[公開鍵の保存]ボタンで保
存したファイルを使っちゃ駄目です。PuTTy鍵生成ダイアログ上部のテキストを貼り付けませう←ここで少し
嵌まった。</p>

<p>上記サイトでは<code>/etc/ssh/sshd_config</code>の編集方法があまり詳しく載ってないので補完しておくと(大体分かると思うけど)</p>

<p>33行目の”#”を外す</p>

<pre><code>AuthorizedKeysFile      %h/.ssh/authorized_keys
</code></pre>

<p>パスワード認証を無効化するには55行目のコメントを外してyes→no</p>

<pre><code>PasswordAuthentication no
</code></pre>

<p>としてサーバー上で</p>

<pre><code>/etc/init.d/ssh restart
</code></pre>

<p>とすれば設定が有効化します。</p>

<p>pageantで作った秘密鍵を追加しとくのを忘れずに。</p>

<h2 id="section">使い方</h2>

<p>クライアント上のvimで</p>

<pre><code>:e scp://user@192.168.0.4/
</code></pre>

<p>とかするとサーバーのuserホームディレクトリの内容がダーっと表示されます。scpのパスは</p>

<pre><code>scp://[user@]machine[[:#]port]/path
</code></pre>

<p>と指定できるみたいです。(pathの末尾が”/”だとディレクトリを意味する)<br />
但しpathは指定したuserのホームディレクトリからの相対パスになるので、絶対パスにしたい場合は</p>

<pre><code>:e scp://root@192.168.0.4//etc/ssh/
</code></pre>

<p>とか</p>

<pre><code>:e scp://root@192.168.0.4//etc/ssh/sshd_config
</code></pre>

<p>みたいに先頭に”/”を付けます。</p>

<p>あと詳しい使い方はvimで</p>

<pre><code>:h netrw
</code></pre>

<p>参照。</p>

<h2 id="section-1">感想</h2>

<p>別件でやりたいことがあって調べてた際に見つけて試してみたけど、vimって色んな事が出来ることを再認識。</p>

<p>ディレクトリ移動とかは1回ずつSSH接続しに行くみたいなので、動作はかなりもっさりしている。</p>

<p>サーバーにvimを入れられない環境なら便利かもしれないが、自宅で使う場合はサーバー側にvim入れちゃった方
が速くてスマート。</p>

<hr />

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>実行ファイルのパスに空白が入ってるときは’"’で括らないと駄目。とかそういうことなのかも<a href="#fnref:1" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[vim環境の再構築１(DropBoxでvim設定の共有)]]></title>
    <link href="http://nukino.github.com/blog/2011/12/24/test-post/"/>
    <updated>2011-12-24T05:58:00+09:00</updated>
    <id>http://nukino.github.com/blog/2011/12/24/test-post</id>
    <content type="html"><![CDATA[<p>最近vimでvundleとかpathogenとかでプラグイン管理するのが流行ってるっぽいので、私もやってみたい。<br />
ついでなのでこの機会にvim環境を再構築してみようと計画してみた。</p>

<ol>
  <li>vim設定の共有化</li>
  <li>neobundleでプラグイン管理</li>
  <li>今使ってるプラグインの見直し</li>
  <li>ruby編集環境構築(quickrun、vim-refなど)</li>
</ol>

<p>こんな感じの計画かな？</p>

<!-- more -->
<p>##vim設定の共有化について</p>

<p>使ってるPCでプラグインやその他設定が一致していると便利。</p>

<p>githubでvim設定を共有化するページを幾つか見つけたが、なんとなく同期させるには毎回コマンドを打たない
といけないような気がする。</p>

<p>ものぐさな私はそんな鬱陶しいことやってられないので、今使ってるDropBoxを利用すればDropBoxフォルダに置
いておくだけで、自動的に同期してくれるから便利な気がする。</p>

<p>もちろんSugarSyncなどローカルにあるフォルダを同期してくれるオンラインストレージならなんでもおｋ。</p>

<p>DropBoxでアカウント取りたい場合は<a href="http://db.tt/cZwekOvO">ここ</a>からアカウント作ってくれると嬉しいです
。(招待機能で招待した人された人双方に256MB容量が増える。でもアカウント作ったメアドが私にばれちゃうの
で注意)</p>

<h2 id="vimrcgvimrcdropbox">ユーザvimrc、ユーザgvimrcをDropBoxフォルダで管理</h2>

<p>ユーザvimrc、ユーザgvimrcは私の環境はWindowsなので、<code>$HOME/_vimrc</code>、<code>$HOME/_gvimrc</code>にあります。</p>

<p>これをDropBoxフォルダに置きたい。一番簡単なのは</p>

<pre class="cmdline"><code>SET HOME=%DROPBOX_DIR%
</code></pre>

<p>みたいに$HOMEをDrobBoxフォルダにしてしまうことですが、これは好みではない。</p>

<p>なので、ハードリンクを使おうと思う(Windows 2000以降＆$HOMEとDropBoxフォルダが同じボリューム＆その
ボリュームがNTFSフォーマットの場合使用可能)。  </p>

<p>最近のMac OSやlinuxユーザはハードリンクなりシンボリックリンクなりを使えば可能だと思う(lnコマンドだっ
け？)。<br />
Windows Vista以降ではシンボリックリンクが実装されてるみたいなんで、同一ボリュームの制限はないみたい
(mklinkコマンドを使用？)</p>

<p>私はPPxというファイラでサクッと作ってしまいましたが、持ってない人はコマンドラインを叩けば可。</p>

<p>$HOME/_vimrc、$HOME/_gvimrcをDropBoxフォルダへ移動した上で(不安ならバックアップ取った上で)</p>

<pre class="cmdline"><code>fsutil hardlink create %HOME%\_vimrc %DROPBOX_DIR%\_vimrc
fsutil hardlink create %HOME%\_gvimrc %DROPBOX_DIR%\_gvimrc
</code></pre>

<p>とかすれば出来るんじゃないかと思います。</p>

<p>残念ながらハードリンク or シンボリックリンクを使える条件を満たしてない場合は若干イリーガルだけど、</p>

<pre class="cmdline"><code>SET MYVIMRC=%DROPBOX_DIR%\_vimrc
SET MYGVIMRC=%DROPBOX_DIR%\_gvimrc
SET VIMINIT=:source %MYVIMRC%
SET GVIMINIT=:source %MYGVIMRC%
</code></pre>

<p>とかすればOK(当然コントロールパネル等で上記コマンドに相当する環境変数の設定をやること)</p>

<p>最初ハードリンクがファイルへのリンク貼れるの知らなくて、こっちのイリーガルな方法でやってたんで、動作
は確認済み(ただし私の環境ではMYGVIMRCは環境変数展開じゃ駄目で直接パス打ち込まないと動かなかった)</p>

<p>または$HOME/_vimrcに</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span><code>$HOME/_vimrc</code> </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>source expand(‘$DROPBOX_DIR’) . ‘/_vimrc’</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>とか書いてもおｋ・・・だと思う(試してない)</p>

<h2 id="runtimepath">$RUNTIMEPATHの追加</h2>

<p>$RUNTIMEPATHは以下のように運用しようと思う</p>

<dl>
  <dt>$DROPBOX_DIR/vimfiles</dt>
  <dd>共有するプラグイン、vim設定を入れる</dd>
  <dt>$HOME/vimfiles/</dt>
  <dd>そのパソコン固有の設定を入れる</dd>
  <dt>$HOME/vimfiles/after</dt>
  <dd>そのパソコン固有の設定を入れる。共有設定を上書きしたい場合に利用する</dd>
</dl>

<p>ということでDROPBOX_DIRという環境変数を設定した上で、ユーザvimrcの先頭に以下のように記述する</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span><code>$HOME/_vimrc</code> </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>let dropbox_vim=substitute(expand($DROPBOX_DIR), “\”, “/”, “g”) . ‘/vimfiles’
</span><span class='line'>	let &amp;runtimepath = dropbox_vim . “,” . &amp;runtimepath</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>$vimのpluginとかより先にロードされちゃうのが若干気になるが、今のところ特に問題はなさそう。</p>

]]></content>
  </entry>
  
</feed>
