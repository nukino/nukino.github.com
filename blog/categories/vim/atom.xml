<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: vim | Nukino's memorandum]]></title>
  <link href="http://nukino.github.com/blog/categories/vim/atom.xml" rel="self"/>
  <link href="http://nukino.github.com/"/>
  <updated>2012-01-12T09:12:04+09:00</updated>
  <id>http://nukino.github.com/</id>
  <author>
    <name><![CDATA[nukino]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Octopress記事作成スクリプトを修正してみた]]></title>
    <link href="http://nukino.github.com/blog/2012/01/12/Octopress/"/>
    <updated>2012-01-12T00:19:00+09:00</updated>
    <id>http://nukino.github.com/blog/2012/01/12/Octopress</id>
    <content type="html"><![CDATA[<p>以前<a href="http://nukino.github.com/blog/2012/01/06/Octopress/">Octopressを試してみる</a>で、Octopress記事作
成スクリプトを掲示したが、これを変更してみた。</p>

<p>変更点は</p>

<ol>
  <li>サブディレクトリの指定</li>
  <li>YAML Front Matterに published:の追加</li>
  <li>YAML Front Matterのcategories:、keywords:に初期値追加</li>
  <li>続きを読む(<code>&lt;!-- more --&gt;</code>)の追加</li>
</ol>

<!-- more -->

<h2 id="section">変更点の説明</h2>

<h3 id="section-1">サブディレクトリの指定</h3>

<p><code>octopress_dir/source/_post</code>にサブディレクトリを作ってもちゃんと記事を認識してくれるみたい。</p>

<p>月毎にディレクトリ作っておいた方が管理が楽そうなので、それに対応させるように
<code>g:octopress_article_subdir</code>変数を追加。</p>

<pre><code>let g:octopress_article_subdir = '%Y-%m'
</code></pre>

<p>のように指定。文字列には strftime()で使用できる書式指定コードを指定可能。</p>

<p>Kaoriya版なら、VC2010なので<a href="http://msdn.microsoft.com/ja-jp/library/fe06s4ak.aspx">Visual Studio 2010のstrftime()</a>を参照。</p>

<p>gccでコンパイルされてるなら<a href="http://linuxjm.sourceforge.jp/html/LDP_man-pages/man3/strftime.3.html">Manpage of strftime</a>になるのかな？</p>

<p>サブフォルダが存在しない場合は自動的に作られる(vimのmkdir()が存在すれば)。また’%Y/%m’のように複数階
層になっても動くはず。</p>

<h3 id="published-">:published の追加</h3>

<p>下書き機能ってないのかな？と<a href="http://octopress.org/docs/blogging/">Octopress Document-Blogging Basics</a>を見てるとYAML Front Matterに<code>published: false</code>と指定すれば良い
ことが分かった。</p>

<p>その時わざわざ追加するのもうざいので、記事の先頭部分に<code>published:</code>を追加するようにしてみた(初期値はtrue)</p>

<h3 id="categorieskeywords">categories:、keywords:に初期値追加</h3>

<p>いつも「書式どうだったっけ？」と思うので、<code>categories:</code>と<code>keywords:</code>にダミー初期値を出力するようにし
てみた。</p>

<p>鬱陶しいならソースを修正しといてください</p>

<h3 id="more---">続きを読む<code>&lt;!-- more --&gt;</code>の追加</h3>

<p>記事中に<code>&lt;!-- more --&gt;</code>があると「続きを読む」リンクが表示される。</p>

<p>毎回打つのも面倒なので、末尾に追加するようにしてみた。</p>

<p>なお表記はデフォルトでは「Read on →」となるが、これを変更したい場合<code>_config.yml</code>の</p>

<pre><code>excerpt_link: "Read on &amp;rarr;"  # "Continue reading" link text at the bottom of excerpted articles
</code></pre>

<p>を変更すればよい。</p>

<h2 id="section-2">ソースコード</h2>

<p><code>$VIMRUNTIME/autoload/myvimrc.vim</code>に以下を追加</p>

<p><div><script src='https://gist.github.com/1597341.js?file='></script>
<noscript><pre><code>&quot;Octopress 新記事作成
&quot;
&quot;使用するグローバル変数
&quot;  g:octopress_rootdir        octopressルートディレクトリ
&quot;  g:octopress_article_ext    記事の拡張子
&quot;  g:octopress_article_subdir 記事のサブフォルダ。strftime()のパラメータ(%Y等)
&quot;                             使用可能
&quot;
&quot; 2012/01/06  新規作成
&quot; 2012/01/11  category,keywordに初期値を入れた
&quot;             publishedフィールド追加
&quot;             g:octopress_article_subdir追加
&quot;             
func! myvimrc#new_article(title)
  let l:atitle = a:title
  if ( l:atitle == &quot;&quot; )
    let l:atitle = input(&quot;input title:&quot;)
  endif
  let l:time = localtime()
  let l:hantitle = l:atitle
  &quot;Kaoriya 全角→半角関数があるなら使う
  if ( exists( &quot;*ToHankaku&quot; ) )
    let l:hantitle = ToHankaku(l:atitle)
  endif
  &quot; match_characterはKaoriyaのhz_ja.vimより。意味はよく分からん。
  let l:match_character = '\%([ｳｶｷｸｹｺｻｼｽｾｿﾀﾁﾂﾃﾄﾊﾋﾌﾍﾎ]ﾞ\|[ﾊﾋﾌﾍﾎ]ﾟ\|.\)'
  let l:asctitle = &quot;&quot;
  let l:ii = 0
  let l:len = strlen(l:hantitle)
  &quot; titleのファイル名に使える英数字＆記号だけ抜き出す。
  while ( l:ii &lt; l:len )
      let l:char = matchstr(l:hantitle, l:match_character, l:ii)
    &quot;2バイト文字は省く
    if ( l:char =~ '^\f$' &amp;&amp; char2nr(l:char) &lt; 256 )
      let l:asctitle .= l:char
    endif
    let l:ii += strlen(l:char)
  endwhile
  if ( l:asctitle == &quot;&quot; )
    let l:asctitle = &quot;article&quot;
  endif
  let article_dir = get(g:, 'octopress_rootdir', '~/octopress') . '/source/_posts/'  
  let sub_dir = strftime(get(g:, 'octopress_article_subdir', ''), l:time)
  if ( sub_dir != '' )
    if ( finddir( article_dir . sub_dir ) == '' )
      if ( exists( &quot;*mkdir&quot; ) )
        let article_dir .= l:sub_dir
        call mkdir( article_dir, &quot;p&quot; )
      else
        &quot;作れない場合は_postsに置いとく
        echohl ErrorMsg | echomsg 'mkdirをサポートしてません _postに置いておきます' | echohl None
      endif
    else
      let article_dir .= l:sub_dir
    endif
    let last_char = article_dir[strlen(article_dir)-1]
    if ( last_char != '/' &amp;&amp; last_char != '\' )
      let article_dir .= '/'
    endif
  endif

  let article_ext = get(g:, 'octopress_article_ext', 'markdown')

  let l:fbase = strftime(&quot;%Y-%m-%d-&quot;, l:time) . l:asctitle
  let l:fname = article_dir . l:fbase . '.'  . article_ext
  let l:is_create = 1
  if ( findfile(l:fname) != &quot;&quot; )
    let l:ec = tolower(input(&quot;'&quot;.l:fbase.'.'.article_ext.&quot;' is exist create/overwrite/edit [c/w/e]?:&quot;))
    if ( l:ec == &quot;w&quot; )
      call delete(l:fname)
    elseif (l:ec == &quot;c&quot; )
      let l:ii = 0
      while ( 1 )
        let l:ii += 1
        let l:fname = article_dir . l:fbase.'_'.l:ii.'.' . article_ext
        if ( findfile(l:fname) == &quot;&quot; )
          break
        endif
      endwhile
    elseif (l:ec == &quot;e&quot; )
      let l:is_create = 0
    else
      return
    endif
  endif
  if ( l:is_create )
    let l:utf8title = &quot;&quot;
    if ( has('iconv') )
      let l:utf8title = iconv(l:atitle, &amp;enc, &quot;utf-8&quot;)
    else
      let l:utf8title = l:atitle
    endif

    let l:wlines = ['---', 'layout: post']
    let l:wlines += ['title: &quot;' . l:utf8title . '&quot;']
    let l:wlines += ['date: '. strftime(&quot;%Y-%m-%d %H:%M&quot;, l:time)]
    let l:wlines += ['comments: true', 'published: true', 'categories: [cat1, cat2]']
    let l:wlines += ['description: ', 'keywords: key1, key2', '---', '',&quot;&lt;!-- more --&gt;&quot;]

    call writefile( l:wlines, l:fname )
  endif
  if ( l:asctitle == l:atitle )
    &quot;タイトルに日本語が含まれない場合、明示的にutf-8にしてみる
    &quot;タイトルにファイル名に使えない文字が含まれてる場合ここを通らないけど
    augroup au_oct_new
      au BufEnter * setl fenc=utf-8
    augroup END
  endif
  execute &quot;edit&quot; . &quot; ++enc=UTF-8 &quot; . l:fname | &quot;normal G&quot;
  if ( l:asctitle == l:atitle )
    augroup au_oct_new
      autocmd!
    augroup END
  endif
endfunc
</code></pre></noscript></div>
</p>

<p><code>$MYVIMRC</code>に以下を追加</p>

<p><code>vim _vimrc
command! -nargs=? OctNewPost call myvimrc#new_article(&lt;q-args&gt;)
"設定サンプル
let g:octopress_article_ext = "krd"
let g:octopress_rootdir = expand('$OCTOPRESS_DIR')
let g:octopress_article_subdir = '%Y-%m'
</code></p>

<p>そのうちプラグインにするかも。</p>

<h2 id="section-3">実行と出力サンプル</h2>

<p>今日の日付が2012/01/12で上記設定サンプルが有効な場合にvim上で</p>

<pre><code>:OctNewPost Octopressを試してみる
</code></pre>

<p>などとして実行すると<code>$OCTOPRESS_DIR/source/_post/2012-01/2012-01-12-Octopress.krd</code>
ができる</p>

<h2 id="yaml-2012-01-12-octopresskrd">``` yaml 2012-01-12-Octopress.krd</h2>
<p>layout: post
title: “Octopressを試してみる”
date: 2012-01-12 09:08
comments: true
published: true
categories: [cat1, cat2]
description: 
keywords: key1, key2
—</p>

<!-- more -->

<p>```</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[vimのhelpgrepで日本語が使えない場合]]></title>
    <link href="http://nukino.github.com/blog/2012/01/10/helpgrep/"/>
    <updated>2012-01-10T00:14:00+09:00</updated>
    <id>http://nukino.github.com/blog/2012/01/10/helpgrep</id>
    <content type="html"><![CDATA[<p>help内をgrep検索できるhelpgrep(＆lhelpgrep)なるコマンドがあることを最近知った(←遅い)。</p>

<p>しかし、私が使ってるvim(vim 7.3.393 Kaoriya版)では、helpgrepで日本語検索が出来ない。</p>

<p><a href="https://github.com/vim-jp/issues/issues/95">このページ</a>に依ると、内部エンコーディングがUTF-8以外の場合×みた
いなので、<code>_vimrc</code>に</p>

<pre><code>set enc=utf-8
</code></pre>

<p>と書けばおｋ･･･なのだが、内部エンコーディングはあまり変えたくないので、helpgrep(&amp;lhelpgrep)に渡す文字列、返ってきた文字列を変換するようにしてみた。</p>

<!-- more -->

<p><code>_vimrc</code>に以下を追加する。</p>

<p><div><script src='https://gist.github.com/1583365.js?file='></script>
<noscript><pre><code>func! FuncJHelpgrep(strg, type)
    if ( &amp;enc != &quot;utf-8&quot; )
        if ( !has('iconv') )
            echohl ErrorMsg | echomsg 'Not support iconv' | echohl None
            return
        endif
        if ( a:type == 0 )
            let scmd = &quot;helpgrep &quot;
        else
            let scmd = &quot;lhelpgrep &quot;
        endif
        &quot;検索結果をUTF-8に変換
        let sfind = iconv(a:strg, &amp;enc, &quot;utf-8&quot;)
        exe scmd . sfind
        if ( a:type == 0 )
            let flist = getqflist()
        else
            &quot;ヘルプウィンドウを検索
            let l:bufnrlist = tabpagebuflist()
            let nr_helpw = -1
            for i in bufnrlist
                if ( getbufvar(i, &quot;&amp;filetype&quot;) == &quot;help&quot; )
                    let nr_helpw = bufwinnr(i)
                    break
                endif
            endfor
            if ( nr_helpw == -1 )
                echohl ErrorMsg | echomsg 'Not found Help Window' | echohl None
                return
            else
                let flist = getloclist(nr_helpw)
            endif
        endif
        for l in flist
            let l.text = iconv(l.text, &quot;utf-8&quot;, &amp;enc)
        endfor
        if ( a:type == 0 )
            call setqflist(flist)
        else
            call setloclist(nr_helpw, flist)
        endif
    else
        helpgrep a:strg
    endif
endfunc

&quot;コマンド
command! -nargs=1 Jhelpg        call FuncJHelpgrep(&lt;q-args&gt;, 0)
command! -nargs=1 Jlhelpg       call FuncJHelpgrep(&lt;q-args&gt;, 1)</code></pre></noscript></div>
</p>

<p>Jhelpgコマンドがhelpgrep、Jlhelpgコマンドがlhelpgrepに相当する。</p>

<pre><code>:Jhelpg 検索文字列
:Jlhelpg 検索文字列
</code></pre>

<p>のように使用する。<code>_vimrc</code>に関数書くと常にロードされるから嫌な場合はautoload関数にすればいい。</p>

<p>QuickFix、ロケーションリストの文字化けは直してあるが、画面下部に表示されるメッセージの文字化けは直してない。</p>

<p>まあそのうちvimが修正されると思うけど。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[vimからSSH/SCP接続してみる]]></title>
    <link href="http://nukino.github.com/blog/2012/01/08/vimSSH/"/>
    <updated>2012-01-08T06:10:00+09:00</updated>
    <id>http://nukino.github.com/blog/2012/01/08/vimSSH</id>
    <content type="html"><![CDATA[<p>ヘルプを探ってるとvimからSSH/SCP接続出来ることを知ったので、試してみた。</p>

<dl>
  <dt>クライアントPC</dt>
  <dd>Windows XP + vim 7.3.393(Kaoriya版)</dd>
  <dt>サーバーPC</dt>
  <dd>Ubuntu 11.10</dd>
</dl>

<p>で確認。「サーバー側にvim入れてSSHクライアント上で動かせば良いんじゃね？」という突っ込みは禁止www</p>

<!-- more -->
<p>サーバーPCにSSHサーバをインストール
—</p>

<p>サーバーPCのコマンドラインで</p>

<pre><code>sudo apt-get install ssh
</code></pre>

<p>とする。別にOpen SSHなどでも構わない。</p>

<h2 id="pcssh">クライアントPCにSSHクライアントをインストール</h2>

<p>SSHクライアントはPuTTY 0.60 ごった煮版 2007年8月6日版を使用した。</p>

<p>ダウンロードは<a href="http://yebisuya.dip.jp/Software/PuTTY/">PuTTY ごった煮版</a>から行う。</p>

<p><a href="http://www.chiark.greenend.org.uk/~sgtatham/putty/">本家</a>の方がバージョンは新しい。Windows 7で使う
ならこちらの方がいいかも。</p>

<p>インストールする場合にはデフォルトのフォルダではなく<code>C:\PuTTy</code>などの空白を含まないパスにインストール
することを推奨(理由は後述)</p>

<h2 id="myvimrc">$MYVIMRCを編集</h2>

<p>$MYVIMRC(ユーザーvimファイル。一般的には<code>$HOME/_vimrc</code>や<code>$HOME/.vimrc</code>など)を編集し、以下の記述を追
加(sftpは不要かな？)。</p>

<p><div><script src='https://gist.github.com/1576194.js?file='></script>
<noscript><pre><code>if (has('win32') || has('win64'))
    &quot;use scp
    let g:netrw_scp_cmd     = &quot;E:\\PuTTY\\pscp.exe -q -batch&quot;
    let g:netrw_sftp_cmd    = &quot;E:\\PuTTY\\psftp.exe&quot;
    let g:netrw_ssh_cmd     = &quot;E:\\PuTTY\\plink.exe&quot;
endif</code></pre></noscript></div>
</p>

<p>文字列を’”‘(ダブルクォーテーション)で括ってあるのは試してる際にそうすると何故か動き出したからだが、
今試すと”’“(シングルクォーテーション)で括っても動くことが判明したので特に意味無しかも<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>。</p>

<p>実行ファイルのパスに空白が入ってると上手く動かない。(ダブルクォーテーションで括っても駄目。
<code>g:netrw_list_cmd</code>を直接指定すると、最初のファイル一覧は取得できる)</p>

<p>既にPuTTyを空白の入ったフォルダ(<code>C:\Program Files\PuTTy</code>など)にインストールしてしまってる人は</p>

<ol>
  <li>空白の入らないフォルダ(<code>C:\PuTTy</code>など)に再インストール</li>
  <li>PuTTyのあるインストールフォルダにPATHを通して、<code>g:netrw_scp_cmd</code>などに実行ファイル名のみ指定</li>
  <li>空白の入らないフォルダにジャンクション/シンボリックリンクする</li>
  <li>空白の入らないフォルダにPuTTyフォルダの中身をコピーする</li>
</ol>

<p>のうちお好きなのをどうぞ。</p>

<h2 id="ssh">SSH接続を公開鍵認証に変更</h2>

<p>このままだとSCP/SSH接続しようとした際にユーザー名/パスワード入力の部分で止まる(vimからプロンプトが出
ない)。</p>

<p>そこで、公開鍵認証＋pageantでパスワード認証を自動化する(サーバーが1つしかないならplink.exeに-pwオプ
ション付けとくというのでもいいけど)。</p>

<p>具体的な設定方法は<a href="http://www.atmarkit.co.jp/flinux/rensai/buildlamp/lamp_05/05_1.html">公開鍵認証でsshを安全に使う</a>を参照。</p>

<p>上記のサイトを読めばちゃんと書いてあるが、公開鍵をサーバーに設置する際[公開鍵の保存]ボタンで保
存したファイルを使っちゃ駄目です。PuTTy鍵生成ダイアログ上部のテキストを貼り付けませう←ここで少し
嵌まった。</p>

<p>上記サイトでは<code>/etc/ssh/sshd_config</code>の編集方法があまり詳しく載ってないので補完しておくと(大体分かると思うけど)</p>

<p>33行目の”#”を外す</p>

<pre><code>AuthorizedKeysFile      %h/.ssh/authorized_keys
</code></pre>

<p>パスワード認証を無効化するには55行目のコメントを外してyes→no</p>

<pre><code>PasswordAuthentication no
</code></pre>

<p>としてサーバー上で</p>

<pre><code>/etc/init.d/ssh restart
</code></pre>

<p>とすれば設定が有効化します。</p>

<p>pageantで作った秘密鍵を追加しとくのを忘れずに。</p>

<h2 id="section">使い方</h2>

<p>クライアント上のvimで</p>

<pre><code>:e scp://user@192.168.0.4/
</code></pre>

<p>とかするとサーバーのuserホームディレクトリの内容がダーっと表示されます。scpのパスは</p>

<pre><code>scp://[user@]machine[[:#]port]/path
</code></pre>

<p>と指定できるみたいです。(pathの末尾が”/”だとディレクトリを意味する)<br />
但しpathは指定したuserのホームディレクトリからの相対パスになるので、絶対パスにしたい場合は</p>

<pre><code>:e scp://root@192.168.0.4//etc/ssh/
</code></pre>

<p>とか</p>

<pre><code>:e scp://root@192.168.0.4//etc/ssh/sshd_config
</code></pre>

<p>みたいに先頭に”/”を付けます。</p>

<p>あと詳しい使い方はvimで</p>

<pre><code>:h netrw
</code></pre>

<p>参照。</p>

<h2 id="section-1">感想</h2>

<p>別件でやりたいことがあって調べてた際に見つけて試してみたけど、vimって色んな事が出来ることを再認識。</p>

<p>ディレクトリ移動とかは1回ずつSSH接続しに行くみたいなので、動作はかなりもっさりしている。</p>

<p>サーバーにvimを入れられない環境なら便利かもしれないが、自宅で使う場合はサーバー側にvim入れちゃった方
が速くてスマート。</p>

<hr />

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>実行ファイルのパスに空白が入ってるときは’"’で括らないと駄目。とかそういうことなのかも<a href="#fnref:1" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[vim環境の再構築１(DropBoxでvim設定の共有)]]></title>
    <link href="http://nukino.github.com/blog/2011/12/24/test-post/"/>
    <updated>2011-12-24T05:58:00+09:00</updated>
    <id>http://nukino.github.com/blog/2011/12/24/test-post</id>
    <content type="html"><![CDATA[<p>最近vimでvundleとかpathogenとかでプラグイン管理するのが流行ってるっぽいので、私もやってみたい。<br />
ついでなのでこの機会にvim環境を再構築してみようと計画してみた。</p>

<ol>
  <li>vim設定の共有化</li>
  <li>neobundleでプラグイン管理</li>
  <li>今使ってるプラグインの見直し</li>
  <li>ruby編集環境構築(quickrun、vim-refなど)</li>
</ol>

<p>こんな感じの計画かな？</p>

<!-- more -->
<p>##vim設定の共有化について</p>

<p>使ってるPCでプラグインやその他設定が一致していると便利。</p>

<p>githubでvim設定を共有化するページを幾つか見つけたが、なんとなく同期させるには毎回コマンドを打たない
といけないような気がする。</p>

<p>ものぐさな私はそんな鬱陶しいことやってられないので、今使ってるDropBoxを利用すればDropBoxフォルダに置
いておくだけで、自動的に同期してくれるから便利な気がする。</p>

<p>もちろんSugarSyncなどローカルにあるフォルダを同期してくれるオンラインストレージならなんでもおｋ。</p>

<p>DropBoxでアカウント取りたい場合は<a href="http://db.tt/cZwekOvO">ここ</a>からアカウント作ってくれると嬉しいです
。(招待機能で招待した人された人双方に256MB容量が増える。でもアカウント作ったメアドが私にばれちゃうの
で注意)</p>

<h2 id="vimrcgvimrcdropbox">ユーザvimrc、ユーザgvimrcをDropBoxフォルダで管理</h2>

<p>ユーザvimrc、ユーザgvimrcは私の環境はWindowsなので、<code>$HOME/_vimrc</code>、<code>$HOME/_gvimrc</code>にあります。</p>

<p>これをDropBoxフォルダに置きたい。一番簡単なのは</p>

<pre class="cmdline"><code>SET HOME=%DROPBOX_DIR%
</code></pre>

<p>みたいに$HOMEをDrobBoxフォルダにしてしまうことですが、これは好みではない。</p>

<p>なので、ハードリンクを使おうと思う(Windows 2000以降＆$HOMEとDropBoxフォルダが同じボリューム＆その
ボリュームがNTFSフォーマットの場合使用可能)。  </p>

<p>最近のMac OSやlinuxユーザはハードリンクなりシンボリックリンクなりを使えば可能だと思う(lnコマンドだっ
け？)。<br />
Windows Vista以降ではシンボリックリンクが実装されてるみたいなんで、同一ボリュームの制限はないみたい
(mklinkコマンドを使用？)</p>

<p>私はPPxというファイラでサクッと作ってしまいましたが、持ってない人はコマンドラインを叩けば可。</p>

<p>$HOME/_vimrc、$HOME/_gvimrcをDropBoxフォルダへ移動した上で(不安ならバックアップ取った上で)</p>

<pre class="cmdline"><code>fsutil hardlink create %HOME%\_vimrc %DROPBOX_DIR%\_vimrc
fsutil hardlink create %HOME%\_gvimrc %DROPBOX_DIR%\_gvimrc
</code></pre>

<p>とかすれば出来るんじゃないかと思います。</p>

<p>残念ながらハードリンク or シンボリックリンクを使える条件を満たしてない場合は若干イリーガルだけど、</p>

<pre class="cmdline"><code>SET MYVIMRC=%DROPBOX_DIR%\_vimrc
SET MYGVIMRC=%DROPBOX_DIR%\_gvimrc
SET VIMINIT=:source %MYVIMRC%
SET GVIMINIT=:source %MYGVIMRC%
</code></pre>

<p>とかすればOK(当然コントロールパネル等で上記コマンドに相当する環境変数の設定をやること)</p>

<p>最初ハードリンクがファイルへのリンク貼れるの知らなくて、こっちのイリーガルな方法でやってたんで、動作
は確認済み(ただし私の環境ではMYGVIMRCは環境変数展開じゃ駄目で直接パス打ち込まないと動かなかった)</p>

<p>または$HOME/_vimrcに</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span><code>$HOME/_vimrc</code> </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>source expand(‘$DROPBOX_DIR’) . ‘/_vimrc’</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>とか書いてもおｋ・・・だと思う(試してない)</p>

<h2 id="runtimepath">$RUNTIMEPATHの追加</h2>

<p>$RUNTIMEPATHは以下のように運用しようと思う</p>

<dl>
  <dt>$DROPBOX_DIR/vimfiles</dt>
  <dd>共有するプラグイン、vim設定を入れる</dd>
  <dt>$HOME/vimfiles/</dt>
  <dd>そのパソコン固有の設定を入れる</dd>
  <dt>$HOME/vimfiles/after</dt>
  <dd>そのパソコン固有の設定を入れる。共有設定を上書きしたい場合に利用する</dd>
</dl>

<p>ということでDROPBOX_DIRという環境変数を設定した上で、ユーザvimrcの先頭に以下のように記述する</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span><code>$HOME/_vimrc</code> </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>let dropbox_vim=substitute(expand($DROPBOX_DIR), “\”, “/”, “g”) . ‘/vimfiles’
</span><span class='line'>	let &amp;runtimepath = dropbox_vim . “,” . &amp;runtimepath</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>$vimのpluginとかより先にロードされちゃうのが若干気になるが、今のところ特に問題はなさそう。</p>

]]></content>
  </entry>
  
</feed>
